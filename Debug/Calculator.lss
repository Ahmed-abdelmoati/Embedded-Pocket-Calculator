
Calculator.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003bd4  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000128  00800060  00003bd4  00003c48  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         00002bc8  00000000  00000000  00003d70  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      000010bb  00000000  00000000  00006938  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 000001c0  00000000  00000000  000079f3  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 00000214  00000000  00000000  00007bb3  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002612  00000000  00000000  00007dc7  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000014ce  00000000  00000000  0000a3d9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000130b  00000000  00000000  0000b8a7  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001e0  00000000  00000000  0000cbb4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000307  00000000  00000000  0000cd94  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000a1a  00000000  00000000  0000d09b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  0000dab5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e4 ed       	ldi	r30, 0xD4	; 212
      68:	fb e3       	ldi	r31, 0x3B	; 59
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a8 38       	cpi	r26, 0x88	; 136
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
      76:	0e 94 b8 1c 	call	0x3970	; 0x3970 <main>
      7a:	0c 94 e8 1d 	jmp	0x3bd0	; 0x3bd0 <_exit>

0000007e <__bad_interrupt>:
      7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <__fixunssfsi>:
      82:	ef 92       	push	r14
      84:	ff 92       	push	r15
      86:	0f 93       	push	r16
      88:	1f 93       	push	r17
      8a:	7b 01       	movw	r14, r22
      8c:	8c 01       	movw	r16, r24
      8e:	20 e0       	ldi	r18, 0x00	; 0
      90:	30 e0       	ldi	r19, 0x00	; 0
      92:	40 e0       	ldi	r20, 0x00	; 0
      94:	5f e4       	ldi	r21, 0x4F	; 79
      96:	0e 94 ed 03 	call	0x7da	; 0x7da <__gesf2>
      9a:	88 23       	and	r24, r24
      9c:	8c f0       	brlt	.+34     	; 0xc0 <__fixunssfsi+0x3e>
      9e:	c8 01       	movw	r24, r16
      a0:	b7 01       	movw	r22, r14
      a2:	20 e0       	ldi	r18, 0x00	; 0
      a4:	30 e0       	ldi	r19, 0x00	; 0
      a6:	40 e0       	ldi	r20, 0x00	; 0
      a8:	5f e4       	ldi	r21, 0x4F	; 79
      aa:	0e 94 b9 01 	call	0x372	; 0x372 <__subsf3>
      ae:	0e 94 ab 04 	call	0x956	; 0x956 <__fixsfsi>
      b2:	9b 01       	movw	r18, r22
      b4:	ac 01       	movw	r20, r24
      b6:	20 50       	subi	r18, 0x00	; 0
      b8:	30 40       	sbci	r19, 0x00	; 0
      ba:	40 40       	sbci	r20, 0x00	; 0
      bc:	50 48       	sbci	r21, 0x80	; 128
      be:	06 c0       	rjmp	.+12     	; 0xcc <__fixunssfsi+0x4a>
      c0:	c8 01       	movw	r24, r16
      c2:	b7 01       	movw	r22, r14
      c4:	0e 94 ab 04 	call	0x956	; 0x956 <__fixsfsi>
      c8:	9b 01       	movw	r18, r22
      ca:	ac 01       	movw	r20, r24
      cc:	b9 01       	movw	r22, r18
      ce:	ca 01       	movw	r24, r20
      d0:	1f 91       	pop	r17
      d2:	0f 91       	pop	r16
      d4:	ff 90       	pop	r15
      d6:	ef 90       	pop	r14
      d8:	08 95       	ret

000000da <_fpadd_parts>:
      da:	a0 e0       	ldi	r26, 0x00	; 0
      dc:	b0 e0       	ldi	r27, 0x00	; 0
      de:	e3 e7       	ldi	r30, 0x73	; 115
      e0:	f0 e0       	ldi	r31, 0x00	; 0
      e2:	0c 94 b1 1d 	jmp	0x3b62	; 0x3b62 <__prologue_saves__>
      e6:	dc 01       	movw	r26, r24
      e8:	2b 01       	movw	r4, r22
      ea:	fa 01       	movw	r30, r20
      ec:	9c 91       	ld	r25, X
      ee:	92 30       	cpi	r25, 0x02	; 2
      f0:	08 f4       	brcc	.+2      	; 0xf4 <_fpadd_parts+0x1a>
      f2:	39 c1       	rjmp	.+626    	; 0x366 <_fpadd_parts+0x28c>
      f4:	eb 01       	movw	r28, r22
      f6:	88 81       	ld	r24, Y
      f8:	82 30       	cpi	r24, 0x02	; 2
      fa:	08 f4       	brcc	.+2      	; 0xfe <_fpadd_parts+0x24>
      fc:	33 c1       	rjmp	.+614    	; 0x364 <_fpadd_parts+0x28a>
      fe:	94 30       	cpi	r25, 0x04	; 4
     100:	69 f4       	brne	.+26     	; 0x11c <_fpadd_parts+0x42>
     102:	84 30       	cpi	r24, 0x04	; 4
     104:	09 f0       	breq	.+2      	; 0x108 <_fpadd_parts+0x2e>
     106:	2f c1       	rjmp	.+606    	; 0x366 <_fpadd_parts+0x28c>
     108:	11 96       	adiw	r26, 0x01	; 1
     10a:	9c 91       	ld	r25, X
     10c:	11 97       	sbiw	r26, 0x01	; 1
     10e:	89 81       	ldd	r24, Y+1	; 0x01
     110:	98 17       	cp	r25, r24
     112:	09 f4       	brne	.+2      	; 0x116 <_fpadd_parts+0x3c>
     114:	28 c1       	rjmp	.+592    	; 0x366 <_fpadd_parts+0x28c>
     116:	a0 e6       	ldi	r26, 0x60	; 96
     118:	b0 e0       	ldi	r27, 0x00	; 0
     11a:	25 c1       	rjmp	.+586    	; 0x366 <_fpadd_parts+0x28c>
     11c:	84 30       	cpi	r24, 0x04	; 4
     11e:	09 f4       	brne	.+2      	; 0x122 <_fpadd_parts+0x48>
     120:	21 c1       	rjmp	.+578    	; 0x364 <_fpadd_parts+0x28a>
     122:	82 30       	cpi	r24, 0x02	; 2
     124:	a9 f4       	brne	.+42     	; 0x150 <_fpadd_parts+0x76>
     126:	92 30       	cpi	r25, 0x02	; 2
     128:	09 f0       	breq	.+2      	; 0x12c <_fpadd_parts+0x52>
     12a:	1d c1       	rjmp	.+570    	; 0x366 <_fpadd_parts+0x28c>
     12c:	9a 01       	movw	r18, r20
     12e:	ad 01       	movw	r20, r26
     130:	88 e0       	ldi	r24, 0x08	; 8
     132:	ea 01       	movw	r28, r20
     134:	09 90       	ld	r0, Y+
     136:	ae 01       	movw	r20, r28
     138:	e9 01       	movw	r28, r18
     13a:	09 92       	st	Y+, r0
     13c:	9e 01       	movw	r18, r28
     13e:	81 50       	subi	r24, 0x01	; 1
     140:	c1 f7       	brne	.-16     	; 0x132 <_fpadd_parts+0x58>
     142:	e2 01       	movw	r28, r4
     144:	89 81       	ldd	r24, Y+1	; 0x01
     146:	11 96       	adiw	r26, 0x01	; 1
     148:	9c 91       	ld	r25, X
     14a:	89 23       	and	r24, r25
     14c:	81 83       	std	Z+1, r24	; 0x01
     14e:	08 c1       	rjmp	.+528    	; 0x360 <_fpadd_parts+0x286>
     150:	92 30       	cpi	r25, 0x02	; 2
     152:	09 f4       	brne	.+2      	; 0x156 <_fpadd_parts+0x7c>
     154:	07 c1       	rjmp	.+526    	; 0x364 <_fpadd_parts+0x28a>
     156:	12 96       	adiw	r26, 0x02	; 2
     158:	2d 90       	ld	r2, X+
     15a:	3c 90       	ld	r3, X
     15c:	13 97       	sbiw	r26, 0x03	; 3
     15e:	eb 01       	movw	r28, r22
     160:	8a 81       	ldd	r24, Y+2	; 0x02
     162:	9b 81       	ldd	r25, Y+3	; 0x03
     164:	14 96       	adiw	r26, 0x04	; 4
     166:	ad 90       	ld	r10, X+
     168:	bd 90       	ld	r11, X+
     16a:	cd 90       	ld	r12, X+
     16c:	dc 90       	ld	r13, X
     16e:	17 97       	sbiw	r26, 0x07	; 7
     170:	ec 80       	ldd	r14, Y+4	; 0x04
     172:	fd 80       	ldd	r15, Y+5	; 0x05
     174:	0e 81       	ldd	r16, Y+6	; 0x06
     176:	1f 81       	ldd	r17, Y+7	; 0x07
     178:	91 01       	movw	r18, r2
     17a:	28 1b       	sub	r18, r24
     17c:	39 0b       	sbc	r19, r25
     17e:	b9 01       	movw	r22, r18
     180:	37 ff       	sbrs	r19, 7
     182:	04 c0       	rjmp	.+8      	; 0x18c <_fpadd_parts+0xb2>
     184:	66 27       	eor	r22, r22
     186:	77 27       	eor	r23, r23
     188:	62 1b       	sub	r22, r18
     18a:	73 0b       	sbc	r23, r19
     18c:	60 32       	cpi	r22, 0x20	; 32
     18e:	71 05       	cpc	r23, r1
     190:	0c f0       	brlt	.+2      	; 0x194 <_fpadd_parts+0xba>
     192:	61 c0       	rjmp	.+194    	; 0x256 <_fpadd_parts+0x17c>
     194:	12 16       	cp	r1, r18
     196:	13 06       	cpc	r1, r19
     198:	6c f5       	brge	.+90     	; 0x1f4 <_fpadd_parts+0x11a>
     19a:	37 01       	movw	r6, r14
     19c:	48 01       	movw	r8, r16
     19e:	06 2e       	mov	r0, r22
     1a0:	04 c0       	rjmp	.+8      	; 0x1aa <_fpadd_parts+0xd0>
     1a2:	96 94       	lsr	r9
     1a4:	87 94       	ror	r8
     1a6:	77 94       	ror	r7
     1a8:	67 94       	ror	r6
     1aa:	0a 94       	dec	r0
     1ac:	d2 f7       	brpl	.-12     	; 0x1a2 <_fpadd_parts+0xc8>
     1ae:	21 e0       	ldi	r18, 0x01	; 1
     1b0:	30 e0       	ldi	r19, 0x00	; 0
     1b2:	40 e0       	ldi	r20, 0x00	; 0
     1b4:	50 e0       	ldi	r21, 0x00	; 0
     1b6:	04 c0       	rjmp	.+8      	; 0x1c0 <_fpadd_parts+0xe6>
     1b8:	22 0f       	add	r18, r18
     1ba:	33 1f       	adc	r19, r19
     1bc:	44 1f       	adc	r20, r20
     1be:	55 1f       	adc	r21, r21
     1c0:	6a 95       	dec	r22
     1c2:	d2 f7       	brpl	.-12     	; 0x1b8 <_fpadd_parts+0xde>
     1c4:	21 50       	subi	r18, 0x01	; 1
     1c6:	30 40       	sbci	r19, 0x00	; 0
     1c8:	40 40       	sbci	r20, 0x00	; 0
     1ca:	50 40       	sbci	r21, 0x00	; 0
     1cc:	2e 21       	and	r18, r14
     1ce:	3f 21       	and	r19, r15
     1d0:	40 23       	and	r20, r16
     1d2:	51 23       	and	r21, r17
     1d4:	21 15       	cp	r18, r1
     1d6:	31 05       	cpc	r19, r1
     1d8:	41 05       	cpc	r20, r1
     1da:	51 05       	cpc	r21, r1
     1dc:	21 f0       	breq	.+8      	; 0x1e6 <_fpadd_parts+0x10c>
     1de:	21 e0       	ldi	r18, 0x01	; 1
     1e0:	30 e0       	ldi	r19, 0x00	; 0
     1e2:	40 e0       	ldi	r20, 0x00	; 0
     1e4:	50 e0       	ldi	r21, 0x00	; 0
     1e6:	79 01       	movw	r14, r18
     1e8:	8a 01       	movw	r16, r20
     1ea:	e6 28       	or	r14, r6
     1ec:	f7 28       	or	r15, r7
     1ee:	08 29       	or	r16, r8
     1f0:	19 29       	or	r17, r9
     1f2:	3c c0       	rjmp	.+120    	; 0x26c <_fpadd_parts+0x192>
     1f4:	23 2b       	or	r18, r19
     1f6:	d1 f1       	breq	.+116    	; 0x26c <_fpadd_parts+0x192>
     1f8:	26 0e       	add	r2, r22
     1fa:	37 1e       	adc	r3, r23
     1fc:	35 01       	movw	r6, r10
     1fe:	46 01       	movw	r8, r12
     200:	06 2e       	mov	r0, r22
     202:	04 c0       	rjmp	.+8      	; 0x20c <_fpadd_parts+0x132>
     204:	96 94       	lsr	r9
     206:	87 94       	ror	r8
     208:	77 94       	ror	r7
     20a:	67 94       	ror	r6
     20c:	0a 94       	dec	r0
     20e:	d2 f7       	brpl	.-12     	; 0x204 <_fpadd_parts+0x12a>
     210:	21 e0       	ldi	r18, 0x01	; 1
     212:	30 e0       	ldi	r19, 0x00	; 0
     214:	40 e0       	ldi	r20, 0x00	; 0
     216:	50 e0       	ldi	r21, 0x00	; 0
     218:	04 c0       	rjmp	.+8      	; 0x222 <_fpadd_parts+0x148>
     21a:	22 0f       	add	r18, r18
     21c:	33 1f       	adc	r19, r19
     21e:	44 1f       	adc	r20, r20
     220:	55 1f       	adc	r21, r21
     222:	6a 95       	dec	r22
     224:	d2 f7       	brpl	.-12     	; 0x21a <_fpadd_parts+0x140>
     226:	21 50       	subi	r18, 0x01	; 1
     228:	30 40       	sbci	r19, 0x00	; 0
     22a:	40 40       	sbci	r20, 0x00	; 0
     22c:	50 40       	sbci	r21, 0x00	; 0
     22e:	2a 21       	and	r18, r10
     230:	3b 21       	and	r19, r11
     232:	4c 21       	and	r20, r12
     234:	5d 21       	and	r21, r13
     236:	21 15       	cp	r18, r1
     238:	31 05       	cpc	r19, r1
     23a:	41 05       	cpc	r20, r1
     23c:	51 05       	cpc	r21, r1
     23e:	21 f0       	breq	.+8      	; 0x248 <_fpadd_parts+0x16e>
     240:	21 e0       	ldi	r18, 0x01	; 1
     242:	30 e0       	ldi	r19, 0x00	; 0
     244:	40 e0       	ldi	r20, 0x00	; 0
     246:	50 e0       	ldi	r21, 0x00	; 0
     248:	59 01       	movw	r10, r18
     24a:	6a 01       	movw	r12, r20
     24c:	a6 28       	or	r10, r6
     24e:	b7 28       	or	r11, r7
     250:	c8 28       	or	r12, r8
     252:	d9 28       	or	r13, r9
     254:	0b c0       	rjmp	.+22     	; 0x26c <_fpadd_parts+0x192>
     256:	82 15       	cp	r24, r2
     258:	93 05       	cpc	r25, r3
     25a:	2c f0       	brlt	.+10     	; 0x266 <_fpadd_parts+0x18c>
     25c:	1c 01       	movw	r2, r24
     25e:	aa 24       	eor	r10, r10
     260:	bb 24       	eor	r11, r11
     262:	65 01       	movw	r12, r10
     264:	03 c0       	rjmp	.+6      	; 0x26c <_fpadd_parts+0x192>
     266:	ee 24       	eor	r14, r14
     268:	ff 24       	eor	r15, r15
     26a:	87 01       	movw	r16, r14
     26c:	11 96       	adiw	r26, 0x01	; 1
     26e:	9c 91       	ld	r25, X
     270:	d2 01       	movw	r26, r4
     272:	11 96       	adiw	r26, 0x01	; 1
     274:	8c 91       	ld	r24, X
     276:	98 17       	cp	r25, r24
     278:	09 f4       	brne	.+2      	; 0x27c <_fpadd_parts+0x1a2>
     27a:	45 c0       	rjmp	.+138    	; 0x306 <_fpadd_parts+0x22c>
     27c:	99 23       	and	r25, r25
     27e:	39 f0       	breq	.+14     	; 0x28e <_fpadd_parts+0x1b4>
     280:	a8 01       	movw	r20, r16
     282:	97 01       	movw	r18, r14
     284:	2a 19       	sub	r18, r10
     286:	3b 09       	sbc	r19, r11
     288:	4c 09       	sbc	r20, r12
     28a:	5d 09       	sbc	r21, r13
     28c:	06 c0       	rjmp	.+12     	; 0x29a <_fpadd_parts+0x1c0>
     28e:	a6 01       	movw	r20, r12
     290:	95 01       	movw	r18, r10
     292:	2e 19       	sub	r18, r14
     294:	3f 09       	sbc	r19, r15
     296:	40 0b       	sbc	r20, r16
     298:	51 0b       	sbc	r21, r17
     29a:	57 fd       	sbrc	r21, 7
     29c:	08 c0       	rjmp	.+16     	; 0x2ae <_fpadd_parts+0x1d4>
     29e:	11 82       	std	Z+1, r1	; 0x01
     2a0:	33 82       	std	Z+3, r3	; 0x03
     2a2:	22 82       	std	Z+2, r2	; 0x02
     2a4:	24 83       	std	Z+4, r18	; 0x04
     2a6:	35 83       	std	Z+5, r19	; 0x05
     2a8:	46 83       	std	Z+6, r20	; 0x06
     2aa:	57 83       	std	Z+7, r21	; 0x07
     2ac:	1d c0       	rjmp	.+58     	; 0x2e8 <_fpadd_parts+0x20e>
     2ae:	81 e0       	ldi	r24, 0x01	; 1
     2b0:	81 83       	std	Z+1, r24	; 0x01
     2b2:	33 82       	std	Z+3, r3	; 0x03
     2b4:	22 82       	std	Z+2, r2	; 0x02
     2b6:	88 27       	eor	r24, r24
     2b8:	99 27       	eor	r25, r25
     2ba:	dc 01       	movw	r26, r24
     2bc:	82 1b       	sub	r24, r18
     2be:	93 0b       	sbc	r25, r19
     2c0:	a4 0b       	sbc	r26, r20
     2c2:	b5 0b       	sbc	r27, r21
     2c4:	84 83       	std	Z+4, r24	; 0x04
     2c6:	95 83       	std	Z+5, r25	; 0x05
     2c8:	a6 83       	std	Z+6, r26	; 0x06
     2ca:	b7 83       	std	Z+7, r27	; 0x07
     2cc:	0d c0       	rjmp	.+26     	; 0x2e8 <_fpadd_parts+0x20e>
     2ce:	22 0f       	add	r18, r18
     2d0:	33 1f       	adc	r19, r19
     2d2:	44 1f       	adc	r20, r20
     2d4:	55 1f       	adc	r21, r21
     2d6:	24 83       	std	Z+4, r18	; 0x04
     2d8:	35 83       	std	Z+5, r19	; 0x05
     2da:	46 83       	std	Z+6, r20	; 0x06
     2dc:	57 83       	std	Z+7, r21	; 0x07
     2de:	82 81       	ldd	r24, Z+2	; 0x02
     2e0:	93 81       	ldd	r25, Z+3	; 0x03
     2e2:	01 97       	sbiw	r24, 0x01	; 1
     2e4:	93 83       	std	Z+3, r25	; 0x03
     2e6:	82 83       	std	Z+2, r24	; 0x02
     2e8:	24 81       	ldd	r18, Z+4	; 0x04
     2ea:	35 81       	ldd	r19, Z+5	; 0x05
     2ec:	46 81       	ldd	r20, Z+6	; 0x06
     2ee:	57 81       	ldd	r21, Z+7	; 0x07
     2f0:	da 01       	movw	r26, r20
     2f2:	c9 01       	movw	r24, r18
     2f4:	01 97       	sbiw	r24, 0x01	; 1
     2f6:	a1 09       	sbc	r26, r1
     2f8:	b1 09       	sbc	r27, r1
     2fa:	8f 5f       	subi	r24, 0xFF	; 255
     2fc:	9f 4f       	sbci	r25, 0xFF	; 255
     2fe:	af 4f       	sbci	r26, 0xFF	; 255
     300:	bf 43       	sbci	r27, 0x3F	; 63
     302:	28 f3       	brcs	.-54     	; 0x2ce <_fpadd_parts+0x1f4>
     304:	0b c0       	rjmp	.+22     	; 0x31c <_fpadd_parts+0x242>
     306:	91 83       	std	Z+1, r25	; 0x01
     308:	33 82       	std	Z+3, r3	; 0x03
     30a:	22 82       	std	Z+2, r2	; 0x02
     30c:	ea 0c       	add	r14, r10
     30e:	fb 1c       	adc	r15, r11
     310:	0c 1d       	adc	r16, r12
     312:	1d 1d       	adc	r17, r13
     314:	e4 82       	std	Z+4, r14	; 0x04
     316:	f5 82       	std	Z+5, r15	; 0x05
     318:	06 83       	std	Z+6, r16	; 0x06
     31a:	17 83       	std	Z+7, r17	; 0x07
     31c:	83 e0       	ldi	r24, 0x03	; 3
     31e:	80 83       	st	Z, r24
     320:	24 81       	ldd	r18, Z+4	; 0x04
     322:	35 81       	ldd	r19, Z+5	; 0x05
     324:	46 81       	ldd	r20, Z+6	; 0x06
     326:	57 81       	ldd	r21, Z+7	; 0x07
     328:	57 ff       	sbrs	r21, 7
     32a:	1a c0       	rjmp	.+52     	; 0x360 <_fpadd_parts+0x286>
     32c:	c9 01       	movw	r24, r18
     32e:	aa 27       	eor	r26, r26
     330:	97 fd       	sbrc	r25, 7
     332:	a0 95       	com	r26
     334:	ba 2f       	mov	r27, r26
     336:	81 70       	andi	r24, 0x01	; 1
     338:	90 70       	andi	r25, 0x00	; 0
     33a:	a0 70       	andi	r26, 0x00	; 0
     33c:	b0 70       	andi	r27, 0x00	; 0
     33e:	56 95       	lsr	r21
     340:	47 95       	ror	r20
     342:	37 95       	ror	r19
     344:	27 95       	ror	r18
     346:	82 2b       	or	r24, r18
     348:	93 2b       	or	r25, r19
     34a:	a4 2b       	or	r26, r20
     34c:	b5 2b       	or	r27, r21
     34e:	84 83       	std	Z+4, r24	; 0x04
     350:	95 83       	std	Z+5, r25	; 0x05
     352:	a6 83       	std	Z+6, r26	; 0x06
     354:	b7 83       	std	Z+7, r27	; 0x07
     356:	82 81       	ldd	r24, Z+2	; 0x02
     358:	93 81       	ldd	r25, Z+3	; 0x03
     35a:	01 96       	adiw	r24, 0x01	; 1
     35c:	93 83       	std	Z+3, r25	; 0x03
     35e:	82 83       	std	Z+2, r24	; 0x02
     360:	df 01       	movw	r26, r30
     362:	01 c0       	rjmp	.+2      	; 0x366 <_fpadd_parts+0x28c>
     364:	d2 01       	movw	r26, r4
     366:	cd 01       	movw	r24, r26
     368:	cd b7       	in	r28, 0x3d	; 61
     36a:	de b7       	in	r29, 0x3e	; 62
     36c:	e2 e1       	ldi	r30, 0x12	; 18
     36e:	0c 94 cd 1d 	jmp	0x3b9a	; 0x3b9a <__epilogue_restores__>

00000372 <__subsf3>:
     372:	a0 e2       	ldi	r26, 0x20	; 32
     374:	b0 e0       	ldi	r27, 0x00	; 0
     376:	ef eb       	ldi	r30, 0xBF	; 191
     378:	f1 e0       	ldi	r31, 0x01	; 1
     37a:	0c 94 bd 1d 	jmp	0x3b7a	; 0x3b7a <__prologue_saves__+0x18>
     37e:	69 83       	std	Y+1, r22	; 0x01
     380:	7a 83       	std	Y+2, r23	; 0x02
     382:	8b 83       	std	Y+3, r24	; 0x03
     384:	9c 83       	std	Y+4, r25	; 0x04
     386:	2d 83       	std	Y+5, r18	; 0x05
     388:	3e 83       	std	Y+6, r19	; 0x06
     38a:	4f 83       	std	Y+7, r20	; 0x07
     38c:	58 87       	std	Y+8, r21	; 0x08
     38e:	e9 e0       	ldi	r30, 0x09	; 9
     390:	ee 2e       	mov	r14, r30
     392:	f1 2c       	mov	r15, r1
     394:	ec 0e       	add	r14, r28
     396:	fd 1e       	adc	r15, r29
     398:	ce 01       	movw	r24, r28
     39a:	01 96       	adiw	r24, 0x01	; 1
     39c:	b7 01       	movw	r22, r14
     39e:	0e 94 9c 06 	call	0xd38	; 0xd38 <__unpack_f>
     3a2:	8e 01       	movw	r16, r28
     3a4:	0f 5e       	subi	r16, 0xEF	; 239
     3a6:	1f 4f       	sbci	r17, 0xFF	; 255
     3a8:	ce 01       	movw	r24, r28
     3aa:	05 96       	adiw	r24, 0x05	; 5
     3ac:	b8 01       	movw	r22, r16
     3ae:	0e 94 9c 06 	call	0xd38	; 0xd38 <__unpack_f>
     3b2:	8a 89       	ldd	r24, Y+18	; 0x12
     3b4:	91 e0       	ldi	r25, 0x01	; 1
     3b6:	89 27       	eor	r24, r25
     3b8:	8a 8b       	std	Y+18, r24	; 0x12
     3ba:	c7 01       	movw	r24, r14
     3bc:	b8 01       	movw	r22, r16
     3be:	ae 01       	movw	r20, r28
     3c0:	47 5e       	subi	r20, 0xE7	; 231
     3c2:	5f 4f       	sbci	r21, 0xFF	; 255
     3c4:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     3c8:	0e 94 c7 05 	call	0xb8e	; 0xb8e <__pack_f>
     3cc:	a0 96       	adiw	r28, 0x20	; 32
     3ce:	e6 e0       	ldi	r30, 0x06	; 6
     3d0:	0c 94 d9 1d 	jmp	0x3bb2	; 0x3bb2 <__epilogue_restores__+0x18>

000003d4 <__addsf3>:
     3d4:	a0 e2       	ldi	r26, 0x20	; 32
     3d6:	b0 e0       	ldi	r27, 0x00	; 0
     3d8:	e0 ef       	ldi	r30, 0xF0	; 240
     3da:	f1 e0       	ldi	r31, 0x01	; 1
     3dc:	0c 94 bd 1d 	jmp	0x3b7a	; 0x3b7a <__prologue_saves__+0x18>
     3e0:	69 83       	std	Y+1, r22	; 0x01
     3e2:	7a 83       	std	Y+2, r23	; 0x02
     3e4:	8b 83       	std	Y+3, r24	; 0x03
     3e6:	9c 83       	std	Y+4, r25	; 0x04
     3e8:	2d 83       	std	Y+5, r18	; 0x05
     3ea:	3e 83       	std	Y+6, r19	; 0x06
     3ec:	4f 83       	std	Y+7, r20	; 0x07
     3ee:	58 87       	std	Y+8, r21	; 0x08
     3f0:	f9 e0       	ldi	r31, 0x09	; 9
     3f2:	ef 2e       	mov	r14, r31
     3f4:	f1 2c       	mov	r15, r1
     3f6:	ec 0e       	add	r14, r28
     3f8:	fd 1e       	adc	r15, r29
     3fa:	ce 01       	movw	r24, r28
     3fc:	01 96       	adiw	r24, 0x01	; 1
     3fe:	b7 01       	movw	r22, r14
     400:	0e 94 9c 06 	call	0xd38	; 0xd38 <__unpack_f>
     404:	8e 01       	movw	r16, r28
     406:	0f 5e       	subi	r16, 0xEF	; 239
     408:	1f 4f       	sbci	r17, 0xFF	; 255
     40a:	ce 01       	movw	r24, r28
     40c:	05 96       	adiw	r24, 0x05	; 5
     40e:	b8 01       	movw	r22, r16
     410:	0e 94 9c 06 	call	0xd38	; 0xd38 <__unpack_f>
     414:	c7 01       	movw	r24, r14
     416:	b8 01       	movw	r22, r16
     418:	ae 01       	movw	r20, r28
     41a:	47 5e       	subi	r20, 0xE7	; 231
     41c:	5f 4f       	sbci	r21, 0xFF	; 255
     41e:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     422:	0e 94 c7 05 	call	0xb8e	; 0xb8e <__pack_f>
     426:	a0 96       	adiw	r28, 0x20	; 32
     428:	e6 e0       	ldi	r30, 0x06	; 6
     42a:	0c 94 d9 1d 	jmp	0x3bb2	; 0x3bb2 <__epilogue_restores__+0x18>

0000042e <__mulsf3>:
     42e:	a0 e2       	ldi	r26, 0x20	; 32
     430:	b0 e0       	ldi	r27, 0x00	; 0
     432:	ed e1       	ldi	r30, 0x1D	; 29
     434:	f2 e0       	ldi	r31, 0x02	; 2
     436:	0c 94 b1 1d 	jmp	0x3b62	; 0x3b62 <__prologue_saves__>
     43a:	69 83       	std	Y+1, r22	; 0x01
     43c:	7a 83       	std	Y+2, r23	; 0x02
     43e:	8b 83       	std	Y+3, r24	; 0x03
     440:	9c 83       	std	Y+4, r25	; 0x04
     442:	2d 83       	std	Y+5, r18	; 0x05
     444:	3e 83       	std	Y+6, r19	; 0x06
     446:	4f 83       	std	Y+7, r20	; 0x07
     448:	58 87       	std	Y+8, r21	; 0x08
     44a:	ce 01       	movw	r24, r28
     44c:	01 96       	adiw	r24, 0x01	; 1
     44e:	be 01       	movw	r22, r28
     450:	67 5f       	subi	r22, 0xF7	; 247
     452:	7f 4f       	sbci	r23, 0xFF	; 255
     454:	0e 94 9c 06 	call	0xd38	; 0xd38 <__unpack_f>
     458:	ce 01       	movw	r24, r28
     45a:	05 96       	adiw	r24, 0x05	; 5
     45c:	be 01       	movw	r22, r28
     45e:	6f 5e       	subi	r22, 0xEF	; 239
     460:	7f 4f       	sbci	r23, 0xFF	; 255
     462:	0e 94 9c 06 	call	0xd38	; 0xd38 <__unpack_f>
     466:	99 85       	ldd	r25, Y+9	; 0x09
     468:	92 30       	cpi	r25, 0x02	; 2
     46a:	88 f0       	brcs	.+34     	; 0x48e <__mulsf3+0x60>
     46c:	89 89       	ldd	r24, Y+17	; 0x11
     46e:	82 30       	cpi	r24, 0x02	; 2
     470:	c8 f0       	brcs	.+50     	; 0x4a4 <__mulsf3+0x76>
     472:	94 30       	cpi	r25, 0x04	; 4
     474:	19 f4       	brne	.+6      	; 0x47c <__mulsf3+0x4e>
     476:	82 30       	cpi	r24, 0x02	; 2
     478:	51 f4       	brne	.+20     	; 0x48e <__mulsf3+0x60>
     47a:	04 c0       	rjmp	.+8      	; 0x484 <__mulsf3+0x56>
     47c:	84 30       	cpi	r24, 0x04	; 4
     47e:	29 f4       	brne	.+10     	; 0x48a <__mulsf3+0x5c>
     480:	92 30       	cpi	r25, 0x02	; 2
     482:	81 f4       	brne	.+32     	; 0x4a4 <__mulsf3+0x76>
     484:	80 e6       	ldi	r24, 0x60	; 96
     486:	90 e0       	ldi	r25, 0x00	; 0
     488:	c6 c0       	rjmp	.+396    	; 0x616 <__mulsf3+0x1e8>
     48a:	92 30       	cpi	r25, 0x02	; 2
     48c:	49 f4       	brne	.+18     	; 0x4a0 <__mulsf3+0x72>
     48e:	20 e0       	ldi	r18, 0x00	; 0
     490:	9a 85       	ldd	r25, Y+10	; 0x0a
     492:	8a 89       	ldd	r24, Y+18	; 0x12
     494:	98 13       	cpse	r25, r24
     496:	21 e0       	ldi	r18, 0x01	; 1
     498:	2a 87       	std	Y+10, r18	; 0x0a
     49a:	ce 01       	movw	r24, r28
     49c:	09 96       	adiw	r24, 0x09	; 9
     49e:	bb c0       	rjmp	.+374    	; 0x616 <__mulsf3+0x1e8>
     4a0:	82 30       	cpi	r24, 0x02	; 2
     4a2:	49 f4       	brne	.+18     	; 0x4b6 <__mulsf3+0x88>
     4a4:	20 e0       	ldi	r18, 0x00	; 0
     4a6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a8:	8a 89       	ldd	r24, Y+18	; 0x12
     4aa:	98 13       	cpse	r25, r24
     4ac:	21 e0       	ldi	r18, 0x01	; 1
     4ae:	2a 8b       	std	Y+18, r18	; 0x12
     4b0:	ce 01       	movw	r24, r28
     4b2:	41 96       	adiw	r24, 0x11	; 17
     4b4:	b0 c0       	rjmp	.+352    	; 0x616 <__mulsf3+0x1e8>
     4b6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4b8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ba:	4f 84       	ldd	r4, Y+15	; 0x0f
     4bc:	58 88       	ldd	r5, Y+16	; 0x10
     4be:	6d 88       	ldd	r6, Y+21	; 0x15
     4c0:	7e 88       	ldd	r7, Y+22	; 0x16
     4c2:	8f 88       	ldd	r8, Y+23	; 0x17
     4c4:	98 8c       	ldd	r9, Y+24	; 0x18
     4c6:	ee 24       	eor	r14, r14
     4c8:	ff 24       	eor	r15, r15
     4ca:	87 01       	movw	r16, r14
     4cc:	aa 24       	eor	r10, r10
     4ce:	bb 24       	eor	r11, r11
     4d0:	65 01       	movw	r12, r10
     4d2:	40 e0       	ldi	r20, 0x00	; 0
     4d4:	50 e0       	ldi	r21, 0x00	; 0
     4d6:	60 e0       	ldi	r22, 0x00	; 0
     4d8:	70 e0       	ldi	r23, 0x00	; 0
     4da:	e0 e0       	ldi	r30, 0x00	; 0
     4dc:	f0 e0       	ldi	r31, 0x00	; 0
     4de:	c1 01       	movw	r24, r2
     4e0:	81 70       	andi	r24, 0x01	; 1
     4e2:	90 70       	andi	r25, 0x00	; 0
     4e4:	89 2b       	or	r24, r25
     4e6:	e9 f0       	breq	.+58     	; 0x522 <__mulsf3+0xf4>
     4e8:	e6 0c       	add	r14, r6
     4ea:	f7 1c       	adc	r15, r7
     4ec:	08 1d       	adc	r16, r8
     4ee:	19 1d       	adc	r17, r9
     4f0:	9a 01       	movw	r18, r20
     4f2:	ab 01       	movw	r20, r22
     4f4:	2a 0d       	add	r18, r10
     4f6:	3b 1d       	adc	r19, r11
     4f8:	4c 1d       	adc	r20, r12
     4fa:	5d 1d       	adc	r21, r13
     4fc:	80 e0       	ldi	r24, 0x00	; 0
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	a0 e0       	ldi	r26, 0x00	; 0
     502:	b0 e0       	ldi	r27, 0x00	; 0
     504:	e6 14       	cp	r14, r6
     506:	f7 04       	cpc	r15, r7
     508:	08 05       	cpc	r16, r8
     50a:	19 05       	cpc	r17, r9
     50c:	20 f4       	brcc	.+8      	; 0x516 <__mulsf3+0xe8>
     50e:	81 e0       	ldi	r24, 0x01	; 1
     510:	90 e0       	ldi	r25, 0x00	; 0
     512:	a0 e0       	ldi	r26, 0x00	; 0
     514:	b0 e0       	ldi	r27, 0x00	; 0
     516:	ba 01       	movw	r22, r20
     518:	a9 01       	movw	r20, r18
     51a:	48 0f       	add	r20, r24
     51c:	59 1f       	adc	r21, r25
     51e:	6a 1f       	adc	r22, r26
     520:	7b 1f       	adc	r23, r27
     522:	aa 0c       	add	r10, r10
     524:	bb 1c       	adc	r11, r11
     526:	cc 1c       	adc	r12, r12
     528:	dd 1c       	adc	r13, r13
     52a:	97 fe       	sbrs	r9, 7
     52c:	08 c0       	rjmp	.+16     	; 0x53e <__mulsf3+0x110>
     52e:	81 e0       	ldi	r24, 0x01	; 1
     530:	90 e0       	ldi	r25, 0x00	; 0
     532:	a0 e0       	ldi	r26, 0x00	; 0
     534:	b0 e0       	ldi	r27, 0x00	; 0
     536:	a8 2a       	or	r10, r24
     538:	b9 2a       	or	r11, r25
     53a:	ca 2a       	or	r12, r26
     53c:	db 2a       	or	r13, r27
     53e:	31 96       	adiw	r30, 0x01	; 1
     540:	e0 32       	cpi	r30, 0x20	; 32
     542:	f1 05       	cpc	r31, r1
     544:	49 f0       	breq	.+18     	; 0x558 <__mulsf3+0x12a>
     546:	66 0c       	add	r6, r6
     548:	77 1c       	adc	r7, r7
     54a:	88 1c       	adc	r8, r8
     54c:	99 1c       	adc	r9, r9
     54e:	56 94       	lsr	r5
     550:	47 94       	ror	r4
     552:	37 94       	ror	r3
     554:	27 94       	ror	r2
     556:	c3 cf       	rjmp	.-122    	; 0x4de <__mulsf3+0xb0>
     558:	fa 85       	ldd	r31, Y+10	; 0x0a
     55a:	ea 89       	ldd	r30, Y+18	; 0x12
     55c:	2b 89       	ldd	r18, Y+19	; 0x13
     55e:	3c 89       	ldd	r19, Y+20	; 0x14
     560:	8b 85       	ldd	r24, Y+11	; 0x0b
     562:	9c 85       	ldd	r25, Y+12	; 0x0c
     564:	28 0f       	add	r18, r24
     566:	39 1f       	adc	r19, r25
     568:	2e 5f       	subi	r18, 0xFE	; 254
     56a:	3f 4f       	sbci	r19, 0xFF	; 255
     56c:	17 c0       	rjmp	.+46     	; 0x59c <__mulsf3+0x16e>
     56e:	ca 01       	movw	r24, r20
     570:	81 70       	andi	r24, 0x01	; 1
     572:	90 70       	andi	r25, 0x00	; 0
     574:	89 2b       	or	r24, r25
     576:	61 f0       	breq	.+24     	; 0x590 <__mulsf3+0x162>
     578:	16 95       	lsr	r17
     57a:	07 95       	ror	r16
     57c:	f7 94       	ror	r15
     57e:	e7 94       	ror	r14
     580:	80 e0       	ldi	r24, 0x00	; 0
     582:	90 e0       	ldi	r25, 0x00	; 0
     584:	a0 e0       	ldi	r26, 0x00	; 0
     586:	b0 e8       	ldi	r27, 0x80	; 128
     588:	e8 2a       	or	r14, r24
     58a:	f9 2a       	or	r15, r25
     58c:	0a 2b       	or	r16, r26
     58e:	1b 2b       	or	r17, r27
     590:	76 95       	lsr	r23
     592:	67 95       	ror	r22
     594:	57 95       	ror	r21
     596:	47 95       	ror	r20
     598:	2f 5f       	subi	r18, 0xFF	; 255
     59a:	3f 4f       	sbci	r19, 0xFF	; 255
     59c:	77 fd       	sbrc	r23, 7
     59e:	e7 cf       	rjmp	.-50     	; 0x56e <__mulsf3+0x140>
     5a0:	0c c0       	rjmp	.+24     	; 0x5ba <__mulsf3+0x18c>
     5a2:	44 0f       	add	r20, r20
     5a4:	55 1f       	adc	r21, r21
     5a6:	66 1f       	adc	r22, r22
     5a8:	77 1f       	adc	r23, r23
     5aa:	17 fd       	sbrc	r17, 7
     5ac:	41 60       	ori	r20, 0x01	; 1
     5ae:	ee 0c       	add	r14, r14
     5b0:	ff 1c       	adc	r15, r15
     5b2:	00 1f       	adc	r16, r16
     5b4:	11 1f       	adc	r17, r17
     5b6:	21 50       	subi	r18, 0x01	; 1
     5b8:	30 40       	sbci	r19, 0x00	; 0
     5ba:	40 30       	cpi	r20, 0x00	; 0
     5bc:	90 e0       	ldi	r25, 0x00	; 0
     5be:	59 07       	cpc	r21, r25
     5c0:	90 e0       	ldi	r25, 0x00	; 0
     5c2:	69 07       	cpc	r22, r25
     5c4:	90 e4       	ldi	r25, 0x40	; 64
     5c6:	79 07       	cpc	r23, r25
     5c8:	60 f3       	brcs	.-40     	; 0x5a2 <__mulsf3+0x174>
     5ca:	2b 8f       	std	Y+27, r18	; 0x1b
     5cc:	3c 8f       	std	Y+28, r19	; 0x1c
     5ce:	db 01       	movw	r26, r22
     5d0:	ca 01       	movw	r24, r20
     5d2:	8f 77       	andi	r24, 0x7F	; 127
     5d4:	90 70       	andi	r25, 0x00	; 0
     5d6:	a0 70       	andi	r26, 0x00	; 0
     5d8:	b0 70       	andi	r27, 0x00	; 0
     5da:	80 34       	cpi	r24, 0x40	; 64
     5dc:	91 05       	cpc	r25, r1
     5de:	a1 05       	cpc	r26, r1
     5e0:	b1 05       	cpc	r27, r1
     5e2:	61 f4       	brne	.+24     	; 0x5fc <__mulsf3+0x1ce>
     5e4:	47 fd       	sbrc	r20, 7
     5e6:	0a c0       	rjmp	.+20     	; 0x5fc <__mulsf3+0x1ce>
     5e8:	e1 14       	cp	r14, r1
     5ea:	f1 04       	cpc	r15, r1
     5ec:	01 05       	cpc	r16, r1
     5ee:	11 05       	cpc	r17, r1
     5f0:	29 f0       	breq	.+10     	; 0x5fc <__mulsf3+0x1ce>
     5f2:	40 5c       	subi	r20, 0xC0	; 192
     5f4:	5f 4f       	sbci	r21, 0xFF	; 255
     5f6:	6f 4f       	sbci	r22, 0xFF	; 255
     5f8:	7f 4f       	sbci	r23, 0xFF	; 255
     5fa:	40 78       	andi	r20, 0x80	; 128
     5fc:	1a 8e       	std	Y+26, r1	; 0x1a
     5fe:	fe 17       	cp	r31, r30
     600:	11 f0       	breq	.+4      	; 0x606 <__mulsf3+0x1d8>
     602:	81 e0       	ldi	r24, 0x01	; 1
     604:	8a 8f       	std	Y+26, r24	; 0x1a
     606:	4d 8f       	std	Y+29, r20	; 0x1d
     608:	5e 8f       	std	Y+30, r21	; 0x1e
     60a:	6f 8f       	std	Y+31, r22	; 0x1f
     60c:	78 a3       	std	Y+32, r23	; 0x20
     60e:	83 e0       	ldi	r24, 0x03	; 3
     610:	89 8f       	std	Y+25, r24	; 0x19
     612:	ce 01       	movw	r24, r28
     614:	49 96       	adiw	r24, 0x19	; 25
     616:	0e 94 c7 05 	call	0xb8e	; 0xb8e <__pack_f>
     61a:	a0 96       	adiw	r28, 0x20	; 32
     61c:	e2 e1       	ldi	r30, 0x12	; 18
     61e:	0c 94 cd 1d 	jmp	0x3b9a	; 0x3b9a <__epilogue_restores__>

00000622 <__divsf3>:
     622:	a8 e1       	ldi	r26, 0x18	; 24
     624:	b0 e0       	ldi	r27, 0x00	; 0
     626:	e7 e1       	ldi	r30, 0x17	; 23
     628:	f3 e0       	ldi	r31, 0x03	; 3
     62a:	0c 94 b9 1d 	jmp	0x3b72	; 0x3b72 <__prologue_saves__+0x10>
     62e:	69 83       	std	Y+1, r22	; 0x01
     630:	7a 83       	std	Y+2, r23	; 0x02
     632:	8b 83       	std	Y+3, r24	; 0x03
     634:	9c 83       	std	Y+4, r25	; 0x04
     636:	2d 83       	std	Y+5, r18	; 0x05
     638:	3e 83       	std	Y+6, r19	; 0x06
     63a:	4f 83       	std	Y+7, r20	; 0x07
     63c:	58 87       	std	Y+8, r21	; 0x08
     63e:	b9 e0       	ldi	r27, 0x09	; 9
     640:	eb 2e       	mov	r14, r27
     642:	f1 2c       	mov	r15, r1
     644:	ec 0e       	add	r14, r28
     646:	fd 1e       	adc	r15, r29
     648:	ce 01       	movw	r24, r28
     64a:	01 96       	adiw	r24, 0x01	; 1
     64c:	b7 01       	movw	r22, r14
     64e:	0e 94 9c 06 	call	0xd38	; 0xd38 <__unpack_f>
     652:	8e 01       	movw	r16, r28
     654:	0f 5e       	subi	r16, 0xEF	; 239
     656:	1f 4f       	sbci	r17, 0xFF	; 255
     658:	ce 01       	movw	r24, r28
     65a:	05 96       	adiw	r24, 0x05	; 5
     65c:	b8 01       	movw	r22, r16
     65e:	0e 94 9c 06 	call	0xd38	; 0xd38 <__unpack_f>
     662:	29 85       	ldd	r18, Y+9	; 0x09
     664:	22 30       	cpi	r18, 0x02	; 2
     666:	08 f4       	brcc	.+2      	; 0x66a <__divsf3+0x48>
     668:	7e c0       	rjmp	.+252    	; 0x766 <__divsf3+0x144>
     66a:	39 89       	ldd	r19, Y+17	; 0x11
     66c:	32 30       	cpi	r19, 0x02	; 2
     66e:	10 f4       	brcc	.+4      	; 0x674 <__divsf3+0x52>
     670:	b8 01       	movw	r22, r16
     672:	7c c0       	rjmp	.+248    	; 0x76c <__divsf3+0x14a>
     674:	8a 85       	ldd	r24, Y+10	; 0x0a
     676:	9a 89       	ldd	r25, Y+18	; 0x12
     678:	89 27       	eor	r24, r25
     67a:	8a 87       	std	Y+10, r24	; 0x0a
     67c:	24 30       	cpi	r18, 0x04	; 4
     67e:	11 f0       	breq	.+4      	; 0x684 <__divsf3+0x62>
     680:	22 30       	cpi	r18, 0x02	; 2
     682:	31 f4       	brne	.+12     	; 0x690 <__divsf3+0x6e>
     684:	23 17       	cp	r18, r19
     686:	09 f0       	breq	.+2      	; 0x68a <__divsf3+0x68>
     688:	6e c0       	rjmp	.+220    	; 0x766 <__divsf3+0x144>
     68a:	60 e6       	ldi	r22, 0x60	; 96
     68c:	70 e0       	ldi	r23, 0x00	; 0
     68e:	6e c0       	rjmp	.+220    	; 0x76c <__divsf3+0x14a>
     690:	34 30       	cpi	r19, 0x04	; 4
     692:	39 f4       	brne	.+14     	; 0x6a2 <__divsf3+0x80>
     694:	1d 86       	std	Y+13, r1	; 0x0d
     696:	1e 86       	std	Y+14, r1	; 0x0e
     698:	1f 86       	std	Y+15, r1	; 0x0f
     69a:	18 8a       	std	Y+16, r1	; 0x10
     69c:	1c 86       	std	Y+12, r1	; 0x0c
     69e:	1b 86       	std	Y+11, r1	; 0x0b
     6a0:	04 c0       	rjmp	.+8      	; 0x6aa <__divsf3+0x88>
     6a2:	32 30       	cpi	r19, 0x02	; 2
     6a4:	21 f4       	brne	.+8      	; 0x6ae <__divsf3+0x8c>
     6a6:	84 e0       	ldi	r24, 0x04	; 4
     6a8:	89 87       	std	Y+9, r24	; 0x09
     6aa:	b7 01       	movw	r22, r14
     6ac:	5f c0       	rjmp	.+190    	; 0x76c <__divsf3+0x14a>
     6ae:	2b 85       	ldd	r18, Y+11	; 0x0b
     6b0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6b2:	8b 89       	ldd	r24, Y+19	; 0x13
     6b4:	9c 89       	ldd	r25, Y+20	; 0x14
     6b6:	28 1b       	sub	r18, r24
     6b8:	39 0b       	sbc	r19, r25
     6ba:	3c 87       	std	Y+12, r19	; 0x0c
     6bc:	2b 87       	std	Y+11, r18	; 0x0b
     6be:	ed 84       	ldd	r14, Y+13	; 0x0d
     6c0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6c2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6c4:	18 89       	ldd	r17, Y+16	; 0x10
     6c6:	ad 88       	ldd	r10, Y+21	; 0x15
     6c8:	be 88       	ldd	r11, Y+22	; 0x16
     6ca:	cf 88       	ldd	r12, Y+23	; 0x17
     6cc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6ce:	ea 14       	cp	r14, r10
     6d0:	fb 04       	cpc	r15, r11
     6d2:	0c 05       	cpc	r16, r12
     6d4:	1d 05       	cpc	r17, r13
     6d6:	40 f4       	brcc	.+16     	; 0x6e8 <__divsf3+0xc6>
     6d8:	ee 0c       	add	r14, r14
     6da:	ff 1c       	adc	r15, r15
     6dc:	00 1f       	adc	r16, r16
     6de:	11 1f       	adc	r17, r17
     6e0:	21 50       	subi	r18, 0x01	; 1
     6e2:	30 40       	sbci	r19, 0x00	; 0
     6e4:	3c 87       	std	Y+12, r19	; 0x0c
     6e6:	2b 87       	std	Y+11, r18	; 0x0b
     6e8:	20 e0       	ldi	r18, 0x00	; 0
     6ea:	30 e0       	ldi	r19, 0x00	; 0
     6ec:	40 e0       	ldi	r20, 0x00	; 0
     6ee:	50 e0       	ldi	r21, 0x00	; 0
     6f0:	80 e0       	ldi	r24, 0x00	; 0
     6f2:	90 e0       	ldi	r25, 0x00	; 0
     6f4:	a0 e0       	ldi	r26, 0x00	; 0
     6f6:	b0 e4       	ldi	r27, 0x40	; 64
     6f8:	60 e0       	ldi	r22, 0x00	; 0
     6fa:	70 e0       	ldi	r23, 0x00	; 0
     6fc:	ea 14       	cp	r14, r10
     6fe:	fb 04       	cpc	r15, r11
     700:	0c 05       	cpc	r16, r12
     702:	1d 05       	cpc	r17, r13
     704:	40 f0       	brcs	.+16     	; 0x716 <__divsf3+0xf4>
     706:	28 2b       	or	r18, r24
     708:	39 2b       	or	r19, r25
     70a:	4a 2b       	or	r20, r26
     70c:	5b 2b       	or	r21, r27
     70e:	ea 18       	sub	r14, r10
     710:	fb 08       	sbc	r15, r11
     712:	0c 09       	sbc	r16, r12
     714:	1d 09       	sbc	r17, r13
     716:	b6 95       	lsr	r27
     718:	a7 95       	ror	r26
     71a:	97 95       	ror	r25
     71c:	87 95       	ror	r24
     71e:	ee 0c       	add	r14, r14
     720:	ff 1c       	adc	r15, r15
     722:	00 1f       	adc	r16, r16
     724:	11 1f       	adc	r17, r17
     726:	6f 5f       	subi	r22, 0xFF	; 255
     728:	7f 4f       	sbci	r23, 0xFF	; 255
     72a:	6f 31       	cpi	r22, 0x1F	; 31
     72c:	71 05       	cpc	r23, r1
     72e:	31 f7       	brne	.-52     	; 0x6fc <__divsf3+0xda>
     730:	da 01       	movw	r26, r20
     732:	c9 01       	movw	r24, r18
     734:	8f 77       	andi	r24, 0x7F	; 127
     736:	90 70       	andi	r25, 0x00	; 0
     738:	a0 70       	andi	r26, 0x00	; 0
     73a:	b0 70       	andi	r27, 0x00	; 0
     73c:	80 34       	cpi	r24, 0x40	; 64
     73e:	91 05       	cpc	r25, r1
     740:	a1 05       	cpc	r26, r1
     742:	b1 05       	cpc	r27, r1
     744:	61 f4       	brne	.+24     	; 0x75e <__divsf3+0x13c>
     746:	27 fd       	sbrc	r18, 7
     748:	0a c0       	rjmp	.+20     	; 0x75e <__divsf3+0x13c>
     74a:	e1 14       	cp	r14, r1
     74c:	f1 04       	cpc	r15, r1
     74e:	01 05       	cpc	r16, r1
     750:	11 05       	cpc	r17, r1
     752:	29 f0       	breq	.+10     	; 0x75e <__divsf3+0x13c>
     754:	20 5c       	subi	r18, 0xC0	; 192
     756:	3f 4f       	sbci	r19, 0xFF	; 255
     758:	4f 4f       	sbci	r20, 0xFF	; 255
     75a:	5f 4f       	sbci	r21, 0xFF	; 255
     75c:	20 78       	andi	r18, 0x80	; 128
     75e:	2d 87       	std	Y+13, r18	; 0x0d
     760:	3e 87       	std	Y+14, r19	; 0x0e
     762:	4f 87       	std	Y+15, r20	; 0x0f
     764:	58 8b       	std	Y+16, r21	; 0x10
     766:	be 01       	movw	r22, r28
     768:	67 5f       	subi	r22, 0xF7	; 247
     76a:	7f 4f       	sbci	r23, 0xFF	; 255
     76c:	cb 01       	movw	r24, r22
     76e:	0e 94 c7 05 	call	0xb8e	; 0xb8e <__pack_f>
     772:	68 96       	adiw	r28, 0x18	; 24
     774:	ea e0       	ldi	r30, 0x0A	; 10
     776:	0c 94 d5 1d 	jmp	0x3baa	; 0x3baa <__epilogue_restores__+0x10>

0000077a <__gtsf2>:
     77a:	a8 e1       	ldi	r26, 0x18	; 24
     77c:	b0 e0       	ldi	r27, 0x00	; 0
     77e:	e3 ec       	ldi	r30, 0xC3	; 195
     780:	f3 e0       	ldi	r31, 0x03	; 3
     782:	0c 94 bd 1d 	jmp	0x3b7a	; 0x3b7a <__prologue_saves__+0x18>
     786:	69 83       	std	Y+1, r22	; 0x01
     788:	7a 83       	std	Y+2, r23	; 0x02
     78a:	8b 83       	std	Y+3, r24	; 0x03
     78c:	9c 83       	std	Y+4, r25	; 0x04
     78e:	2d 83       	std	Y+5, r18	; 0x05
     790:	3e 83       	std	Y+6, r19	; 0x06
     792:	4f 83       	std	Y+7, r20	; 0x07
     794:	58 87       	std	Y+8, r21	; 0x08
     796:	89 e0       	ldi	r24, 0x09	; 9
     798:	e8 2e       	mov	r14, r24
     79a:	f1 2c       	mov	r15, r1
     79c:	ec 0e       	add	r14, r28
     79e:	fd 1e       	adc	r15, r29
     7a0:	ce 01       	movw	r24, r28
     7a2:	01 96       	adiw	r24, 0x01	; 1
     7a4:	b7 01       	movw	r22, r14
     7a6:	0e 94 9c 06 	call	0xd38	; 0xd38 <__unpack_f>
     7aa:	8e 01       	movw	r16, r28
     7ac:	0f 5e       	subi	r16, 0xEF	; 239
     7ae:	1f 4f       	sbci	r17, 0xFF	; 255
     7b0:	ce 01       	movw	r24, r28
     7b2:	05 96       	adiw	r24, 0x05	; 5
     7b4:	b8 01       	movw	r22, r16
     7b6:	0e 94 9c 06 	call	0xd38	; 0xd38 <__unpack_f>
     7ba:	89 85       	ldd	r24, Y+9	; 0x09
     7bc:	82 30       	cpi	r24, 0x02	; 2
     7be:	40 f0       	brcs	.+16     	; 0x7d0 <__gtsf2+0x56>
     7c0:	89 89       	ldd	r24, Y+17	; 0x11
     7c2:	82 30       	cpi	r24, 0x02	; 2
     7c4:	28 f0       	brcs	.+10     	; 0x7d0 <__gtsf2+0x56>
     7c6:	c7 01       	movw	r24, r14
     7c8:	b8 01       	movw	r22, r16
     7ca:	0e 94 14 07 	call	0xe28	; 0xe28 <__fpcmp_parts_f>
     7ce:	01 c0       	rjmp	.+2      	; 0x7d2 <__gtsf2+0x58>
     7d0:	8f ef       	ldi	r24, 0xFF	; 255
     7d2:	68 96       	adiw	r28, 0x18	; 24
     7d4:	e6 e0       	ldi	r30, 0x06	; 6
     7d6:	0c 94 d9 1d 	jmp	0x3bb2	; 0x3bb2 <__epilogue_restores__+0x18>

000007da <__gesf2>:
     7da:	a8 e1       	ldi	r26, 0x18	; 24
     7dc:	b0 e0       	ldi	r27, 0x00	; 0
     7de:	e3 ef       	ldi	r30, 0xF3	; 243
     7e0:	f3 e0       	ldi	r31, 0x03	; 3
     7e2:	0c 94 bd 1d 	jmp	0x3b7a	; 0x3b7a <__prologue_saves__+0x18>
     7e6:	69 83       	std	Y+1, r22	; 0x01
     7e8:	7a 83       	std	Y+2, r23	; 0x02
     7ea:	8b 83       	std	Y+3, r24	; 0x03
     7ec:	9c 83       	std	Y+4, r25	; 0x04
     7ee:	2d 83       	std	Y+5, r18	; 0x05
     7f0:	3e 83       	std	Y+6, r19	; 0x06
     7f2:	4f 83       	std	Y+7, r20	; 0x07
     7f4:	58 87       	std	Y+8, r21	; 0x08
     7f6:	89 e0       	ldi	r24, 0x09	; 9
     7f8:	e8 2e       	mov	r14, r24
     7fa:	f1 2c       	mov	r15, r1
     7fc:	ec 0e       	add	r14, r28
     7fe:	fd 1e       	adc	r15, r29
     800:	ce 01       	movw	r24, r28
     802:	01 96       	adiw	r24, 0x01	; 1
     804:	b7 01       	movw	r22, r14
     806:	0e 94 9c 06 	call	0xd38	; 0xd38 <__unpack_f>
     80a:	8e 01       	movw	r16, r28
     80c:	0f 5e       	subi	r16, 0xEF	; 239
     80e:	1f 4f       	sbci	r17, 0xFF	; 255
     810:	ce 01       	movw	r24, r28
     812:	05 96       	adiw	r24, 0x05	; 5
     814:	b8 01       	movw	r22, r16
     816:	0e 94 9c 06 	call	0xd38	; 0xd38 <__unpack_f>
     81a:	89 85       	ldd	r24, Y+9	; 0x09
     81c:	82 30       	cpi	r24, 0x02	; 2
     81e:	40 f0       	brcs	.+16     	; 0x830 <__gesf2+0x56>
     820:	89 89       	ldd	r24, Y+17	; 0x11
     822:	82 30       	cpi	r24, 0x02	; 2
     824:	28 f0       	brcs	.+10     	; 0x830 <__gesf2+0x56>
     826:	c7 01       	movw	r24, r14
     828:	b8 01       	movw	r22, r16
     82a:	0e 94 14 07 	call	0xe28	; 0xe28 <__fpcmp_parts_f>
     82e:	01 c0       	rjmp	.+2      	; 0x832 <__gesf2+0x58>
     830:	8f ef       	ldi	r24, 0xFF	; 255
     832:	68 96       	adiw	r28, 0x18	; 24
     834:	e6 e0       	ldi	r30, 0x06	; 6
     836:	0c 94 d9 1d 	jmp	0x3bb2	; 0x3bb2 <__epilogue_restores__+0x18>

0000083a <__ltsf2>:
     83a:	a8 e1       	ldi	r26, 0x18	; 24
     83c:	b0 e0       	ldi	r27, 0x00	; 0
     83e:	e3 e2       	ldi	r30, 0x23	; 35
     840:	f4 e0       	ldi	r31, 0x04	; 4
     842:	0c 94 bd 1d 	jmp	0x3b7a	; 0x3b7a <__prologue_saves__+0x18>
     846:	69 83       	std	Y+1, r22	; 0x01
     848:	7a 83       	std	Y+2, r23	; 0x02
     84a:	8b 83       	std	Y+3, r24	; 0x03
     84c:	9c 83       	std	Y+4, r25	; 0x04
     84e:	2d 83       	std	Y+5, r18	; 0x05
     850:	3e 83       	std	Y+6, r19	; 0x06
     852:	4f 83       	std	Y+7, r20	; 0x07
     854:	58 87       	std	Y+8, r21	; 0x08
     856:	89 e0       	ldi	r24, 0x09	; 9
     858:	e8 2e       	mov	r14, r24
     85a:	f1 2c       	mov	r15, r1
     85c:	ec 0e       	add	r14, r28
     85e:	fd 1e       	adc	r15, r29
     860:	ce 01       	movw	r24, r28
     862:	01 96       	adiw	r24, 0x01	; 1
     864:	b7 01       	movw	r22, r14
     866:	0e 94 9c 06 	call	0xd38	; 0xd38 <__unpack_f>
     86a:	8e 01       	movw	r16, r28
     86c:	0f 5e       	subi	r16, 0xEF	; 239
     86e:	1f 4f       	sbci	r17, 0xFF	; 255
     870:	ce 01       	movw	r24, r28
     872:	05 96       	adiw	r24, 0x05	; 5
     874:	b8 01       	movw	r22, r16
     876:	0e 94 9c 06 	call	0xd38	; 0xd38 <__unpack_f>
     87a:	89 85       	ldd	r24, Y+9	; 0x09
     87c:	82 30       	cpi	r24, 0x02	; 2
     87e:	40 f0       	brcs	.+16     	; 0x890 <__stack+0x31>
     880:	89 89       	ldd	r24, Y+17	; 0x11
     882:	82 30       	cpi	r24, 0x02	; 2
     884:	28 f0       	brcs	.+10     	; 0x890 <__stack+0x31>
     886:	c7 01       	movw	r24, r14
     888:	b8 01       	movw	r22, r16
     88a:	0e 94 14 07 	call	0xe28	; 0xe28 <__fpcmp_parts_f>
     88e:	01 c0       	rjmp	.+2      	; 0x892 <__stack+0x33>
     890:	81 e0       	ldi	r24, 0x01	; 1
     892:	68 96       	adiw	r28, 0x18	; 24
     894:	e6 e0       	ldi	r30, 0x06	; 6
     896:	0c 94 d9 1d 	jmp	0x3bb2	; 0x3bb2 <__epilogue_restores__+0x18>

0000089a <__floatsisf>:
     89a:	a8 e0       	ldi	r26, 0x08	; 8
     89c:	b0 e0       	ldi	r27, 0x00	; 0
     89e:	e3 e5       	ldi	r30, 0x53	; 83
     8a0:	f4 e0       	ldi	r31, 0x04	; 4
     8a2:	0c 94 ba 1d 	jmp	0x3b74	; 0x3b74 <__prologue_saves__+0x12>
     8a6:	9b 01       	movw	r18, r22
     8a8:	ac 01       	movw	r20, r24
     8aa:	83 e0       	ldi	r24, 0x03	; 3
     8ac:	89 83       	std	Y+1, r24	; 0x01
     8ae:	da 01       	movw	r26, r20
     8b0:	c9 01       	movw	r24, r18
     8b2:	88 27       	eor	r24, r24
     8b4:	b7 fd       	sbrc	r27, 7
     8b6:	83 95       	inc	r24
     8b8:	99 27       	eor	r25, r25
     8ba:	aa 27       	eor	r26, r26
     8bc:	bb 27       	eor	r27, r27
     8be:	b8 2e       	mov	r11, r24
     8c0:	21 15       	cp	r18, r1
     8c2:	31 05       	cpc	r19, r1
     8c4:	41 05       	cpc	r20, r1
     8c6:	51 05       	cpc	r21, r1
     8c8:	19 f4       	brne	.+6      	; 0x8d0 <__floatsisf+0x36>
     8ca:	82 e0       	ldi	r24, 0x02	; 2
     8cc:	89 83       	std	Y+1, r24	; 0x01
     8ce:	3a c0       	rjmp	.+116    	; 0x944 <__floatsisf+0xaa>
     8d0:	88 23       	and	r24, r24
     8d2:	a9 f0       	breq	.+42     	; 0x8fe <__floatsisf+0x64>
     8d4:	20 30       	cpi	r18, 0x00	; 0
     8d6:	80 e0       	ldi	r24, 0x00	; 0
     8d8:	38 07       	cpc	r19, r24
     8da:	80 e0       	ldi	r24, 0x00	; 0
     8dc:	48 07       	cpc	r20, r24
     8de:	80 e8       	ldi	r24, 0x80	; 128
     8e0:	58 07       	cpc	r21, r24
     8e2:	29 f4       	brne	.+10     	; 0x8ee <__floatsisf+0x54>
     8e4:	60 e0       	ldi	r22, 0x00	; 0
     8e6:	70 e0       	ldi	r23, 0x00	; 0
     8e8:	80 e0       	ldi	r24, 0x00	; 0
     8ea:	9f ec       	ldi	r25, 0xCF	; 207
     8ec:	30 c0       	rjmp	.+96     	; 0x94e <__floatsisf+0xb4>
     8ee:	ee 24       	eor	r14, r14
     8f0:	ff 24       	eor	r15, r15
     8f2:	87 01       	movw	r16, r14
     8f4:	e2 1a       	sub	r14, r18
     8f6:	f3 0a       	sbc	r15, r19
     8f8:	04 0b       	sbc	r16, r20
     8fa:	15 0b       	sbc	r17, r21
     8fc:	02 c0       	rjmp	.+4      	; 0x902 <__floatsisf+0x68>
     8fe:	79 01       	movw	r14, r18
     900:	8a 01       	movw	r16, r20
     902:	8e e1       	ldi	r24, 0x1E	; 30
     904:	c8 2e       	mov	r12, r24
     906:	d1 2c       	mov	r13, r1
     908:	dc 82       	std	Y+4, r13	; 0x04
     90a:	cb 82       	std	Y+3, r12	; 0x03
     90c:	ed 82       	std	Y+5, r14	; 0x05
     90e:	fe 82       	std	Y+6, r15	; 0x06
     910:	0f 83       	std	Y+7, r16	; 0x07
     912:	18 87       	std	Y+8, r17	; 0x08
     914:	c8 01       	movw	r24, r16
     916:	b7 01       	movw	r22, r14
     918:	0e 94 78 05 	call	0xaf0	; 0xaf0 <__clzsi2>
     91c:	01 97       	sbiw	r24, 0x01	; 1
     91e:	18 16       	cp	r1, r24
     920:	19 06       	cpc	r1, r25
     922:	84 f4       	brge	.+32     	; 0x944 <__floatsisf+0xaa>
     924:	08 2e       	mov	r0, r24
     926:	04 c0       	rjmp	.+8      	; 0x930 <__floatsisf+0x96>
     928:	ee 0c       	add	r14, r14
     92a:	ff 1c       	adc	r15, r15
     92c:	00 1f       	adc	r16, r16
     92e:	11 1f       	adc	r17, r17
     930:	0a 94       	dec	r0
     932:	d2 f7       	brpl	.-12     	; 0x928 <__floatsisf+0x8e>
     934:	ed 82       	std	Y+5, r14	; 0x05
     936:	fe 82       	std	Y+6, r15	; 0x06
     938:	0f 83       	std	Y+7, r16	; 0x07
     93a:	18 87       	std	Y+8, r17	; 0x08
     93c:	c8 1a       	sub	r12, r24
     93e:	d9 0a       	sbc	r13, r25
     940:	dc 82       	std	Y+4, r13	; 0x04
     942:	cb 82       	std	Y+3, r12	; 0x03
     944:	ba 82       	std	Y+2, r11	; 0x02
     946:	ce 01       	movw	r24, r28
     948:	01 96       	adiw	r24, 0x01	; 1
     94a:	0e 94 c7 05 	call	0xb8e	; 0xb8e <__pack_f>
     94e:	28 96       	adiw	r28, 0x08	; 8
     950:	e9 e0       	ldi	r30, 0x09	; 9
     952:	0c 94 d6 1d 	jmp	0x3bac	; 0x3bac <__epilogue_restores__+0x12>

00000956 <__fixsfsi>:
     956:	ac e0       	ldi	r26, 0x0C	; 12
     958:	b0 e0       	ldi	r27, 0x00	; 0
     95a:	e1 eb       	ldi	r30, 0xB1	; 177
     95c:	f4 e0       	ldi	r31, 0x04	; 4
     95e:	0c 94 c1 1d 	jmp	0x3b82	; 0x3b82 <__prologue_saves__+0x20>
     962:	69 83       	std	Y+1, r22	; 0x01
     964:	7a 83       	std	Y+2, r23	; 0x02
     966:	8b 83       	std	Y+3, r24	; 0x03
     968:	9c 83       	std	Y+4, r25	; 0x04
     96a:	ce 01       	movw	r24, r28
     96c:	01 96       	adiw	r24, 0x01	; 1
     96e:	be 01       	movw	r22, r28
     970:	6b 5f       	subi	r22, 0xFB	; 251
     972:	7f 4f       	sbci	r23, 0xFF	; 255
     974:	0e 94 9c 06 	call	0xd38	; 0xd38 <__unpack_f>
     978:	8d 81       	ldd	r24, Y+5	; 0x05
     97a:	82 30       	cpi	r24, 0x02	; 2
     97c:	61 f1       	breq	.+88     	; 0x9d6 <__fixsfsi+0x80>
     97e:	82 30       	cpi	r24, 0x02	; 2
     980:	50 f1       	brcs	.+84     	; 0x9d6 <__fixsfsi+0x80>
     982:	84 30       	cpi	r24, 0x04	; 4
     984:	21 f4       	brne	.+8      	; 0x98e <__fixsfsi+0x38>
     986:	8e 81       	ldd	r24, Y+6	; 0x06
     988:	88 23       	and	r24, r24
     98a:	51 f1       	breq	.+84     	; 0x9e0 <__fixsfsi+0x8a>
     98c:	2e c0       	rjmp	.+92     	; 0x9ea <__fixsfsi+0x94>
     98e:	2f 81       	ldd	r18, Y+7	; 0x07
     990:	38 85       	ldd	r19, Y+8	; 0x08
     992:	37 fd       	sbrc	r19, 7
     994:	20 c0       	rjmp	.+64     	; 0x9d6 <__fixsfsi+0x80>
     996:	6e 81       	ldd	r22, Y+6	; 0x06
     998:	2f 31       	cpi	r18, 0x1F	; 31
     99a:	31 05       	cpc	r19, r1
     99c:	1c f0       	brlt	.+6      	; 0x9a4 <__fixsfsi+0x4e>
     99e:	66 23       	and	r22, r22
     9a0:	f9 f0       	breq	.+62     	; 0x9e0 <__fixsfsi+0x8a>
     9a2:	23 c0       	rjmp	.+70     	; 0x9ea <__fixsfsi+0x94>
     9a4:	8e e1       	ldi	r24, 0x1E	; 30
     9a6:	90 e0       	ldi	r25, 0x00	; 0
     9a8:	82 1b       	sub	r24, r18
     9aa:	93 0b       	sbc	r25, r19
     9ac:	29 85       	ldd	r18, Y+9	; 0x09
     9ae:	3a 85       	ldd	r19, Y+10	; 0x0a
     9b0:	4b 85       	ldd	r20, Y+11	; 0x0b
     9b2:	5c 85       	ldd	r21, Y+12	; 0x0c
     9b4:	04 c0       	rjmp	.+8      	; 0x9be <__fixsfsi+0x68>
     9b6:	56 95       	lsr	r21
     9b8:	47 95       	ror	r20
     9ba:	37 95       	ror	r19
     9bc:	27 95       	ror	r18
     9be:	8a 95       	dec	r24
     9c0:	d2 f7       	brpl	.-12     	; 0x9b6 <__fixsfsi+0x60>
     9c2:	66 23       	and	r22, r22
     9c4:	b1 f0       	breq	.+44     	; 0x9f2 <__fixsfsi+0x9c>
     9c6:	50 95       	com	r21
     9c8:	40 95       	com	r20
     9ca:	30 95       	com	r19
     9cc:	21 95       	neg	r18
     9ce:	3f 4f       	sbci	r19, 0xFF	; 255
     9d0:	4f 4f       	sbci	r20, 0xFF	; 255
     9d2:	5f 4f       	sbci	r21, 0xFF	; 255
     9d4:	0e c0       	rjmp	.+28     	; 0x9f2 <__fixsfsi+0x9c>
     9d6:	20 e0       	ldi	r18, 0x00	; 0
     9d8:	30 e0       	ldi	r19, 0x00	; 0
     9da:	40 e0       	ldi	r20, 0x00	; 0
     9dc:	50 e0       	ldi	r21, 0x00	; 0
     9de:	09 c0       	rjmp	.+18     	; 0x9f2 <__fixsfsi+0x9c>
     9e0:	2f ef       	ldi	r18, 0xFF	; 255
     9e2:	3f ef       	ldi	r19, 0xFF	; 255
     9e4:	4f ef       	ldi	r20, 0xFF	; 255
     9e6:	5f e7       	ldi	r21, 0x7F	; 127
     9e8:	04 c0       	rjmp	.+8      	; 0x9f2 <__fixsfsi+0x9c>
     9ea:	20 e0       	ldi	r18, 0x00	; 0
     9ec:	30 e0       	ldi	r19, 0x00	; 0
     9ee:	40 e0       	ldi	r20, 0x00	; 0
     9f0:	50 e8       	ldi	r21, 0x80	; 128
     9f2:	b9 01       	movw	r22, r18
     9f4:	ca 01       	movw	r24, r20
     9f6:	2c 96       	adiw	r28, 0x0c	; 12
     9f8:	e2 e0       	ldi	r30, 0x02	; 2
     9fa:	0c 94 dd 1d 	jmp	0x3bba	; 0x3bba <__epilogue_restores__+0x20>

000009fe <__floatunsisf>:
     9fe:	a8 e0       	ldi	r26, 0x08	; 8
     a00:	b0 e0       	ldi	r27, 0x00	; 0
     a02:	e5 e0       	ldi	r30, 0x05	; 5
     a04:	f5 e0       	ldi	r31, 0x05	; 5
     a06:	0c 94 b9 1d 	jmp	0x3b72	; 0x3b72 <__prologue_saves__+0x10>
     a0a:	7b 01       	movw	r14, r22
     a0c:	8c 01       	movw	r16, r24
     a0e:	61 15       	cp	r22, r1
     a10:	71 05       	cpc	r23, r1
     a12:	81 05       	cpc	r24, r1
     a14:	91 05       	cpc	r25, r1
     a16:	19 f4       	brne	.+6      	; 0xa1e <__floatunsisf+0x20>
     a18:	82 e0       	ldi	r24, 0x02	; 2
     a1a:	89 83       	std	Y+1, r24	; 0x01
     a1c:	60 c0       	rjmp	.+192    	; 0xade <__floatunsisf+0xe0>
     a1e:	83 e0       	ldi	r24, 0x03	; 3
     a20:	89 83       	std	Y+1, r24	; 0x01
     a22:	8e e1       	ldi	r24, 0x1E	; 30
     a24:	c8 2e       	mov	r12, r24
     a26:	d1 2c       	mov	r13, r1
     a28:	dc 82       	std	Y+4, r13	; 0x04
     a2a:	cb 82       	std	Y+3, r12	; 0x03
     a2c:	ed 82       	std	Y+5, r14	; 0x05
     a2e:	fe 82       	std	Y+6, r15	; 0x06
     a30:	0f 83       	std	Y+7, r16	; 0x07
     a32:	18 87       	std	Y+8, r17	; 0x08
     a34:	c8 01       	movw	r24, r16
     a36:	b7 01       	movw	r22, r14
     a38:	0e 94 78 05 	call	0xaf0	; 0xaf0 <__clzsi2>
     a3c:	fc 01       	movw	r30, r24
     a3e:	31 97       	sbiw	r30, 0x01	; 1
     a40:	f7 ff       	sbrs	r31, 7
     a42:	3b c0       	rjmp	.+118    	; 0xaba <__floatunsisf+0xbc>
     a44:	22 27       	eor	r18, r18
     a46:	33 27       	eor	r19, r19
     a48:	2e 1b       	sub	r18, r30
     a4a:	3f 0b       	sbc	r19, r31
     a4c:	57 01       	movw	r10, r14
     a4e:	68 01       	movw	r12, r16
     a50:	02 2e       	mov	r0, r18
     a52:	04 c0       	rjmp	.+8      	; 0xa5c <__floatunsisf+0x5e>
     a54:	d6 94       	lsr	r13
     a56:	c7 94       	ror	r12
     a58:	b7 94       	ror	r11
     a5a:	a7 94       	ror	r10
     a5c:	0a 94       	dec	r0
     a5e:	d2 f7       	brpl	.-12     	; 0xa54 <__floatunsisf+0x56>
     a60:	40 e0       	ldi	r20, 0x00	; 0
     a62:	50 e0       	ldi	r21, 0x00	; 0
     a64:	60 e0       	ldi	r22, 0x00	; 0
     a66:	70 e0       	ldi	r23, 0x00	; 0
     a68:	81 e0       	ldi	r24, 0x01	; 1
     a6a:	90 e0       	ldi	r25, 0x00	; 0
     a6c:	a0 e0       	ldi	r26, 0x00	; 0
     a6e:	b0 e0       	ldi	r27, 0x00	; 0
     a70:	04 c0       	rjmp	.+8      	; 0xa7a <__floatunsisf+0x7c>
     a72:	88 0f       	add	r24, r24
     a74:	99 1f       	adc	r25, r25
     a76:	aa 1f       	adc	r26, r26
     a78:	bb 1f       	adc	r27, r27
     a7a:	2a 95       	dec	r18
     a7c:	d2 f7       	brpl	.-12     	; 0xa72 <__floatunsisf+0x74>
     a7e:	01 97       	sbiw	r24, 0x01	; 1
     a80:	a1 09       	sbc	r26, r1
     a82:	b1 09       	sbc	r27, r1
     a84:	8e 21       	and	r24, r14
     a86:	9f 21       	and	r25, r15
     a88:	a0 23       	and	r26, r16
     a8a:	b1 23       	and	r27, r17
     a8c:	00 97       	sbiw	r24, 0x00	; 0
     a8e:	a1 05       	cpc	r26, r1
     a90:	b1 05       	cpc	r27, r1
     a92:	21 f0       	breq	.+8      	; 0xa9c <__floatunsisf+0x9e>
     a94:	41 e0       	ldi	r20, 0x01	; 1
     a96:	50 e0       	ldi	r21, 0x00	; 0
     a98:	60 e0       	ldi	r22, 0x00	; 0
     a9a:	70 e0       	ldi	r23, 0x00	; 0
     a9c:	4a 29       	or	r20, r10
     a9e:	5b 29       	or	r21, r11
     aa0:	6c 29       	or	r22, r12
     aa2:	7d 29       	or	r23, r13
     aa4:	4d 83       	std	Y+5, r20	; 0x05
     aa6:	5e 83       	std	Y+6, r21	; 0x06
     aa8:	6f 83       	std	Y+7, r22	; 0x07
     aaa:	78 87       	std	Y+8, r23	; 0x08
     aac:	8e e1       	ldi	r24, 0x1E	; 30
     aae:	90 e0       	ldi	r25, 0x00	; 0
     ab0:	8e 1b       	sub	r24, r30
     ab2:	9f 0b       	sbc	r25, r31
     ab4:	9c 83       	std	Y+4, r25	; 0x04
     ab6:	8b 83       	std	Y+3, r24	; 0x03
     ab8:	12 c0       	rjmp	.+36     	; 0xade <__floatunsisf+0xe0>
     aba:	30 97       	sbiw	r30, 0x00	; 0
     abc:	81 f0       	breq	.+32     	; 0xade <__floatunsisf+0xe0>
     abe:	0e 2e       	mov	r0, r30
     ac0:	04 c0       	rjmp	.+8      	; 0xaca <__floatunsisf+0xcc>
     ac2:	ee 0c       	add	r14, r14
     ac4:	ff 1c       	adc	r15, r15
     ac6:	00 1f       	adc	r16, r16
     ac8:	11 1f       	adc	r17, r17
     aca:	0a 94       	dec	r0
     acc:	d2 f7       	brpl	.-12     	; 0xac2 <__floatunsisf+0xc4>
     ace:	ed 82       	std	Y+5, r14	; 0x05
     ad0:	fe 82       	std	Y+6, r15	; 0x06
     ad2:	0f 83       	std	Y+7, r16	; 0x07
     ad4:	18 87       	std	Y+8, r17	; 0x08
     ad6:	ce 1a       	sub	r12, r30
     ad8:	df 0a       	sbc	r13, r31
     ada:	dc 82       	std	Y+4, r13	; 0x04
     adc:	cb 82       	std	Y+3, r12	; 0x03
     ade:	1a 82       	std	Y+2, r1	; 0x02
     ae0:	ce 01       	movw	r24, r28
     ae2:	01 96       	adiw	r24, 0x01	; 1
     ae4:	0e 94 c7 05 	call	0xb8e	; 0xb8e <__pack_f>
     ae8:	28 96       	adiw	r28, 0x08	; 8
     aea:	ea e0       	ldi	r30, 0x0A	; 10
     aec:	0c 94 d5 1d 	jmp	0x3baa	; 0x3baa <__epilogue_restores__+0x10>

00000af0 <__clzsi2>:
     af0:	ef 92       	push	r14
     af2:	ff 92       	push	r15
     af4:	0f 93       	push	r16
     af6:	1f 93       	push	r17
     af8:	7b 01       	movw	r14, r22
     afa:	8c 01       	movw	r16, r24
     afc:	80 e0       	ldi	r24, 0x00	; 0
     afe:	e8 16       	cp	r14, r24
     b00:	80 e0       	ldi	r24, 0x00	; 0
     b02:	f8 06       	cpc	r15, r24
     b04:	81 e0       	ldi	r24, 0x01	; 1
     b06:	08 07       	cpc	r16, r24
     b08:	80 e0       	ldi	r24, 0x00	; 0
     b0a:	18 07       	cpc	r17, r24
     b0c:	88 f4       	brcc	.+34     	; 0xb30 <__clzsi2+0x40>
     b0e:	8f ef       	ldi	r24, 0xFF	; 255
     b10:	e8 16       	cp	r14, r24
     b12:	f1 04       	cpc	r15, r1
     b14:	01 05       	cpc	r16, r1
     b16:	11 05       	cpc	r17, r1
     b18:	31 f0       	breq	.+12     	; 0xb26 <__clzsi2+0x36>
     b1a:	28 f0       	brcs	.+10     	; 0xb26 <__clzsi2+0x36>
     b1c:	88 e0       	ldi	r24, 0x08	; 8
     b1e:	90 e0       	ldi	r25, 0x00	; 0
     b20:	a0 e0       	ldi	r26, 0x00	; 0
     b22:	b0 e0       	ldi	r27, 0x00	; 0
     b24:	17 c0       	rjmp	.+46     	; 0xb54 <__clzsi2+0x64>
     b26:	80 e0       	ldi	r24, 0x00	; 0
     b28:	90 e0       	ldi	r25, 0x00	; 0
     b2a:	a0 e0       	ldi	r26, 0x00	; 0
     b2c:	b0 e0       	ldi	r27, 0x00	; 0
     b2e:	12 c0       	rjmp	.+36     	; 0xb54 <__clzsi2+0x64>
     b30:	80 e0       	ldi	r24, 0x00	; 0
     b32:	e8 16       	cp	r14, r24
     b34:	80 e0       	ldi	r24, 0x00	; 0
     b36:	f8 06       	cpc	r15, r24
     b38:	80 e0       	ldi	r24, 0x00	; 0
     b3a:	08 07       	cpc	r16, r24
     b3c:	81 e0       	ldi	r24, 0x01	; 1
     b3e:	18 07       	cpc	r17, r24
     b40:	28 f0       	brcs	.+10     	; 0xb4c <__clzsi2+0x5c>
     b42:	88 e1       	ldi	r24, 0x18	; 24
     b44:	90 e0       	ldi	r25, 0x00	; 0
     b46:	a0 e0       	ldi	r26, 0x00	; 0
     b48:	b0 e0       	ldi	r27, 0x00	; 0
     b4a:	04 c0       	rjmp	.+8      	; 0xb54 <__clzsi2+0x64>
     b4c:	80 e1       	ldi	r24, 0x10	; 16
     b4e:	90 e0       	ldi	r25, 0x00	; 0
     b50:	a0 e0       	ldi	r26, 0x00	; 0
     b52:	b0 e0       	ldi	r27, 0x00	; 0
     b54:	20 e2       	ldi	r18, 0x20	; 32
     b56:	30 e0       	ldi	r19, 0x00	; 0
     b58:	40 e0       	ldi	r20, 0x00	; 0
     b5a:	50 e0       	ldi	r21, 0x00	; 0
     b5c:	28 1b       	sub	r18, r24
     b5e:	39 0b       	sbc	r19, r25
     b60:	4a 0b       	sbc	r20, r26
     b62:	5b 0b       	sbc	r21, r27
     b64:	04 c0       	rjmp	.+8      	; 0xb6e <__clzsi2+0x7e>
     b66:	16 95       	lsr	r17
     b68:	07 95       	ror	r16
     b6a:	f7 94       	ror	r15
     b6c:	e7 94       	ror	r14
     b6e:	8a 95       	dec	r24
     b70:	d2 f7       	brpl	.-12     	; 0xb66 <__clzsi2+0x76>
     b72:	f7 01       	movw	r30, r14
     b74:	e8 59       	subi	r30, 0x98	; 152
     b76:	ff 4f       	sbci	r31, 0xFF	; 255
     b78:	80 81       	ld	r24, Z
     b7a:	28 1b       	sub	r18, r24
     b7c:	31 09       	sbc	r19, r1
     b7e:	41 09       	sbc	r20, r1
     b80:	51 09       	sbc	r21, r1
     b82:	c9 01       	movw	r24, r18
     b84:	1f 91       	pop	r17
     b86:	0f 91       	pop	r16
     b88:	ff 90       	pop	r15
     b8a:	ef 90       	pop	r14
     b8c:	08 95       	ret

00000b8e <__pack_f>:
     b8e:	df 92       	push	r13
     b90:	ef 92       	push	r14
     b92:	ff 92       	push	r15
     b94:	0f 93       	push	r16
     b96:	1f 93       	push	r17
     b98:	fc 01       	movw	r30, r24
     b9a:	e4 80       	ldd	r14, Z+4	; 0x04
     b9c:	f5 80       	ldd	r15, Z+5	; 0x05
     b9e:	06 81       	ldd	r16, Z+6	; 0x06
     ba0:	17 81       	ldd	r17, Z+7	; 0x07
     ba2:	d1 80       	ldd	r13, Z+1	; 0x01
     ba4:	80 81       	ld	r24, Z
     ba6:	82 30       	cpi	r24, 0x02	; 2
     ba8:	48 f4       	brcc	.+18     	; 0xbbc <__pack_f+0x2e>
     baa:	80 e0       	ldi	r24, 0x00	; 0
     bac:	90 e0       	ldi	r25, 0x00	; 0
     bae:	a0 e1       	ldi	r26, 0x10	; 16
     bb0:	b0 e0       	ldi	r27, 0x00	; 0
     bb2:	e8 2a       	or	r14, r24
     bb4:	f9 2a       	or	r15, r25
     bb6:	0a 2b       	or	r16, r26
     bb8:	1b 2b       	or	r17, r27
     bba:	a5 c0       	rjmp	.+330    	; 0xd06 <__pack_f+0x178>
     bbc:	84 30       	cpi	r24, 0x04	; 4
     bbe:	09 f4       	brne	.+2      	; 0xbc2 <__pack_f+0x34>
     bc0:	9f c0       	rjmp	.+318    	; 0xd00 <__pack_f+0x172>
     bc2:	82 30       	cpi	r24, 0x02	; 2
     bc4:	21 f4       	brne	.+8      	; 0xbce <__pack_f+0x40>
     bc6:	ee 24       	eor	r14, r14
     bc8:	ff 24       	eor	r15, r15
     bca:	87 01       	movw	r16, r14
     bcc:	05 c0       	rjmp	.+10     	; 0xbd8 <__pack_f+0x4a>
     bce:	e1 14       	cp	r14, r1
     bd0:	f1 04       	cpc	r15, r1
     bd2:	01 05       	cpc	r16, r1
     bd4:	11 05       	cpc	r17, r1
     bd6:	19 f4       	brne	.+6      	; 0xbde <__pack_f+0x50>
     bd8:	e0 e0       	ldi	r30, 0x00	; 0
     bda:	f0 e0       	ldi	r31, 0x00	; 0
     bdc:	96 c0       	rjmp	.+300    	; 0xd0a <__pack_f+0x17c>
     bde:	62 81       	ldd	r22, Z+2	; 0x02
     be0:	73 81       	ldd	r23, Z+3	; 0x03
     be2:	9f ef       	ldi	r25, 0xFF	; 255
     be4:	62 38       	cpi	r22, 0x82	; 130
     be6:	79 07       	cpc	r23, r25
     be8:	0c f0       	brlt	.+2      	; 0xbec <__pack_f+0x5e>
     bea:	5b c0       	rjmp	.+182    	; 0xca2 <__pack_f+0x114>
     bec:	22 e8       	ldi	r18, 0x82	; 130
     bee:	3f ef       	ldi	r19, 0xFF	; 255
     bf0:	26 1b       	sub	r18, r22
     bf2:	37 0b       	sbc	r19, r23
     bf4:	2a 31       	cpi	r18, 0x1A	; 26
     bf6:	31 05       	cpc	r19, r1
     bf8:	2c f0       	brlt	.+10     	; 0xc04 <__pack_f+0x76>
     bfa:	20 e0       	ldi	r18, 0x00	; 0
     bfc:	30 e0       	ldi	r19, 0x00	; 0
     bfe:	40 e0       	ldi	r20, 0x00	; 0
     c00:	50 e0       	ldi	r21, 0x00	; 0
     c02:	2a c0       	rjmp	.+84     	; 0xc58 <__pack_f+0xca>
     c04:	b8 01       	movw	r22, r16
     c06:	a7 01       	movw	r20, r14
     c08:	02 2e       	mov	r0, r18
     c0a:	04 c0       	rjmp	.+8      	; 0xc14 <__pack_f+0x86>
     c0c:	76 95       	lsr	r23
     c0e:	67 95       	ror	r22
     c10:	57 95       	ror	r21
     c12:	47 95       	ror	r20
     c14:	0a 94       	dec	r0
     c16:	d2 f7       	brpl	.-12     	; 0xc0c <__pack_f+0x7e>
     c18:	81 e0       	ldi	r24, 0x01	; 1
     c1a:	90 e0       	ldi	r25, 0x00	; 0
     c1c:	a0 e0       	ldi	r26, 0x00	; 0
     c1e:	b0 e0       	ldi	r27, 0x00	; 0
     c20:	04 c0       	rjmp	.+8      	; 0xc2a <__pack_f+0x9c>
     c22:	88 0f       	add	r24, r24
     c24:	99 1f       	adc	r25, r25
     c26:	aa 1f       	adc	r26, r26
     c28:	bb 1f       	adc	r27, r27
     c2a:	2a 95       	dec	r18
     c2c:	d2 f7       	brpl	.-12     	; 0xc22 <__pack_f+0x94>
     c2e:	01 97       	sbiw	r24, 0x01	; 1
     c30:	a1 09       	sbc	r26, r1
     c32:	b1 09       	sbc	r27, r1
     c34:	8e 21       	and	r24, r14
     c36:	9f 21       	and	r25, r15
     c38:	a0 23       	and	r26, r16
     c3a:	b1 23       	and	r27, r17
     c3c:	00 97       	sbiw	r24, 0x00	; 0
     c3e:	a1 05       	cpc	r26, r1
     c40:	b1 05       	cpc	r27, r1
     c42:	21 f0       	breq	.+8      	; 0xc4c <__pack_f+0xbe>
     c44:	81 e0       	ldi	r24, 0x01	; 1
     c46:	90 e0       	ldi	r25, 0x00	; 0
     c48:	a0 e0       	ldi	r26, 0x00	; 0
     c4a:	b0 e0       	ldi	r27, 0x00	; 0
     c4c:	9a 01       	movw	r18, r20
     c4e:	ab 01       	movw	r20, r22
     c50:	28 2b       	or	r18, r24
     c52:	39 2b       	or	r19, r25
     c54:	4a 2b       	or	r20, r26
     c56:	5b 2b       	or	r21, r27
     c58:	da 01       	movw	r26, r20
     c5a:	c9 01       	movw	r24, r18
     c5c:	8f 77       	andi	r24, 0x7F	; 127
     c5e:	90 70       	andi	r25, 0x00	; 0
     c60:	a0 70       	andi	r26, 0x00	; 0
     c62:	b0 70       	andi	r27, 0x00	; 0
     c64:	80 34       	cpi	r24, 0x40	; 64
     c66:	91 05       	cpc	r25, r1
     c68:	a1 05       	cpc	r26, r1
     c6a:	b1 05       	cpc	r27, r1
     c6c:	39 f4       	brne	.+14     	; 0xc7c <__pack_f+0xee>
     c6e:	27 ff       	sbrs	r18, 7
     c70:	09 c0       	rjmp	.+18     	; 0xc84 <__pack_f+0xf6>
     c72:	20 5c       	subi	r18, 0xC0	; 192
     c74:	3f 4f       	sbci	r19, 0xFF	; 255
     c76:	4f 4f       	sbci	r20, 0xFF	; 255
     c78:	5f 4f       	sbci	r21, 0xFF	; 255
     c7a:	04 c0       	rjmp	.+8      	; 0xc84 <__pack_f+0xf6>
     c7c:	21 5c       	subi	r18, 0xC1	; 193
     c7e:	3f 4f       	sbci	r19, 0xFF	; 255
     c80:	4f 4f       	sbci	r20, 0xFF	; 255
     c82:	5f 4f       	sbci	r21, 0xFF	; 255
     c84:	e0 e0       	ldi	r30, 0x00	; 0
     c86:	f0 e0       	ldi	r31, 0x00	; 0
     c88:	20 30       	cpi	r18, 0x00	; 0
     c8a:	a0 e0       	ldi	r26, 0x00	; 0
     c8c:	3a 07       	cpc	r19, r26
     c8e:	a0 e0       	ldi	r26, 0x00	; 0
     c90:	4a 07       	cpc	r20, r26
     c92:	a0 e4       	ldi	r26, 0x40	; 64
     c94:	5a 07       	cpc	r21, r26
     c96:	10 f0       	brcs	.+4      	; 0xc9c <__pack_f+0x10e>
     c98:	e1 e0       	ldi	r30, 0x01	; 1
     c9a:	f0 e0       	ldi	r31, 0x00	; 0
     c9c:	79 01       	movw	r14, r18
     c9e:	8a 01       	movw	r16, r20
     ca0:	27 c0       	rjmp	.+78     	; 0xcf0 <__pack_f+0x162>
     ca2:	60 38       	cpi	r22, 0x80	; 128
     ca4:	71 05       	cpc	r23, r1
     ca6:	64 f5       	brge	.+88     	; 0xd00 <__pack_f+0x172>
     ca8:	fb 01       	movw	r30, r22
     caa:	e1 58       	subi	r30, 0x81	; 129
     cac:	ff 4f       	sbci	r31, 0xFF	; 255
     cae:	d8 01       	movw	r26, r16
     cb0:	c7 01       	movw	r24, r14
     cb2:	8f 77       	andi	r24, 0x7F	; 127
     cb4:	90 70       	andi	r25, 0x00	; 0
     cb6:	a0 70       	andi	r26, 0x00	; 0
     cb8:	b0 70       	andi	r27, 0x00	; 0
     cba:	80 34       	cpi	r24, 0x40	; 64
     cbc:	91 05       	cpc	r25, r1
     cbe:	a1 05       	cpc	r26, r1
     cc0:	b1 05       	cpc	r27, r1
     cc2:	39 f4       	brne	.+14     	; 0xcd2 <__pack_f+0x144>
     cc4:	e7 fe       	sbrs	r14, 7
     cc6:	0d c0       	rjmp	.+26     	; 0xce2 <__pack_f+0x154>
     cc8:	80 e4       	ldi	r24, 0x40	; 64
     cca:	90 e0       	ldi	r25, 0x00	; 0
     ccc:	a0 e0       	ldi	r26, 0x00	; 0
     cce:	b0 e0       	ldi	r27, 0x00	; 0
     cd0:	04 c0       	rjmp	.+8      	; 0xcda <__pack_f+0x14c>
     cd2:	8f e3       	ldi	r24, 0x3F	; 63
     cd4:	90 e0       	ldi	r25, 0x00	; 0
     cd6:	a0 e0       	ldi	r26, 0x00	; 0
     cd8:	b0 e0       	ldi	r27, 0x00	; 0
     cda:	e8 0e       	add	r14, r24
     cdc:	f9 1e       	adc	r15, r25
     cde:	0a 1f       	adc	r16, r26
     ce0:	1b 1f       	adc	r17, r27
     ce2:	17 ff       	sbrs	r17, 7
     ce4:	05 c0       	rjmp	.+10     	; 0xcf0 <__pack_f+0x162>
     ce6:	16 95       	lsr	r17
     ce8:	07 95       	ror	r16
     cea:	f7 94       	ror	r15
     cec:	e7 94       	ror	r14
     cee:	31 96       	adiw	r30, 0x01	; 1
     cf0:	87 e0       	ldi	r24, 0x07	; 7
     cf2:	16 95       	lsr	r17
     cf4:	07 95       	ror	r16
     cf6:	f7 94       	ror	r15
     cf8:	e7 94       	ror	r14
     cfa:	8a 95       	dec	r24
     cfc:	d1 f7       	brne	.-12     	; 0xcf2 <__pack_f+0x164>
     cfe:	05 c0       	rjmp	.+10     	; 0xd0a <__pack_f+0x17c>
     d00:	ee 24       	eor	r14, r14
     d02:	ff 24       	eor	r15, r15
     d04:	87 01       	movw	r16, r14
     d06:	ef ef       	ldi	r30, 0xFF	; 255
     d08:	f0 e0       	ldi	r31, 0x00	; 0
     d0a:	6e 2f       	mov	r22, r30
     d0c:	67 95       	ror	r22
     d0e:	66 27       	eor	r22, r22
     d10:	67 95       	ror	r22
     d12:	90 2f       	mov	r25, r16
     d14:	9f 77       	andi	r25, 0x7F	; 127
     d16:	d7 94       	ror	r13
     d18:	dd 24       	eor	r13, r13
     d1a:	d7 94       	ror	r13
     d1c:	8e 2f       	mov	r24, r30
     d1e:	86 95       	lsr	r24
     d20:	49 2f       	mov	r20, r25
     d22:	46 2b       	or	r20, r22
     d24:	58 2f       	mov	r21, r24
     d26:	5d 29       	or	r21, r13
     d28:	b7 01       	movw	r22, r14
     d2a:	ca 01       	movw	r24, r20
     d2c:	1f 91       	pop	r17
     d2e:	0f 91       	pop	r16
     d30:	ff 90       	pop	r15
     d32:	ef 90       	pop	r14
     d34:	df 90       	pop	r13
     d36:	08 95       	ret

00000d38 <__unpack_f>:
     d38:	fc 01       	movw	r30, r24
     d3a:	db 01       	movw	r26, r22
     d3c:	40 81       	ld	r20, Z
     d3e:	51 81       	ldd	r21, Z+1	; 0x01
     d40:	22 81       	ldd	r18, Z+2	; 0x02
     d42:	62 2f       	mov	r22, r18
     d44:	6f 77       	andi	r22, 0x7F	; 127
     d46:	70 e0       	ldi	r23, 0x00	; 0
     d48:	22 1f       	adc	r18, r18
     d4a:	22 27       	eor	r18, r18
     d4c:	22 1f       	adc	r18, r18
     d4e:	93 81       	ldd	r25, Z+3	; 0x03
     d50:	89 2f       	mov	r24, r25
     d52:	88 0f       	add	r24, r24
     d54:	82 2b       	or	r24, r18
     d56:	28 2f       	mov	r18, r24
     d58:	30 e0       	ldi	r19, 0x00	; 0
     d5a:	99 1f       	adc	r25, r25
     d5c:	99 27       	eor	r25, r25
     d5e:	99 1f       	adc	r25, r25
     d60:	11 96       	adiw	r26, 0x01	; 1
     d62:	9c 93       	st	X, r25
     d64:	11 97       	sbiw	r26, 0x01	; 1
     d66:	21 15       	cp	r18, r1
     d68:	31 05       	cpc	r19, r1
     d6a:	a9 f5       	brne	.+106    	; 0xdd6 <__unpack_f+0x9e>
     d6c:	41 15       	cp	r20, r1
     d6e:	51 05       	cpc	r21, r1
     d70:	61 05       	cpc	r22, r1
     d72:	71 05       	cpc	r23, r1
     d74:	11 f4       	brne	.+4      	; 0xd7a <__unpack_f+0x42>
     d76:	82 e0       	ldi	r24, 0x02	; 2
     d78:	37 c0       	rjmp	.+110    	; 0xde8 <__unpack_f+0xb0>
     d7a:	82 e8       	ldi	r24, 0x82	; 130
     d7c:	9f ef       	ldi	r25, 0xFF	; 255
     d7e:	13 96       	adiw	r26, 0x03	; 3
     d80:	9c 93       	st	X, r25
     d82:	8e 93       	st	-X, r24
     d84:	12 97       	sbiw	r26, 0x02	; 2
     d86:	9a 01       	movw	r18, r20
     d88:	ab 01       	movw	r20, r22
     d8a:	67 e0       	ldi	r22, 0x07	; 7
     d8c:	22 0f       	add	r18, r18
     d8e:	33 1f       	adc	r19, r19
     d90:	44 1f       	adc	r20, r20
     d92:	55 1f       	adc	r21, r21
     d94:	6a 95       	dec	r22
     d96:	d1 f7       	brne	.-12     	; 0xd8c <__unpack_f+0x54>
     d98:	83 e0       	ldi	r24, 0x03	; 3
     d9a:	8c 93       	st	X, r24
     d9c:	0d c0       	rjmp	.+26     	; 0xdb8 <__unpack_f+0x80>
     d9e:	22 0f       	add	r18, r18
     da0:	33 1f       	adc	r19, r19
     da2:	44 1f       	adc	r20, r20
     da4:	55 1f       	adc	r21, r21
     da6:	12 96       	adiw	r26, 0x02	; 2
     da8:	8d 91       	ld	r24, X+
     daa:	9c 91       	ld	r25, X
     dac:	13 97       	sbiw	r26, 0x03	; 3
     dae:	01 97       	sbiw	r24, 0x01	; 1
     db0:	13 96       	adiw	r26, 0x03	; 3
     db2:	9c 93       	st	X, r25
     db4:	8e 93       	st	-X, r24
     db6:	12 97       	sbiw	r26, 0x02	; 2
     db8:	20 30       	cpi	r18, 0x00	; 0
     dba:	80 e0       	ldi	r24, 0x00	; 0
     dbc:	38 07       	cpc	r19, r24
     dbe:	80 e0       	ldi	r24, 0x00	; 0
     dc0:	48 07       	cpc	r20, r24
     dc2:	80 e4       	ldi	r24, 0x40	; 64
     dc4:	58 07       	cpc	r21, r24
     dc6:	58 f3       	brcs	.-42     	; 0xd9e <__unpack_f+0x66>
     dc8:	14 96       	adiw	r26, 0x04	; 4
     dca:	2d 93       	st	X+, r18
     dcc:	3d 93       	st	X+, r19
     dce:	4d 93       	st	X+, r20
     dd0:	5c 93       	st	X, r21
     dd2:	17 97       	sbiw	r26, 0x07	; 7
     dd4:	08 95       	ret
     dd6:	2f 3f       	cpi	r18, 0xFF	; 255
     dd8:	31 05       	cpc	r19, r1
     dda:	79 f4       	brne	.+30     	; 0xdfa <__unpack_f+0xc2>
     ddc:	41 15       	cp	r20, r1
     dde:	51 05       	cpc	r21, r1
     de0:	61 05       	cpc	r22, r1
     de2:	71 05       	cpc	r23, r1
     de4:	19 f4       	brne	.+6      	; 0xdec <__unpack_f+0xb4>
     de6:	84 e0       	ldi	r24, 0x04	; 4
     de8:	8c 93       	st	X, r24
     dea:	08 95       	ret
     dec:	64 ff       	sbrs	r22, 4
     dee:	03 c0       	rjmp	.+6      	; 0xdf6 <__unpack_f+0xbe>
     df0:	81 e0       	ldi	r24, 0x01	; 1
     df2:	8c 93       	st	X, r24
     df4:	12 c0       	rjmp	.+36     	; 0xe1a <__unpack_f+0xe2>
     df6:	1c 92       	st	X, r1
     df8:	10 c0       	rjmp	.+32     	; 0xe1a <__unpack_f+0xe2>
     dfa:	2f 57       	subi	r18, 0x7F	; 127
     dfc:	30 40       	sbci	r19, 0x00	; 0
     dfe:	13 96       	adiw	r26, 0x03	; 3
     e00:	3c 93       	st	X, r19
     e02:	2e 93       	st	-X, r18
     e04:	12 97       	sbiw	r26, 0x02	; 2
     e06:	83 e0       	ldi	r24, 0x03	; 3
     e08:	8c 93       	st	X, r24
     e0a:	87 e0       	ldi	r24, 0x07	; 7
     e0c:	44 0f       	add	r20, r20
     e0e:	55 1f       	adc	r21, r21
     e10:	66 1f       	adc	r22, r22
     e12:	77 1f       	adc	r23, r23
     e14:	8a 95       	dec	r24
     e16:	d1 f7       	brne	.-12     	; 0xe0c <__unpack_f+0xd4>
     e18:	70 64       	ori	r23, 0x40	; 64
     e1a:	14 96       	adiw	r26, 0x04	; 4
     e1c:	4d 93       	st	X+, r20
     e1e:	5d 93       	st	X+, r21
     e20:	6d 93       	st	X+, r22
     e22:	7c 93       	st	X, r23
     e24:	17 97       	sbiw	r26, 0x07	; 7
     e26:	08 95       	ret

00000e28 <__fpcmp_parts_f>:
     e28:	1f 93       	push	r17
     e2a:	dc 01       	movw	r26, r24
     e2c:	fb 01       	movw	r30, r22
     e2e:	9c 91       	ld	r25, X
     e30:	92 30       	cpi	r25, 0x02	; 2
     e32:	08 f4       	brcc	.+2      	; 0xe36 <__fpcmp_parts_f+0xe>
     e34:	47 c0       	rjmp	.+142    	; 0xec4 <__fpcmp_parts_f+0x9c>
     e36:	80 81       	ld	r24, Z
     e38:	82 30       	cpi	r24, 0x02	; 2
     e3a:	08 f4       	brcc	.+2      	; 0xe3e <__fpcmp_parts_f+0x16>
     e3c:	43 c0       	rjmp	.+134    	; 0xec4 <__fpcmp_parts_f+0x9c>
     e3e:	94 30       	cpi	r25, 0x04	; 4
     e40:	51 f4       	brne	.+20     	; 0xe56 <__fpcmp_parts_f+0x2e>
     e42:	11 96       	adiw	r26, 0x01	; 1
     e44:	1c 91       	ld	r17, X
     e46:	84 30       	cpi	r24, 0x04	; 4
     e48:	99 f5       	brne	.+102    	; 0xeb0 <__fpcmp_parts_f+0x88>
     e4a:	81 81       	ldd	r24, Z+1	; 0x01
     e4c:	68 2f       	mov	r22, r24
     e4e:	70 e0       	ldi	r23, 0x00	; 0
     e50:	61 1b       	sub	r22, r17
     e52:	71 09       	sbc	r23, r1
     e54:	3f c0       	rjmp	.+126    	; 0xed4 <__fpcmp_parts_f+0xac>
     e56:	84 30       	cpi	r24, 0x04	; 4
     e58:	21 f0       	breq	.+8      	; 0xe62 <__fpcmp_parts_f+0x3a>
     e5a:	92 30       	cpi	r25, 0x02	; 2
     e5c:	31 f4       	brne	.+12     	; 0xe6a <__fpcmp_parts_f+0x42>
     e5e:	82 30       	cpi	r24, 0x02	; 2
     e60:	b9 f1       	breq	.+110    	; 0xed0 <__fpcmp_parts_f+0xa8>
     e62:	81 81       	ldd	r24, Z+1	; 0x01
     e64:	88 23       	and	r24, r24
     e66:	89 f1       	breq	.+98     	; 0xeca <__fpcmp_parts_f+0xa2>
     e68:	2d c0       	rjmp	.+90     	; 0xec4 <__fpcmp_parts_f+0x9c>
     e6a:	11 96       	adiw	r26, 0x01	; 1
     e6c:	1c 91       	ld	r17, X
     e6e:	11 97       	sbiw	r26, 0x01	; 1
     e70:	82 30       	cpi	r24, 0x02	; 2
     e72:	f1 f0       	breq	.+60     	; 0xeb0 <__fpcmp_parts_f+0x88>
     e74:	81 81       	ldd	r24, Z+1	; 0x01
     e76:	18 17       	cp	r17, r24
     e78:	d9 f4       	brne	.+54     	; 0xeb0 <__fpcmp_parts_f+0x88>
     e7a:	12 96       	adiw	r26, 0x02	; 2
     e7c:	2d 91       	ld	r18, X+
     e7e:	3c 91       	ld	r19, X
     e80:	13 97       	sbiw	r26, 0x03	; 3
     e82:	82 81       	ldd	r24, Z+2	; 0x02
     e84:	93 81       	ldd	r25, Z+3	; 0x03
     e86:	82 17       	cp	r24, r18
     e88:	93 07       	cpc	r25, r19
     e8a:	94 f0       	brlt	.+36     	; 0xeb0 <__fpcmp_parts_f+0x88>
     e8c:	28 17       	cp	r18, r24
     e8e:	39 07       	cpc	r19, r25
     e90:	bc f0       	brlt	.+46     	; 0xec0 <__fpcmp_parts_f+0x98>
     e92:	14 96       	adiw	r26, 0x04	; 4
     e94:	8d 91       	ld	r24, X+
     e96:	9d 91       	ld	r25, X+
     e98:	0d 90       	ld	r0, X+
     e9a:	bc 91       	ld	r27, X
     e9c:	a0 2d       	mov	r26, r0
     e9e:	24 81       	ldd	r18, Z+4	; 0x04
     ea0:	35 81       	ldd	r19, Z+5	; 0x05
     ea2:	46 81       	ldd	r20, Z+6	; 0x06
     ea4:	57 81       	ldd	r21, Z+7	; 0x07
     ea6:	28 17       	cp	r18, r24
     ea8:	39 07       	cpc	r19, r25
     eaa:	4a 07       	cpc	r20, r26
     eac:	5b 07       	cpc	r21, r27
     eae:	18 f4       	brcc	.+6      	; 0xeb6 <__fpcmp_parts_f+0x8e>
     eb0:	11 23       	and	r17, r17
     eb2:	41 f0       	breq	.+16     	; 0xec4 <__fpcmp_parts_f+0x9c>
     eb4:	0a c0       	rjmp	.+20     	; 0xeca <__fpcmp_parts_f+0xa2>
     eb6:	82 17       	cp	r24, r18
     eb8:	93 07       	cpc	r25, r19
     eba:	a4 07       	cpc	r26, r20
     ebc:	b5 07       	cpc	r27, r21
     ebe:	40 f4       	brcc	.+16     	; 0xed0 <__fpcmp_parts_f+0xa8>
     ec0:	11 23       	and	r17, r17
     ec2:	19 f0       	breq	.+6      	; 0xeca <__fpcmp_parts_f+0xa2>
     ec4:	61 e0       	ldi	r22, 0x01	; 1
     ec6:	70 e0       	ldi	r23, 0x00	; 0
     ec8:	05 c0       	rjmp	.+10     	; 0xed4 <__fpcmp_parts_f+0xac>
     eca:	6f ef       	ldi	r22, 0xFF	; 255
     ecc:	7f ef       	ldi	r23, 0xFF	; 255
     ece:	02 c0       	rjmp	.+4      	; 0xed4 <__fpcmp_parts_f+0xac>
     ed0:	60 e0       	ldi	r22, 0x00	; 0
     ed2:	70 e0       	ldi	r23, 0x00	; 0
     ed4:	cb 01       	movw	r24, r22
     ed6:	1f 91       	pop	r17
     ed8:	08 95       	ret

00000eda <DIO_Dyn_vid_SetPinValue>:
#include "../../Services/STD_types.h"
#include "../../Services/BIT_math.h"
#include "DIO_Dynamic_int.h"
//#include "DIO_Dynamic_Config.h"
#include "DIO_Dynamic_priv.h"
void DIO_Dyn_vid_SetPinValue(u8 Copy_u8_PortNum, u8 Copy_u8_PinNum,u8 Copy_u8_PinVal ){
     eda:	df 93       	push	r29
     edc:	cf 93       	push	r28
     ede:	00 d0       	rcall	.+0      	; 0xee0 <DIO_Dyn_vid_SetPinValue+0x6>
     ee0:	00 d0       	rcall	.+0      	; 0xee2 <DIO_Dyn_vid_SetPinValue+0x8>
     ee2:	0f 92       	push	r0
     ee4:	cd b7       	in	r28, 0x3d	; 61
     ee6:	de b7       	in	r29, 0x3e	; 62
     ee8:	89 83       	std	Y+1, r24	; 0x01
     eea:	6a 83       	std	Y+2, r22	; 0x02
     eec:	4b 83       	std	Y+3, r20	; 0x03
	if(Copy_u8_PinNum>=DIO_Dyn_u8_PORT_START&&Copy_u8_PinNum<=DIO_Dyn_u8_PORT_END )
     eee:	8a 81       	ldd	r24, Y+2	; 0x02
     ef0:	88 30       	cpi	r24, 0x08	; 8
     ef2:	08 f0       	brcs	.+2      	; 0xef6 <DIO_Dyn_vid_SetPinValue+0x1c>
     ef4:	e0 c0       	rjmp	.+448    	; 0x10b6 <DIO_Dyn_vid_SetPinValue+0x1dc>
		switch(Copy_u8_PortNum){
     ef6:	89 81       	ldd	r24, Y+1	; 0x01
     ef8:	28 2f       	mov	r18, r24
     efa:	30 e0       	ldi	r19, 0x00	; 0
     efc:	3d 83       	std	Y+5, r19	; 0x05
     efe:	2c 83       	std	Y+4, r18	; 0x04
     f00:	8c 81       	ldd	r24, Y+4	; 0x04
     f02:	9d 81       	ldd	r25, Y+5	; 0x05
     f04:	81 30       	cpi	r24, 0x01	; 1
     f06:	91 05       	cpc	r25, r1
     f08:	09 f4       	brne	.+2      	; 0xf0c <DIO_Dyn_vid_SetPinValue+0x32>
     f0a:	47 c0       	rjmp	.+142    	; 0xf9a <DIO_Dyn_vid_SetPinValue+0xc0>
     f0c:	2c 81       	ldd	r18, Y+4	; 0x04
     f0e:	3d 81       	ldd	r19, Y+5	; 0x05
     f10:	22 30       	cpi	r18, 0x02	; 2
     f12:	31 05       	cpc	r19, r1
     f14:	2c f4       	brge	.+10     	; 0xf20 <DIO_Dyn_vid_SetPinValue+0x46>
     f16:	8c 81       	ldd	r24, Y+4	; 0x04
     f18:	9d 81       	ldd	r25, Y+5	; 0x05
     f1a:	00 97       	sbiw	r24, 0x00	; 0
     f1c:	71 f0       	breq	.+28     	; 0xf3a <DIO_Dyn_vid_SetPinValue+0x60>
     f1e:	cb c0       	rjmp	.+406    	; 0x10b6 <DIO_Dyn_vid_SetPinValue+0x1dc>
     f20:	2c 81       	ldd	r18, Y+4	; 0x04
     f22:	3d 81       	ldd	r19, Y+5	; 0x05
     f24:	22 30       	cpi	r18, 0x02	; 2
     f26:	31 05       	cpc	r19, r1
     f28:	09 f4       	brne	.+2      	; 0xf2c <DIO_Dyn_vid_SetPinValue+0x52>
     f2a:	67 c0       	rjmp	.+206    	; 0xffa <DIO_Dyn_vid_SetPinValue+0x120>
     f2c:	8c 81       	ldd	r24, Y+4	; 0x04
     f2e:	9d 81       	ldd	r25, Y+5	; 0x05
     f30:	83 30       	cpi	r24, 0x03	; 3
     f32:	91 05       	cpc	r25, r1
     f34:	09 f4       	brne	.+2      	; 0xf38 <DIO_Dyn_vid_SetPinValue+0x5e>
     f36:	91 c0       	rjmp	.+290    	; 0x105a <DIO_Dyn_vid_SetPinValue+0x180>
     f38:	be c0       	rjmp	.+380    	; 0x10b6 <DIO_Dyn_vid_SetPinValue+0x1dc>
				case DIO_Dyn_u8_PORTA:
					if( Copy_u8_PinVal==DIO_Dyn_u8_TRUE )
     f3a:	8b 81       	ldd	r24, Y+3	; 0x03
     f3c:	81 30       	cpi	r24, 0x01	; 1
     f3e:	a1 f4       	brne	.+40     	; 0xf68 <DIO_Dyn_vid_SetPinValue+0x8e>
						SET_BIT(PORTA,Copy_u8_PinNum);
     f40:	ab e3       	ldi	r26, 0x3B	; 59
     f42:	b0 e0       	ldi	r27, 0x00	; 0
     f44:	eb e3       	ldi	r30, 0x3B	; 59
     f46:	f0 e0       	ldi	r31, 0x00	; 0
     f48:	80 81       	ld	r24, Z
     f4a:	48 2f       	mov	r20, r24
     f4c:	8a 81       	ldd	r24, Y+2	; 0x02
     f4e:	28 2f       	mov	r18, r24
     f50:	30 e0       	ldi	r19, 0x00	; 0
     f52:	81 e0       	ldi	r24, 0x01	; 1
     f54:	90 e0       	ldi	r25, 0x00	; 0
     f56:	02 2e       	mov	r0, r18
     f58:	02 c0       	rjmp	.+4      	; 0xf5e <DIO_Dyn_vid_SetPinValue+0x84>
     f5a:	88 0f       	add	r24, r24
     f5c:	99 1f       	adc	r25, r25
     f5e:	0a 94       	dec	r0
     f60:	e2 f7       	brpl	.-8      	; 0xf5a <DIO_Dyn_vid_SetPinValue+0x80>
     f62:	84 2b       	or	r24, r20
     f64:	8c 93       	st	X, r24
     f66:	a7 c0       	rjmp	.+334    	; 0x10b6 <DIO_Dyn_vid_SetPinValue+0x1dc>
					else if( Copy_u8_PinVal==DIO_Dyn_u8_FALSE )
     f68:	8b 81       	ldd	r24, Y+3	; 0x03
     f6a:	88 23       	and	r24, r24
     f6c:	09 f0       	breq	.+2      	; 0xf70 <DIO_Dyn_vid_SetPinValue+0x96>
     f6e:	a3 c0       	rjmp	.+326    	; 0x10b6 <DIO_Dyn_vid_SetPinValue+0x1dc>
						CLEAR_BIT(PORTA,Copy_u8_PinNum);
     f70:	ab e3       	ldi	r26, 0x3B	; 59
     f72:	b0 e0       	ldi	r27, 0x00	; 0
     f74:	eb e3       	ldi	r30, 0x3B	; 59
     f76:	f0 e0       	ldi	r31, 0x00	; 0
     f78:	80 81       	ld	r24, Z
     f7a:	48 2f       	mov	r20, r24
     f7c:	8a 81       	ldd	r24, Y+2	; 0x02
     f7e:	28 2f       	mov	r18, r24
     f80:	30 e0       	ldi	r19, 0x00	; 0
     f82:	81 e0       	ldi	r24, 0x01	; 1
     f84:	90 e0       	ldi	r25, 0x00	; 0
     f86:	02 2e       	mov	r0, r18
     f88:	02 c0       	rjmp	.+4      	; 0xf8e <DIO_Dyn_vid_SetPinValue+0xb4>
     f8a:	88 0f       	add	r24, r24
     f8c:	99 1f       	adc	r25, r25
     f8e:	0a 94       	dec	r0
     f90:	e2 f7       	brpl	.-8      	; 0xf8a <DIO_Dyn_vid_SetPinValue+0xb0>
     f92:	80 95       	com	r24
     f94:	84 23       	and	r24, r20
     f96:	8c 93       	st	X, r24
     f98:	8e c0       	rjmp	.+284    	; 0x10b6 <DIO_Dyn_vid_SetPinValue+0x1dc>
					break;
				case DIO_Dyn_u8_PORTB:
						if( Copy_u8_PinVal==DIO_Dyn_u8_TRUE )
     f9a:	8b 81       	ldd	r24, Y+3	; 0x03
     f9c:	81 30       	cpi	r24, 0x01	; 1
     f9e:	a1 f4       	brne	.+40     	; 0xfc8 <DIO_Dyn_vid_SetPinValue+0xee>
							SET_BIT(PORTB,Copy_u8_PinNum);
     fa0:	a8 e3       	ldi	r26, 0x38	; 56
     fa2:	b0 e0       	ldi	r27, 0x00	; 0
     fa4:	e8 e3       	ldi	r30, 0x38	; 56
     fa6:	f0 e0       	ldi	r31, 0x00	; 0
     fa8:	80 81       	ld	r24, Z
     faa:	48 2f       	mov	r20, r24
     fac:	8a 81       	ldd	r24, Y+2	; 0x02
     fae:	28 2f       	mov	r18, r24
     fb0:	30 e0       	ldi	r19, 0x00	; 0
     fb2:	81 e0       	ldi	r24, 0x01	; 1
     fb4:	90 e0       	ldi	r25, 0x00	; 0
     fb6:	02 2e       	mov	r0, r18
     fb8:	02 c0       	rjmp	.+4      	; 0xfbe <DIO_Dyn_vid_SetPinValue+0xe4>
     fba:	88 0f       	add	r24, r24
     fbc:	99 1f       	adc	r25, r25
     fbe:	0a 94       	dec	r0
     fc0:	e2 f7       	brpl	.-8      	; 0xfba <DIO_Dyn_vid_SetPinValue+0xe0>
     fc2:	84 2b       	or	r24, r20
     fc4:	8c 93       	st	X, r24
     fc6:	77 c0       	rjmp	.+238    	; 0x10b6 <DIO_Dyn_vid_SetPinValue+0x1dc>
						else if( Copy_u8_PinVal==DIO_Dyn_u8_FALSE )
     fc8:	8b 81       	ldd	r24, Y+3	; 0x03
     fca:	88 23       	and	r24, r24
     fcc:	09 f0       	breq	.+2      	; 0xfd0 <DIO_Dyn_vid_SetPinValue+0xf6>
     fce:	73 c0       	rjmp	.+230    	; 0x10b6 <DIO_Dyn_vid_SetPinValue+0x1dc>
							CLEAR_BIT(PORTB,Copy_u8_PinNum);
     fd0:	a8 e3       	ldi	r26, 0x38	; 56
     fd2:	b0 e0       	ldi	r27, 0x00	; 0
     fd4:	e8 e3       	ldi	r30, 0x38	; 56
     fd6:	f0 e0       	ldi	r31, 0x00	; 0
     fd8:	80 81       	ld	r24, Z
     fda:	48 2f       	mov	r20, r24
     fdc:	8a 81       	ldd	r24, Y+2	; 0x02
     fde:	28 2f       	mov	r18, r24
     fe0:	30 e0       	ldi	r19, 0x00	; 0
     fe2:	81 e0       	ldi	r24, 0x01	; 1
     fe4:	90 e0       	ldi	r25, 0x00	; 0
     fe6:	02 2e       	mov	r0, r18
     fe8:	02 c0       	rjmp	.+4      	; 0xfee <DIO_Dyn_vid_SetPinValue+0x114>
     fea:	88 0f       	add	r24, r24
     fec:	99 1f       	adc	r25, r25
     fee:	0a 94       	dec	r0
     ff0:	e2 f7       	brpl	.-8      	; 0xfea <DIO_Dyn_vid_SetPinValue+0x110>
     ff2:	80 95       	com	r24
     ff4:	84 23       	and	r24, r20
     ff6:	8c 93       	st	X, r24
     ff8:	5e c0       	rjmp	.+188    	; 0x10b6 <DIO_Dyn_vid_SetPinValue+0x1dc>
					break;
				case DIO_Dyn_u8_PORTC:
						if( Copy_u8_PinVal==DIO_Dyn_u8_TRUE)
     ffa:	8b 81       	ldd	r24, Y+3	; 0x03
     ffc:	81 30       	cpi	r24, 0x01	; 1
     ffe:	a1 f4       	brne	.+40     	; 0x1028 <DIO_Dyn_vid_SetPinValue+0x14e>
							SET_BIT(PORTC,Copy_u8_PinNum);
    1000:	a5 e3       	ldi	r26, 0x35	; 53
    1002:	b0 e0       	ldi	r27, 0x00	; 0
    1004:	e5 e3       	ldi	r30, 0x35	; 53
    1006:	f0 e0       	ldi	r31, 0x00	; 0
    1008:	80 81       	ld	r24, Z
    100a:	48 2f       	mov	r20, r24
    100c:	8a 81       	ldd	r24, Y+2	; 0x02
    100e:	28 2f       	mov	r18, r24
    1010:	30 e0       	ldi	r19, 0x00	; 0
    1012:	81 e0       	ldi	r24, 0x01	; 1
    1014:	90 e0       	ldi	r25, 0x00	; 0
    1016:	02 2e       	mov	r0, r18
    1018:	02 c0       	rjmp	.+4      	; 0x101e <DIO_Dyn_vid_SetPinValue+0x144>
    101a:	88 0f       	add	r24, r24
    101c:	99 1f       	adc	r25, r25
    101e:	0a 94       	dec	r0
    1020:	e2 f7       	brpl	.-8      	; 0x101a <DIO_Dyn_vid_SetPinValue+0x140>
    1022:	84 2b       	or	r24, r20
    1024:	8c 93       	st	X, r24
    1026:	47 c0       	rjmp	.+142    	; 0x10b6 <DIO_Dyn_vid_SetPinValue+0x1dc>
						else if( Copy_u8_PinVal==DIO_Dyn_u8_FALSE )
    1028:	8b 81       	ldd	r24, Y+3	; 0x03
    102a:	88 23       	and	r24, r24
    102c:	09 f0       	breq	.+2      	; 0x1030 <DIO_Dyn_vid_SetPinValue+0x156>
    102e:	43 c0       	rjmp	.+134    	; 0x10b6 <DIO_Dyn_vid_SetPinValue+0x1dc>
							CLEAR_BIT(PORTC,Copy_u8_PinNum);
    1030:	a5 e3       	ldi	r26, 0x35	; 53
    1032:	b0 e0       	ldi	r27, 0x00	; 0
    1034:	e5 e3       	ldi	r30, 0x35	; 53
    1036:	f0 e0       	ldi	r31, 0x00	; 0
    1038:	80 81       	ld	r24, Z
    103a:	48 2f       	mov	r20, r24
    103c:	8a 81       	ldd	r24, Y+2	; 0x02
    103e:	28 2f       	mov	r18, r24
    1040:	30 e0       	ldi	r19, 0x00	; 0
    1042:	81 e0       	ldi	r24, 0x01	; 1
    1044:	90 e0       	ldi	r25, 0x00	; 0
    1046:	02 2e       	mov	r0, r18
    1048:	02 c0       	rjmp	.+4      	; 0x104e <DIO_Dyn_vid_SetPinValue+0x174>
    104a:	88 0f       	add	r24, r24
    104c:	99 1f       	adc	r25, r25
    104e:	0a 94       	dec	r0
    1050:	e2 f7       	brpl	.-8      	; 0x104a <DIO_Dyn_vid_SetPinValue+0x170>
    1052:	80 95       	com	r24
    1054:	84 23       	and	r24, r20
    1056:	8c 93       	st	X, r24
    1058:	2e c0       	rjmp	.+92     	; 0x10b6 <DIO_Dyn_vid_SetPinValue+0x1dc>
					break;
				case DIO_Dyn_u8_PORTD:
						if( Copy_u8_PinVal==DIO_Dyn_u8_TRUE )
    105a:	8b 81       	ldd	r24, Y+3	; 0x03
    105c:	81 30       	cpi	r24, 0x01	; 1
    105e:	a1 f4       	brne	.+40     	; 0x1088 <DIO_Dyn_vid_SetPinValue+0x1ae>
							SET_BIT(PORTD,Copy_u8_PinNum);
    1060:	a2 e3       	ldi	r26, 0x32	; 50
    1062:	b0 e0       	ldi	r27, 0x00	; 0
    1064:	e2 e3       	ldi	r30, 0x32	; 50
    1066:	f0 e0       	ldi	r31, 0x00	; 0
    1068:	80 81       	ld	r24, Z
    106a:	48 2f       	mov	r20, r24
    106c:	8a 81       	ldd	r24, Y+2	; 0x02
    106e:	28 2f       	mov	r18, r24
    1070:	30 e0       	ldi	r19, 0x00	; 0
    1072:	81 e0       	ldi	r24, 0x01	; 1
    1074:	90 e0       	ldi	r25, 0x00	; 0
    1076:	02 2e       	mov	r0, r18
    1078:	02 c0       	rjmp	.+4      	; 0x107e <DIO_Dyn_vid_SetPinValue+0x1a4>
    107a:	88 0f       	add	r24, r24
    107c:	99 1f       	adc	r25, r25
    107e:	0a 94       	dec	r0
    1080:	e2 f7       	brpl	.-8      	; 0x107a <DIO_Dyn_vid_SetPinValue+0x1a0>
    1082:	84 2b       	or	r24, r20
    1084:	8c 93       	st	X, r24
    1086:	17 c0       	rjmp	.+46     	; 0x10b6 <DIO_Dyn_vid_SetPinValue+0x1dc>
						else if( Copy_u8_PinVal==DIO_Dyn_u8_FALSE	 )
    1088:	8b 81       	ldd	r24, Y+3	; 0x03
    108a:	88 23       	and	r24, r24
    108c:	a1 f4       	brne	.+40     	; 0x10b6 <DIO_Dyn_vid_SetPinValue+0x1dc>
							CLEAR_BIT(PORTD,Copy_u8_PinNum);
    108e:	a2 e3       	ldi	r26, 0x32	; 50
    1090:	b0 e0       	ldi	r27, 0x00	; 0
    1092:	e2 e3       	ldi	r30, 0x32	; 50
    1094:	f0 e0       	ldi	r31, 0x00	; 0
    1096:	80 81       	ld	r24, Z
    1098:	48 2f       	mov	r20, r24
    109a:	8a 81       	ldd	r24, Y+2	; 0x02
    109c:	28 2f       	mov	r18, r24
    109e:	30 e0       	ldi	r19, 0x00	; 0
    10a0:	81 e0       	ldi	r24, 0x01	; 1
    10a2:	90 e0       	ldi	r25, 0x00	; 0
    10a4:	02 2e       	mov	r0, r18
    10a6:	02 c0       	rjmp	.+4      	; 0x10ac <DIO_Dyn_vid_SetPinValue+0x1d2>
    10a8:	88 0f       	add	r24, r24
    10aa:	99 1f       	adc	r25, r25
    10ac:	0a 94       	dec	r0
    10ae:	e2 f7       	brpl	.-8      	; 0x10a8 <DIO_Dyn_vid_SetPinValue+0x1ce>
    10b0:	80 95       	com	r24
    10b2:	84 23       	and	r24, r20
    10b4:	8c 93       	st	X, r24
					break;
			}
	}
    10b6:	0f 90       	pop	r0
    10b8:	0f 90       	pop	r0
    10ba:	0f 90       	pop	r0
    10bc:	0f 90       	pop	r0
    10be:	0f 90       	pop	r0
    10c0:	cf 91       	pop	r28
    10c2:	df 91       	pop	r29
    10c4:	08 95       	ret

000010c6 <DIO_Dyn_vid_SetPinDir>:
void DIO_Dyn_vid_SetPinDir(u8 Copy_u8_PortNum, u8 Copy_u8_PinNum,u8 Copy_u8_PinDir ){
    10c6:	df 93       	push	r29
    10c8:	cf 93       	push	r28
    10ca:	00 d0       	rcall	.+0      	; 0x10cc <DIO_Dyn_vid_SetPinDir+0x6>
    10cc:	00 d0       	rcall	.+0      	; 0x10ce <DIO_Dyn_vid_SetPinDir+0x8>
    10ce:	0f 92       	push	r0
    10d0:	cd b7       	in	r28, 0x3d	; 61
    10d2:	de b7       	in	r29, 0x3e	; 62
    10d4:	89 83       	std	Y+1, r24	; 0x01
    10d6:	6a 83       	std	Y+2, r22	; 0x02
    10d8:	4b 83       	std	Y+3, r20	; 0x03
	if(Copy_u8_PinNum>=DIO_Dyn_u8_PORT_START&&Copy_u8_PinNum<=DIO_Dyn_u8_PORT_END )
    10da:	8a 81       	ldd	r24, Y+2	; 0x02
    10dc:	88 30       	cpi	r24, 0x08	; 8
    10de:	08 f0       	brcs	.+2      	; 0x10e2 <DIO_Dyn_vid_SetPinDir+0x1c>
    10e0:	d1 c0       	rjmp	.+418    	; 0x1284 <DIO_Dyn_vid_SetPinDir+0x1be>
		switch(Copy_u8_PortNum){
    10e2:	89 81       	ldd	r24, Y+1	; 0x01
    10e4:	28 2f       	mov	r18, r24
    10e6:	30 e0       	ldi	r19, 0x00	; 0
    10e8:	3d 83       	std	Y+5, r19	; 0x05
    10ea:	2c 83       	std	Y+4, r18	; 0x04
    10ec:	8c 81       	ldd	r24, Y+4	; 0x04
    10ee:	9d 81       	ldd	r25, Y+5	; 0x05
    10f0:	81 30       	cpi	r24, 0x01	; 1
    10f2:	91 05       	cpc	r25, r1
    10f4:	09 f4       	brne	.+2      	; 0x10f8 <DIO_Dyn_vid_SetPinDir+0x32>
    10f6:	43 c0       	rjmp	.+134    	; 0x117e <DIO_Dyn_vid_SetPinDir+0xb8>
    10f8:	2c 81       	ldd	r18, Y+4	; 0x04
    10fa:	3d 81       	ldd	r19, Y+5	; 0x05
    10fc:	22 30       	cpi	r18, 0x02	; 2
    10fe:	31 05       	cpc	r19, r1
    1100:	2c f4       	brge	.+10     	; 0x110c <DIO_Dyn_vid_SetPinDir+0x46>
    1102:	8c 81       	ldd	r24, Y+4	; 0x04
    1104:	9d 81       	ldd	r25, Y+5	; 0x05
    1106:	00 97       	sbiw	r24, 0x00	; 0
    1108:	71 f0       	breq	.+28     	; 0x1126 <DIO_Dyn_vid_SetPinDir+0x60>
    110a:	bc c0       	rjmp	.+376    	; 0x1284 <DIO_Dyn_vid_SetPinDir+0x1be>
    110c:	2c 81       	ldd	r18, Y+4	; 0x04
    110e:	3d 81       	ldd	r19, Y+5	; 0x05
    1110:	22 30       	cpi	r18, 0x02	; 2
    1112:	31 05       	cpc	r19, r1
    1114:	09 f4       	brne	.+2      	; 0x1118 <DIO_Dyn_vid_SetPinDir+0x52>
    1116:	5f c0       	rjmp	.+190    	; 0x11d6 <DIO_Dyn_vid_SetPinDir+0x110>
    1118:	8c 81       	ldd	r24, Y+4	; 0x04
    111a:	9d 81       	ldd	r25, Y+5	; 0x05
    111c:	83 30       	cpi	r24, 0x03	; 3
    111e:	91 05       	cpc	r25, r1
    1120:	09 f4       	brne	.+2      	; 0x1124 <DIO_Dyn_vid_SetPinDir+0x5e>
    1122:	85 c0       	rjmp	.+266    	; 0x122e <DIO_Dyn_vid_SetPinDir+0x168>
    1124:	af c0       	rjmp	.+350    	; 0x1284 <DIO_Dyn_vid_SetPinDir+0x1be>
				case DIO_Dyn_u8_PORTA:
						if(Copy_u8_PinDir)
    1126:	8b 81       	ldd	r24, Y+3	; 0x03
    1128:	88 23       	and	r24, r24
    112a:	a1 f0       	breq	.+40     	; 0x1154 <DIO_Dyn_vid_SetPinDir+0x8e>
							SET_BIT(DDRA,Copy_u8_PinNum);
    112c:	aa e3       	ldi	r26, 0x3A	; 58
    112e:	b0 e0       	ldi	r27, 0x00	; 0
    1130:	ea e3       	ldi	r30, 0x3A	; 58
    1132:	f0 e0       	ldi	r31, 0x00	; 0
    1134:	80 81       	ld	r24, Z
    1136:	48 2f       	mov	r20, r24
    1138:	8a 81       	ldd	r24, Y+2	; 0x02
    113a:	28 2f       	mov	r18, r24
    113c:	30 e0       	ldi	r19, 0x00	; 0
    113e:	81 e0       	ldi	r24, 0x01	; 1
    1140:	90 e0       	ldi	r25, 0x00	; 0
    1142:	02 2e       	mov	r0, r18
    1144:	02 c0       	rjmp	.+4      	; 0x114a <DIO_Dyn_vid_SetPinDir+0x84>
    1146:	88 0f       	add	r24, r24
    1148:	99 1f       	adc	r25, r25
    114a:	0a 94       	dec	r0
    114c:	e2 f7       	brpl	.-8      	; 0x1146 <DIO_Dyn_vid_SetPinDir+0x80>
    114e:	84 2b       	or	r24, r20
    1150:	8c 93       	st	X, r24
    1152:	98 c0       	rjmp	.+304    	; 0x1284 <DIO_Dyn_vid_SetPinDir+0x1be>
						else
							CLEAR_BIT(DDRA,Copy_u8_PinNum);
    1154:	aa e3       	ldi	r26, 0x3A	; 58
    1156:	b0 e0       	ldi	r27, 0x00	; 0
    1158:	ea e3       	ldi	r30, 0x3A	; 58
    115a:	f0 e0       	ldi	r31, 0x00	; 0
    115c:	80 81       	ld	r24, Z
    115e:	48 2f       	mov	r20, r24
    1160:	8a 81       	ldd	r24, Y+2	; 0x02
    1162:	28 2f       	mov	r18, r24
    1164:	30 e0       	ldi	r19, 0x00	; 0
    1166:	81 e0       	ldi	r24, 0x01	; 1
    1168:	90 e0       	ldi	r25, 0x00	; 0
    116a:	02 2e       	mov	r0, r18
    116c:	02 c0       	rjmp	.+4      	; 0x1172 <DIO_Dyn_vid_SetPinDir+0xac>
    116e:	88 0f       	add	r24, r24
    1170:	99 1f       	adc	r25, r25
    1172:	0a 94       	dec	r0
    1174:	e2 f7       	brpl	.-8      	; 0x116e <DIO_Dyn_vid_SetPinDir+0xa8>
    1176:	80 95       	com	r24
    1178:	84 23       	and	r24, r20
    117a:	8c 93       	st	X, r24
    117c:	83 c0       	rjmp	.+262    	; 0x1284 <DIO_Dyn_vid_SetPinDir+0x1be>
					break;
					case DIO_Dyn_u8_PORTB:
						if(Copy_u8_PinDir)
    117e:	8b 81       	ldd	r24, Y+3	; 0x03
    1180:	88 23       	and	r24, r24
    1182:	a1 f0       	breq	.+40     	; 0x11ac <DIO_Dyn_vid_SetPinDir+0xe6>
							SET_BIT(DDRB,Copy_u8_PinNum);
    1184:	a7 e3       	ldi	r26, 0x37	; 55
    1186:	b0 e0       	ldi	r27, 0x00	; 0
    1188:	e7 e3       	ldi	r30, 0x37	; 55
    118a:	f0 e0       	ldi	r31, 0x00	; 0
    118c:	80 81       	ld	r24, Z
    118e:	48 2f       	mov	r20, r24
    1190:	8a 81       	ldd	r24, Y+2	; 0x02
    1192:	28 2f       	mov	r18, r24
    1194:	30 e0       	ldi	r19, 0x00	; 0
    1196:	81 e0       	ldi	r24, 0x01	; 1
    1198:	90 e0       	ldi	r25, 0x00	; 0
    119a:	02 2e       	mov	r0, r18
    119c:	02 c0       	rjmp	.+4      	; 0x11a2 <DIO_Dyn_vid_SetPinDir+0xdc>
    119e:	88 0f       	add	r24, r24
    11a0:	99 1f       	adc	r25, r25
    11a2:	0a 94       	dec	r0
    11a4:	e2 f7       	brpl	.-8      	; 0x119e <DIO_Dyn_vid_SetPinDir+0xd8>
    11a6:	84 2b       	or	r24, r20
    11a8:	8c 93       	st	X, r24
    11aa:	6c c0       	rjmp	.+216    	; 0x1284 <DIO_Dyn_vid_SetPinDir+0x1be>
						else
							CLEAR_BIT(DDRB,Copy_u8_PinNum);
    11ac:	a7 e3       	ldi	r26, 0x37	; 55
    11ae:	b0 e0       	ldi	r27, 0x00	; 0
    11b0:	e7 e3       	ldi	r30, 0x37	; 55
    11b2:	f0 e0       	ldi	r31, 0x00	; 0
    11b4:	80 81       	ld	r24, Z
    11b6:	48 2f       	mov	r20, r24
    11b8:	8a 81       	ldd	r24, Y+2	; 0x02
    11ba:	28 2f       	mov	r18, r24
    11bc:	30 e0       	ldi	r19, 0x00	; 0
    11be:	81 e0       	ldi	r24, 0x01	; 1
    11c0:	90 e0       	ldi	r25, 0x00	; 0
    11c2:	02 2e       	mov	r0, r18
    11c4:	02 c0       	rjmp	.+4      	; 0x11ca <DIO_Dyn_vid_SetPinDir+0x104>
    11c6:	88 0f       	add	r24, r24
    11c8:	99 1f       	adc	r25, r25
    11ca:	0a 94       	dec	r0
    11cc:	e2 f7       	brpl	.-8      	; 0x11c6 <DIO_Dyn_vid_SetPinDir+0x100>
    11ce:	80 95       	com	r24
    11d0:	84 23       	and	r24, r20
    11d2:	8c 93       	st	X, r24
    11d4:	57 c0       	rjmp	.+174    	; 0x1284 <DIO_Dyn_vid_SetPinDir+0x1be>
					break;
					case DIO_Dyn_u8_PORTC:
						if(Copy_u8_PinDir)
    11d6:	8b 81       	ldd	r24, Y+3	; 0x03
    11d8:	88 23       	and	r24, r24
    11da:	a1 f0       	breq	.+40     	; 0x1204 <DIO_Dyn_vid_SetPinDir+0x13e>
							SET_BIT(DDRC,Copy_u8_PinNum);
    11dc:	a4 e3       	ldi	r26, 0x34	; 52
    11de:	b0 e0       	ldi	r27, 0x00	; 0
    11e0:	e4 e3       	ldi	r30, 0x34	; 52
    11e2:	f0 e0       	ldi	r31, 0x00	; 0
    11e4:	80 81       	ld	r24, Z
    11e6:	48 2f       	mov	r20, r24
    11e8:	8a 81       	ldd	r24, Y+2	; 0x02
    11ea:	28 2f       	mov	r18, r24
    11ec:	30 e0       	ldi	r19, 0x00	; 0
    11ee:	81 e0       	ldi	r24, 0x01	; 1
    11f0:	90 e0       	ldi	r25, 0x00	; 0
    11f2:	02 2e       	mov	r0, r18
    11f4:	02 c0       	rjmp	.+4      	; 0x11fa <DIO_Dyn_vid_SetPinDir+0x134>
    11f6:	88 0f       	add	r24, r24
    11f8:	99 1f       	adc	r25, r25
    11fa:	0a 94       	dec	r0
    11fc:	e2 f7       	brpl	.-8      	; 0x11f6 <DIO_Dyn_vid_SetPinDir+0x130>
    11fe:	84 2b       	or	r24, r20
    1200:	8c 93       	st	X, r24
    1202:	40 c0       	rjmp	.+128    	; 0x1284 <DIO_Dyn_vid_SetPinDir+0x1be>
						else
							CLEAR_BIT(DDRC,Copy_u8_PinNum);
    1204:	a4 e3       	ldi	r26, 0x34	; 52
    1206:	b0 e0       	ldi	r27, 0x00	; 0
    1208:	e4 e3       	ldi	r30, 0x34	; 52
    120a:	f0 e0       	ldi	r31, 0x00	; 0
    120c:	80 81       	ld	r24, Z
    120e:	48 2f       	mov	r20, r24
    1210:	8a 81       	ldd	r24, Y+2	; 0x02
    1212:	28 2f       	mov	r18, r24
    1214:	30 e0       	ldi	r19, 0x00	; 0
    1216:	81 e0       	ldi	r24, 0x01	; 1
    1218:	90 e0       	ldi	r25, 0x00	; 0
    121a:	02 2e       	mov	r0, r18
    121c:	02 c0       	rjmp	.+4      	; 0x1222 <DIO_Dyn_vid_SetPinDir+0x15c>
    121e:	88 0f       	add	r24, r24
    1220:	99 1f       	adc	r25, r25
    1222:	0a 94       	dec	r0
    1224:	e2 f7       	brpl	.-8      	; 0x121e <DIO_Dyn_vid_SetPinDir+0x158>
    1226:	80 95       	com	r24
    1228:	84 23       	and	r24, r20
    122a:	8c 93       	st	X, r24
    122c:	2b c0       	rjmp	.+86     	; 0x1284 <DIO_Dyn_vid_SetPinDir+0x1be>
					break;
					case DIO_Dyn_u8_PORTD:
						if(Copy_u8_PinDir)
    122e:	8b 81       	ldd	r24, Y+3	; 0x03
    1230:	88 23       	and	r24, r24
    1232:	a1 f0       	breq	.+40     	; 0x125c <DIO_Dyn_vid_SetPinDir+0x196>
							SET_BIT(DDRD,Copy_u8_PinNum);
    1234:	a1 e3       	ldi	r26, 0x31	; 49
    1236:	b0 e0       	ldi	r27, 0x00	; 0
    1238:	e1 e3       	ldi	r30, 0x31	; 49
    123a:	f0 e0       	ldi	r31, 0x00	; 0
    123c:	80 81       	ld	r24, Z
    123e:	48 2f       	mov	r20, r24
    1240:	8a 81       	ldd	r24, Y+2	; 0x02
    1242:	28 2f       	mov	r18, r24
    1244:	30 e0       	ldi	r19, 0x00	; 0
    1246:	81 e0       	ldi	r24, 0x01	; 1
    1248:	90 e0       	ldi	r25, 0x00	; 0
    124a:	02 2e       	mov	r0, r18
    124c:	02 c0       	rjmp	.+4      	; 0x1252 <DIO_Dyn_vid_SetPinDir+0x18c>
    124e:	88 0f       	add	r24, r24
    1250:	99 1f       	adc	r25, r25
    1252:	0a 94       	dec	r0
    1254:	e2 f7       	brpl	.-8      	; 0x124e <DIO_Dyn_vid_SetPinDir+0x188>
    1256:	84 2b       	or	r24, r20
    1258:	8c 93       	st	X, r24
    125a:	14 c0       	rjmp	.+40     	; 0x1284 <DIO_Dyn_vid_SetPinDir+0x1be>
						else
							CLEAR_BIT(DDRD,Copy_u8_PinNum);
    125c:	a1 e3       	ldi	r26, 0x31	; 49
    125e:	b0 e0       	ldi	r27, 0x00	; 0
    1260:	e1 e3       	ldi	r30, 0x31	; 49
    1262:	f0 e0       	ldi	r31, 0x00	; 0
    1264:	80 81       	ld	r24, Z
    1266:	48 2f       	mov	r20, r24
    1268:	8a 81       	ldd	r24, Y+2	; 0x02
    126a:	28 2f       	mov	r18, r24
    126c:	30 e0       	ldi	r19, 0x00	; 0
    126e:	81 e0       	ldi	r24, 0x01	; 1
    1270:	90 e0       	ldi	r25, 0x00	; 0
    1272:	02 2e       	mov	r0, r18
    1274:	02 c0       	rjmp	.+4      	; 0x127a <DIO_Dyn_vid_SetPinDir+0x1b4>
    1276:	88 0f       	add	r24, r24
    1278:	99 1f       	adc	r25, r25
    127a:	0a 94       	dec	r0
    127c:	e2 f7       	brpl	.-8      	; 0x1276 <DIO_Dyn_vid_SetPinDir+0x1b0>
    127e:	80 95       	com	r24
    1280:	84 23       	and	r24, r20
    1282:	8c 93       	st	X, r24
					break;
			}
	}
    1284:	0f 90       	pop	r0
    1286:	0f 90       	pop	r0
    1288:	0f 90       	pop	r0
    128a:	0f 90       	pop	r0
    128c:	0f 90       	pop	r0
    128e:	cf 91       	pop	r28
    1290:	df 91       	pop	r29
    1292:	08 95       	ret

00001294 <DIO_Dyn_vid_SetPortDir>:
void DIO_Dyn_vid_SetPortDir(u8 Copy_u8_PortNum, u8 Copy_u8_PortValue ){
    1294:	df 93       	push	r29
    1296:	cf 93       	push	r28
    1298:	00 d0       	rcall	.+0      	; 0x129a <DIO_Dyn_vid_SetPortDir+0x6>
    129a:	00 d0       	rcall	.+0      	; 0x129c <DIO_Dyn_vid_SetPortDir+0x8>
    129c:	cd b7       	in	r28, 0x3d	; 61
    129e:	de b7       	in	r29, 0x3e	; 62
    12a0:	89 83       	std	Y+1, r24	; 0x01
    12a2:	6a 83       	std	Y+2, r22	; 0x02
	switch(Copy_u8_PortNum){
    12a4:	89 81       	ldd	r24, Y+1	; 0x01
    12a6:	28 2f       	mov	r18, r24
    12a8:	30 e0       	ldi	r19, 0x00	; 0
    12aa:	3c 83       	std	Y+4, r19	; 0x04
    12ac:	2b 83       	std	Y+3, r18	; 0x03
    12ae:	8b 81       	ldd	r24, Y+3	; 0x03
    12b0:	9c 81       	ldd	r25, Y+4	; 0x04
    12b2:	81 30       	cpi	r24, 0x01	; 1
    12b4:	91 05       	cpc	r25, r1
    12b6:	d1 f0       	breq	.+52     	; 0x12ec <DIO_Dyn_vid_SetPortDir+0x58>
    12b8:	2b 81       	ldd	r18, Y+3	; 0x03
    12ba:	3c 81       	ldd	r19, Y+4	; 0x04
    12bc:	22 30       	cpi	r18, 0x02	; 2
    12be:	31 05       	cpc	r19, r1
    12c0:	2c f4       	brge	.+10     	; 0x12cc <DIO_Dyn_vid_SetPortDir+0x38>
    12c2:	8b 81       	ldd	r24, Y+3	; 0x03
    12c4:	9c 81       	ldd	r25, Y+4	; 0x04
    12c6:	00 97       	sbiw	r24, 0x00	; 0
    12c8:	61 f0       	breq	.+24     	; 0x12e2 <DIO_Dyn_vid_SetPortDir+0x4e>
    12ca:	1e c0       	rjmp	.+60     	; 0x1308 <DIO_Dyn_vid_SetPortDir+0x74>
    12cc:	2b 81       	ldd	r18, Y+3	; 0x03
    12ce:	3c 81       	ldd	r19, Y+4	; 0x04
    12d0:	22 30       	cpi	r18, 0x02	; 2
    12d2:	31 05       	cpc	r19, r1
    12d4:	81 f0       	breq	.+32     	; 0x12f6 <DIO_Dyn_vid_SetPortDir+0x62>
    12d6:	8b 81       	ldd	r24, Y+3	; 0x03
    12d8:	9c 81       	ldd	r25, Y+4	; 0x04
    12da:	83 30       	cpi	r24, 0x03	; 3
    12dc:	91 05       	cpc	r25, r1
    12de:	81 f0       	breq	.+32     	; 0x1300 <DIO_Dyn_vid_SetPortDir+0x6c>
    12e0:	13 c0       	rjmp	.+38     	; 0x1308 <DIO_Dyn_vid_SetPortDir+0x74>
		case DIO_Dyn_u8_PORTA:
			DDRA=Copy_u8_PortValue;
    12e2:	ea e3       	ldi	r30, 0x3A	; 58
    12e4:	f0 e0       	ldi	r31, 0x00	; 0
    12e6:	8a 81       	ldd	r24, Y+2	; 0x02
    12e8:	80 83       	st	Z, r24
    12ea:	0e c0       	rjmp	.+28     	; 0x1308 <DIO_Dyn_vid_SetPortDir+0x74>
			break;
			case DIO_Dyn_u8_PORTB:
			DDRB=Copy_u8_PortValue;
    12ec:	e7 e3       	ldi	r30, 0x37	; 55
    12ee:	f0 e0       	ldi	r31, 0x00	; 0
    12f0:	8a 81       	ldd	r24, Y+2	; 0x02
    12f2:	80 83       	st	Z, r24
    12f4:	09 c0       	rjmp	.+18     	; 0x1308 <DIO_Dyn_vid_SetPortDir+0x74>
			break;
			case DIO_Dyn_u8_PORTC:
			DDRC=Copy_u8_PortValue;
    12f6:	e4 e3       	ldi	r30, 0x34	; 52
    12f8:	f0 e0       	ldi	r31, 0x00	; 0
    12fa:	8a 81       	ldd	r24, Y+2	; 0x02
    12fc:	80 83       	st	Z, r24
    12fe:	04 c0       	rjmp	.+8      	; 0x1308 <DIO_Dyn_vid_SetPortDir+0x74>
			break;
			case DIO_Dyn_u8_PORTD:
			DDRD=Copy_u8_PortValue;
    1300:	e1 e3       	ldi	r30, 0x31	; 49
    1302:	f0 e0       	ldi	r31, 0x00	; 0
    1304:	8a 81       	ldd	r24, Y+2	; 0x02
    1306:	80 83       	st	Z, r24
			break;
	}
}
    1308:	0f 90       	pop	r0
    130a:	0f 90       	pop	r0
    130c:	0f 90       	pop	r0
    130e:	0f 90       	pop	r0
    1310:	cf 91       	pop	r28
    1312:	df 91       	pop	r29
    1314:	08 95       	ret

00001316 <DIO_Dyn_vid_ClearPinValue>:
					SET_BIT(PORTD,Copy_u8_PinNum);
				break;
		}
}
*/
void DIO_Dyn_vid_ClearPinValue(u8 Copy_u8_PortNum, u8 Copy_u8_PinNum ){
    1316:	df 93       	push	r29
    1318:	cf 93       	push	r28
    131a:	00 d0       	rcall	.+0      	; 0x131c <DIO_Dyn_vid_ClearPinValue+0x6>
    131c:	00 d0       	rcall	.+0      	; 0x131e <DIO_Dyn_vid_ClearPinValue+0x8>
    131e:	cd b7       	in	r28, 0x3d	; 61
    1320:	de b7       	in	r29, 0x3e	; 62
    1322:	89 83       	std	Y+1, r24	; 0x01
    1324:	6a 83       	std	Y+2, r22	; 0x02
	if(Copy_u8_PinNum>=DIO_Dyn_u8_PORT_START&&Copy_u8_PinNum<=DIO_Dyn_u8_PORT_END )
    1326:	8a 81       	ldd	r24, Y+2	; 0x02
    1328:	88 30       	cpi	r24, 0x08	; 8
    132a:	08 f0       	brcs	.+2      	; 0x132e <DIO_Dyn_vid_ClearPinValue+0x18>
    132c:	73 c0       	rjmp	.+230    	; 0x1414 <DIO_Dyn_vid_ClearPinValue+0xfe>
	switch(Copy_u8_PortNum){
    132e:	89 81       	ldd	r24, Y+1	; 0x01
    1330:	28 2f       	mov	r18, r24
    1332:	30 e0       	ldi	r19, 0x00	; 0
    1334:	3c 83       	std	Y+4, r19	; 0x04
    1336:	2b 83       	std	Y+3, r18	; 0x03
    1338:	8b 81       	ldd	r24, Y+3	; 0x03
    133a:	9c 81       	ldd	r25, Y+4	; 0x04
    133c:	81 30       	cpi	r24, 0x01	; 1
    133e:	91 05       	cpc	r25, r1
    1340:	59 f1       	breq	.+86     	; 0x1398 <DIO_Dyn_vid_ClearPinValue+0x82>
    1342:	2b 81       	ldd	r18, Y+3	; 0x03
    1344:	3c 81       	ldd	r19, Y+4	; 0x04
    1346:	22 30       	cpi	r18, 0x02	; 2
    1348:	31 05       	cpc	r19, r1
    134a:	2c f4       	brge	.+10     	; 0x1356 <DIO_Dyn_vid_ClearPinValue+0x40>
    134c:	8b 81       	ldd	r24, Y+3	; 0x03
    134e:	9c 81       	ldd	r25, Y+4	; 0x04
    1350:	00 97       	sbiw	r24, 0x00	; 0
    1352:	69 f0       	breq	.+26     	; 0x136e <DIO_Dyn_vid_ClearPinValue+0x58>
    1354:	5f c0       	rjmp	.+190    	; 0x1414 <DIO_Dyn_vid_ClearPinValue+0xfe>
    1356:	2b 81       	ldd	r18, Y+3	; 0x03
    1358:	3c 81       	ldd	r19, Y+4	; 0x04
    135a:	22 30       	cpi	r18, 0x02	; 2
    135c:	31 05       	cpc	r19, r1
    135e:	89 f1       	breq	.+98     	; 0x13c2 <DIO_Dyn_vid_ClearPinValue+0xac>
    1360:	8b 81       	ldd	r24, Y+3	; 0x03
    1362:	9c 81       	ldd	r25, Y+4	; 0x04
    1364:	83 30       	cpi	r24, 0x03	; 3
    1366:	91 05       	cpc	r25, r1
    1368:	09 f4       	brne	.+2      	; 0x136c <DIO_Dyn_vid_ClearPinValue+0x56>
    136a:	40 c0       	rjmp	.+128    	; 0x13ec <DIO_Dyn_vid_ClearPinValue+0xd6>
    136c:	53 c0       	rjmp	.+166    	; 0x1414 <DIO_Dyn_vid_ClearPinValue+0xfe>
			case DIO_Dyn_u8_PORTA:
					CLEAR_BIT(PORTA,Copy_u8_PinNum);
    136e:	ab e3       	ldi	r26, 0x3B	; 59
    1370:	b0 e0       	ldi	r27, 0x00	; 0
    1372:	eb e3       	ldi	r30, 0x3B	; 59
    1374:	f0 e0       	ldi	r31, 0x00	; 0
    1376:	80 81       	ld	r24, Z
    1378:	48 2f       	mov	r20, r24
    137a:	8a 81       	ldd	r24, Y+2	; 0x02
    137c:	28 2f       	mov	r18, r24
    137e:	30 e0       	ldi	r19, 0x00	; 0
    1380:	81 e0       	ldi	r24, 0x01	; 1
    1382:	90 e0       	ldi	r25, 0x00	; 0
    1384:	02 2e       	mov	r0, r18
    1386:	02 c0       	rjmp	.+4      	; 0x138c <DIO_Dyn_vid_ClearPinValue+0x76>
    1388:	88 0f       	add	r24, r24
    138a:	99 1f       	adc	r25, r25
    138c:	0a 94       	dec	r0
    138e:	e2 f7       	brpl	.-8      	; 0x1388 <DIO_Dyn_vid_ClearPinValue+0x72>
    1390:	80 95       	com	r24
    1392:	84 23       	and	r24, r20
    1394:	8c 93       	st	X, r24
    1396:	3e c0       	rjmp	.+124    	; 0x1414 <DIO_Dyn_vid_ClearPinValue+0xfe>
				break;
				case DIO_Dyn_u8_PORTB:
					CLEAR_BIT(PORTB,Copy_u8_PinNum);
    1398:	a8 e3       	ldi	r26, 0x38	; 56
    139a:	b0 e0       	ldi	r27, 0x00	; 0
    139c:	e8 e3       	ldi	r30, 0x38	; 56
    139e:	f0 e0       	ldi	r31, 0x00	; 0
    13a0:	80 81       	ld	r24, Z
    13a2:	48 2f       	mov	r20, r24
    13a4:	8a 81       	ldd	r24, Y+2	; 0x02
    13a6:	28 2f       	mov	r18, r24
    13a8:	30 e0       	ldi	r19, 0x00	; 0
    13aa:	81 e0       	ldi	r24, 0x01	; 1
    13ac:	90 e0       	ldi	r25, 0x00	; 0
    13ae:	02 2e       	mov	r0, r18
    13b0:	02 c0       	rjmp	.+4      	; 0x13b6 <DIO_Dyn_vid_ClearPinValue+0xa0>
    13b2:	88 0f       	add	r24, r24
    13b4:	99 1f       	adc	r25, r25
    13b6:	0a 94       	dec	r0
    13b8:	e2 f7       	brpl	.-8      	; 0x13b2 <DIO_Dyn_vid_ClearPinValue+0x9c>
    13ba:	80 95       	com	r24
    13bc:	84 23       	and	r24, r20
    13be:	8c 93       	st	X, r24
    13c0:	29 c0       	rjmp	.+82     	; 0x1414 <DIO_Dyn_vid_ClearPinValue+0xfe>
				break;
				case DIO_Dyn_u8_PORTC:
					CLEAR_BIT(PORTC,Copy_u8_PinNum);
    13c2:	a5 e3       	ldi	r26, 0x35	; 53
    13c4:	b0 e0       	ldi	r27, 0x00	; 0
    13c6:	e5 e3       	ldi	r30, 0x35	; 53
    13c8:	f0 e0       	ldi	r31, 0x00	; 0
    13ca:	80 81       	ld	r24, Z
    13cc:	48 2f       	mov	r20, r24
    13ce:	8a 81       	ldd	r24, Y+2	; 0x02
    13d0:	28 2f       	mov	r18, r24
    13d2:	30 e0       	ldi	r19, 0x00	; 0
    13d4:	81 e0       	ldi	r24, 0x01	; 1
    13d6:	90 e0       	ldi	r25, 0x00	; 0
    13d8:	02 2e       	mov	r0, r18
    13da:	02 c0       	rjmp	.+4      	; 0x13e0 <DIO_Dyn_vid_ClearPinValue+0xca>
    13dc:	88 0f       	add	r24, r24
    13de:	99 1f       	adc	r25, r25
    13e0:	0a 94       	dec	r0
    13e2:	e2 f7       	brpl	.-8      	; 0x13dc <DIO_Dyn_vid_ClearPinValue+0xc6>
    13e4:	80 95       	com	r24
    13e6:	84 23       	and	r24, r20
    13e8:	8c 93       	st	X, r24
    13ea:	14 c0       	rjmp	.+40     	; 0x1414 <DIO_Dyn_vid_ClearPinValue+0xfe>
				break;
				case DIO_Dyn_u8_PORTD:
					CLEAR_BIT(PORTD,Copy_u8_PinNum);
    13ec:	a2 e3       	ldi	r26, 0x32	; 50
    13ee:	b0 e0       	ldi	r27, 0x00	; 0
    13f0:	e2 e3       	ldi	r30, 0x32	; 50
    13f2:	f0 e0       	ldi	r31, 0x00	; 0
    13f4:	80 81       	ld	r24, Z
    13f6:	48 2f       	mov	r20, r24
    13f8:	8a 81       	ldd	r24, Y+2	; 0x02
    13fa:	28 2f       	mov	r18, r24
    13fc:	30 e0       	ldi	r19, 0x00	; 0
    13fe:	81 e0       	ldi	r24, 0x01	; 1
    1400:	90 e0       	ldi	r25, 0x00	; 0
    1402:	02 2e       	mov	r0, r18
    1404:	02 c0       	rjmp	.+4      	; 0x140a <DIO_Dyn_vid_ClearPinValue+0xf4>
    1406:	88 0f       	add	r24, r24
    1408:	99 1f       	adc	r25, r25
    140a:	0a 94       	dec	r0
    140c:	e2 f7       	brpl	.-8      	; 0x1406 <DIO_Dyn_vid_ClearPinValue+0xf0>
    140e:	80 95       	com	r24
    1410:	84 23       	and	r24, r20
    1412:	8c 93       	st	X, r24
				break;
		}
}
    1414:	0f 90       	pop	r0
    1416:	0f 90       	pop	r0
    1418:	0f 90       	pop	r0
    141a:	0f 90       	pop	r0
    141c:	cf 91       	pop	r28
    141e:	df 91       	pop	r29
    1420:	08 95       	ret

00001422 <DIO_Dyn_u8_GetPinValue>:
u8 DIO_Dyn_u8_GetPinValue(u8 Copy_u8_PortNum, u8 Copy_u8_PinNum ){
    1422:	df 93       	push	r29
    1424:	cf 93       	push	r28
    1426:	00 d0       	rcall	.+0      	; 0x1428 <DIO_Dyn_u8_GetPinValue+0x6>
    1428:	00 d0       	rcall	.+0      	; 0x142a <DIO_Dyn_u8_GetPinValue+0x8>
    142a:	00 d0       	rcall	.+0      	; 0x142c <DIO_Dyn_u8_GetPinValue+0xa>
    142c:	cd b7       	in	r28, 0x3d	; 61
    142e:	de b7       	in	r29, 0x3e	; 62
    1430:	89 83       	std	Y+1, r24	; 0x01
    1432:	6a 83       	std	Y+2, r22	; 0x02
	if(Copy_u8_PinNum>=DIO_Dyn_u8_PORT_START&&Copy_u8_PinNum<=DIO_Dyn_u8_PORT_END )
    1434:	8a 81       	ldd	r24, Y+2	; 0x02
    1436:	88 30       	cpi	r24, 0x08	; 8
    1438:	08 f0       	brcs	.+2      	; 0x143c <DIO_Dyn_u8_GetPinValue+0x1a>
    143a:	81 c0       	rjmp	.+258    	; 0x153e <DIO_Dyn_u8_GetPinValue+0x11c>
	switch(Copy_u8_PortNum){
    143c:	89 81       	ldd	r24, Y+1	; 0x01
    143e:	28 2f       	mov	r18, r24
    1440:	30 e0       	ldi	r19, 0x00	; 0
    1442:	3d 83       	std	Y+5, r19	; 0x05
    1444:	2c 83       	std	Y+4, r18	; 0x04
    1446:	4c 81       	ldd	r20, Y+4	; 0x04
    1448:	5d 81       	ldd	r21, Y+5	; 0x05
    144a:	41 30       	cpi	r20, 0x01	; 1
    144c:	51 05       	cpc	r21, r1
    144e:	79 f1       	breq	.+94     	; 0x14ae <DIO_Dyn_u8_GetPinValue+0x8c>
    1450:	8c 81       	ldd	r24, Y+4	; 0x04
    1452:	9d 81       	ldd	r25, Y+5	; 0x05
    1454:	82 30       	cpi	r24, 0x02	; 2
    1456:	91 05       	cpc	r25, r1
    1458:	34 f4       	brge	.+12     	; 0x1466 <DIO_Dyn_u8_GetPinValue+0x44>
    145a:	2c 81       	ldd	r18, Y+4	; 0x04
    145c:	3d 81       	ldd	r19, Y+5	; 0x05
    145e:	21 15       	cp	r18, r1
    1460:	31 05       	cpc	r19, r1
    1462:	69 f0       	breq	.+26     	; 0x147e <DIO_Dyn_u8_GetPinValue+0x5c>
    1464:	6c c0       	rjmp	.+216    	; 0x153e <DIO_Dyn_u8_GetPinValue+0x11c>
    1466:	4c 81       	ldd	r20, Y+4	; 0x04
    1468:	5d 81       	ldd	r21, Y+5	; 0x05
    146a:	42 30       	cpi	r20, 0x02	; 2
    146c:	51 05       	cpc	r21, r1
    146e:	b9 f1       	breq	.+110    	; 0x14de <DIO_Dyn_u8_GetPinValue+0xbc>
    1470:	8c 81       	ldd	r24, Y+4	; 0x04
    1472:	9d 81       	ldd	r25, Y+5	; 0x05
    1474:	83 30       	cpi	r24, 0x03	; 3
    1476:	91 05       	cpc	r25, r1
    1478:	09 f4       	brne	.+2      	; 0x147c <DIO_Dyn_u8_GetPinValue+0x5a>
    147a:	49 c0       	rjmp	.+146    	; 0x150e <DIO_Dyn_u8_GetPinValue+0xec>
    147c:	60 c0       	rjmp	.+192    	; 0x153e <DIO_Dyn_u8_GetPinValue+0x11c>
			case DIO_Dyn_u8_PORTA:
				if( GET_BIT(PINA,Copy_u8_PinNum ) )
    147e:	e9 e3       	ldi	r30, 0x39	; 57
    1480:	f0 e0       	ldi	r31, 0x00	; 0
    1482:	80 81       	ld	r24, Z
    1484:	28 2f       	mov	r18, r24
    1486:	30 e0       	ldi	r19, 0x00	; 0
    1488:	8a 81       	ldd	r24, Y+2	; 0x02
    148a:	88 2f       	mov	r24, r24
    148c:	90 e0       	ldi	r25, 0x00	; 0
    148e:	a9 01       	movw	r20, r18
    1490:	02 c0       	rjmp	.+4      	; 0x1496 <DIO_Dyn_u8_GetPinValue+0x74>
    1492:	55 95       	asr	r21
    1494:	47 95       	ror	r20
    1496:	8a 95       	dec	r24
    1498:	e2 f7       	brpl	.-8      	; 0x1492 <DIO_Dyn_u8_GetPinValue+0x70>
    149a:	ca 01       	movw	r24, r20
    149c:	81 70       	andi	r24, 0x01	; 1
    149e:	90 70       	andi	r25, 0x00	; 0
    14a0:	88 23       	and	r24, r24
    14a2:	19 f0       	breq	.+6      	; 0x14aa <DIO_Dyn_u8_GetPinValue+0x88>
						return	DIO_Dyn_u8_TRUE;
    14a4:	51 e0       	ldi	r21, 0x01	; 1
    14a6:	5b 83       	std	Y+3, r21	; 0x03
    14a8:	4b c0       	rjmp	.+150    	; 0x1540 <DIO_Dyn_u8_GetPinValue+0x11e>
				else
						return DIO_Dyn_u8_FALSE;
    14aa:	1b 82       	std	Y+3, r1	; 0x03
    14ac:	49 c0       	rjmp	.+146    	; 0x1540 <DIO_Dyn_u8_GetPinValue+0x11e>
				break;
			case DIO_Dyn_u8_PORTB:
					if( GET_BIT(PINB,Copy_u8_PinNum ) )
    14ae:	e6 e3       	ldi	r30, 0x36	; 54
    14b0:	f0 e0       	ldi	r31, 0x00	; 0
    14b2:	80 81       	ld	r24, Z
    14b4:	28 2f       	mov	r18, r24
    14b6:	30 e0       	ldi	r19, 0x00	; 0
    14b8:	8a 81       	ldd	r24, Y+2	; 0x02
    14ba:	88 2f       	mov	r24, r24
    14bc:	90 e0       	ldi	r25, 0x00	; 0
    14be:	a9 01       	movw	r20, r18
    14c0:	02 c0       	rjmp	.+4      	; 0x14c6 <DIO_Dyn_u8_GetPinValue+0xa4>
    14c2:	55 95       	asr	r21
    14c4:	47 95       	ror	r20
    14c6:	8a 95       	dec	r24
    14c8:	e2 f7       	brpl	.-8      	; 0x14c2 <DIO_Dyn_u8_GetPinValue+0xa0>
    14ca:	ca 01       	movw	r24, r20
    14cc:	81 70       	andi	r24, 0x01	; 1
    14ce:	90 70       	andi	r25, 0x00	; 0
    14d0:	88 23       	and	r24, r24
    14d2:	19 f0       	breq	.+6      	; 0x14da <DIO_Dyn_u8_GetPinValue+0xb8>
							return	DIO_Dyn_u8_TRUE;
    14d4:	51 e0       	ldi	r21, 0x01	; 1
    14d6:	5b 83       	std	Y+3, r21	; 0x03
    14d8:	33 c0       	rjmp	.+102    	; 0x1540 <DIO_Dyn_u8_GetPinValue+0x11e>
					else
						    return DIO_Dyn_u8_FALSE;
    14da:	1b 82       	std	Y+3, r1	; 0x03
    14dc:	31 c0       	rjmp	.+98     	; 0x1540 <DIO_Dyn_u8_GetPinValue+0x11e>
				break;
			case DIO_Dyn_u8_PORTC:
					if( GET_BIT(PINC,Copy_u8_PinNum ) )
    14de:	e3 e3       	ldi	r30, 0x33	; 51
    14e0:	f0 e0       	ldi	r31, 0x00	; 0
    14e2:	80 81       	ld	r24, Z
    14e4:	28 2f       	mov	r18, r24
    14e6:	30 e0       	ldi	r19, 0x00	; 0
    14e8:	8a 81       	ldd	r24, Y+2	; 0x02
    14ea:	88 2f       	mov	r24, r24
    14ec:	90 e0       	ldi	r25, 0x00	; 0
    14ee:	a9 01       	movw	r20, r18
    14f0:	02 c0       	rjmp	.+4      	; 0x14f6 <DIO_Dyn_u8_GetPinValue+0xd4>
    14f2:	55 95       	asr	r21
    14f4:	47 95       	ror	r20
    14f6:	8a 95       	dec	r24
    14f8:	e2 f7       	brpl	.-8      	; 0x14f2 <DIO_Dyn_u8_GetPinValue+0xd0>
    14fa:	ca 01       	movw	r24, r20
    14fc:	81 70       	andi	r24, 0x01	; 1
    14fe:	90 70       	andi	r25, 0x00	; 0
    1500:	88 23       	and	r24, r24
    1502:	19 f0       	breq	.+6      	; 0x150a <DIO_Dyn_u8_GetPinValue+0xe8>
							return	DIO_Dyn_u8_TRUE;
    1504:	51 e0       	ldi	r21, 0x01	; 1
    1506:	5b 83       	std	Y+3, r21	; 0x03
    1508:	1b c0       	rjmp	.+54     	; 0x1540 <DIO_Dyn_u8_GetPinValue+0x11e>
					else
							return DIO_Dyn_u8_FALSE;
    150a:	1b 82       	std	Y+3, r1	; 0x03
    150c:	19 c0       	rjmp	.+50     	; 0x1540 <DIO_Dyn_u8_GetPinValue+0x11e>
				break;
			case DIO_Dyn_u8_PORTD:
					if( GET_BIT(PIND,Copy_u8_PinNum ) )
    150e:	e0 e3       	ldi	r30, 0x30	; 48
    1510:	f0 e0       	ldi	r31, 0x00	; 0
    1512:	80 81       	ld	r24, Z
    1514:	28 2f       	mov	r18, r24
    1516:	30 e0       	ldi	r19, 0x00	; 0
    1518:	8a 81       	ldd	r24, Y+2	; 0x02
    151a:	88 2f       	mov	r24, r24
    151c:	90 e0       	ldi	r25, 0x00	; 0
    151e:	a9 01       	movw	r20, r18
    1520:	02 c0       	rjmp	.+4      	; 0x1526 <DIO_Dyn_u8_GetPinValue+0x104>
    1522:	55 95       	asr	r21
    1524:	47 95       	ror	r20
    1526:	8a 95       	dec	r24
    1528:	e2 f7       	brpl	.-8      	; 0x1522 <DIO_Dyn_u8_GetPinValue+0x100>
    152a:	ca 01       	movw	r24, r20
    152c:	81 70       	andi	r24, 0x01	; 1
    152e:	90 70       	andi	r25, 0x00	; 0
    1530:	88 23       	and	r24, r24
    1532:	19 f0       	breq	.+6      	; 0x153a <DIO_Dyn_u8_GetPinValue+0x118>
							return	DIO_Dyn_u8_TRUE;
    1534:	51 e0       	ldi	r21, 0x01	; 1
    1536:	5b 83       	std	Y+3, r21	; 0x03
    1538:	03 c0       	rjmp	.+6      	; 0x1540 <DIO_Dyn_u8_GetPinValue+0x11e>
					else
							return DIO_Dyn_u8_FALSE;
    153a:	1b 82       	std	Y+3, r1	; 0x03
    153c:	01 c0       	rjmp	.+2      	; 0x1540 <DIO_Dyn_u8_GetPinValue+0x11e>
    153e:	02 c0       	rjmp	.+4      	; 0x1544 <DIO_Dyn_u8_GetPinValue+0x122>
				break;
		}
}
    1540:	8b 81       	ldd	r24, Y+3	; 0x03
    1542:	8e 83       	std	Y+6, r24	; 0x06
    1544:	8e 81       	ldd	r24, Y+6	; 0x06
    1546:	26 96       	adiw	r28, 0x06	; 6
    1548:	0f b6       	in	r0, 0x3f	; 63
    154a:	f8 94       	cli
    154c:	de bf       	out	0x3e, r29	; 62
    154e:	0f be       	out	0x3f, r0	; 63
    1550:	cd bf       	out	0x3d, r28	; 61
    1552:	cf 91       	pop	r28
    1554:	df 91       	pop	r29
    1556:	08 95       	ret

00001558 <DIO_Dyn_vid_SetPort>:
void DIO_Dyn_vid_SetPort(u8 Copy_u8_PortNum, u8 Copy_u8_PortValue ){
    1558:	df 93       	push	r29
    155a:	cf 93       	push	r28
    155c:	00 d0       	rcall	.+0      	; 0x155e <DIO_Dyn_vid_SetPort+0x6>
    155e:	00 d0       	rcall	.+0      	; 0x1560 <DIO_Dyn_vid_SetPort+0x8>
    1560:	cd b7       	in	r28, 0x3d	; 61
    1562:	de b7       	in	r29, 0x3e	; 62
    1564:	89 83       	std	Y+1, r24	; 0x01
    1566:	6a 83       	std	Y+2, r22	; 0x02
	switch(Copy_u8_PortNum){
    1568:	89 81       	ldd	r24, Y+1	; 0x01
    156a:	28 2f       	mov	r18, r24
    156c:	30 e0       	ldi	r19, 0x00	; 0
    156e:	3c 83       	std	Y+4, r19	; 0x04
    1570:	2b 83       	std	Y+3, r18	; 0x03
    1572:	8b 81       	ldd	r24, Y+3	; 0x03
    1574:	9c 81       	ldd	r25, Y+4	; 0x04
    1576:	81 30       	cpi	r24, 0x01	; 1
    1578:	91 05       	cpc	r25, r1
    157a:	d1 f0       	breq	.+52     	; 0x15b0 <DIO_Dyn_vid_SetPort+0x58>
    157c:	2b 81       	ldd	r18, Y+3	; 0x03
    157e:	3c 81       	ldd	r19, Y+4	; 0x04
    1580:	22 30       	cpi	r18, 0x02	; 2
    1582:	31 05       	cpc	r19, r1
    1584:	2c f4       	brge	.+10     	; 0x1590 <DIO_Dyn_vid_SetPort+0x38>
    1586:	8b 81       	ldd	r24, Y+3	; 0x03
    1588:	9c 81       	ldd	r25, Y+4	; 0x04
    158a:	00 97       	sbiw	r24, 0x00	; 0
    158c:	61 f0       	breq	.+24     	; 0x15a6 <DIO_Dyn_vid_SetPort+0x4e>
    158e:	1e c0       	rjmp	.+60     	; 0x15cc <DIO_Dyn_vid_SetPort+0x74>
    1590:	2b 81       	ldd	r18, Y+3	; 0x03
    1592:	3c 81       	ldd	r19, Y+4	; 0x04
    1594:	22 30       	cpi	r18, 0x02	; 2
    1596:	31 05       	cpc	r19, r1
    1598:	81 f0       	breq	.+32     	; 0x15ba <DIO_Dyn_vid_SetPort+0x62>
    159a:	8b 81       	ldd	r24, Y+3	; 0x03
    159c:	9c 81       	ldd	r25, Y+4	; 0x04
    159e:	83 30       	cpi	r24, 0x03	; 3
    15a0:	91 05       	cpc	r25, r1
    15a2:	81 f0       	breq	.+32     	; 0x15c4 <DIO_Dyn_vid_SetPort+0x6c>
    15a4:	13 c0       	rjmp	.+38     	; 0x15cc <DIO_Dyn_vid_SetPort+0x74>
		case DIO_Dyn_u8_PORTA:
			PORTA=Copy_u8_PortValue;
    15a6:	eb e3       	ldi	r30, 0x3B	; 59
    15a8:	f0 e0       	ldi	r31, 0x00	; 0
    15aa:	8a 81       	ldd	r24, Y+2	; 0x02
    15ac:	80 83       	st	Z, r24
    15ae:	0e c0       	rjmp	.+28     	; 0x15cc <DIO_Dyn_vid_SetPort+0x74>
			break;
			case DIO_Dyn_u8_PORTB:
			PORTB=Copy_u8_PortValue;
    15b0:	e8 e3       	ldi	r30, 0x38	; 56
    15b2:	f0 e0       	ldi	r31, 0x00	; 0
    15b4:	8a 81       	ldd	r24, Y+2	; 0x02
    15b6:	80 83       	st	Z, r24
    15b8:	09 c0       	rjmp	.+18     	; 0x15cc <DIO_Dyn_vid_SetPort+0x74>
			break;
			case DIO_Dyn_u8_PORTC:
			PORTC=Copy_u8_PortValue;
    15ba:	e5 e3       	ldi	r30, 0x35	; 53
    15bc:	f0 e0       	ldi	r31, 0x00	; 0
    15be:	8a 81       	ldd	r24, Y+2	; 0x02
    15c0:	80 83       	st	Z, r24
    15c2:	04 c0       	rjmp	.+8      	; 0x15cc <DIO_Dyn_vid_SetPort+0x74>
			break;
			case DIO_Dyn_u8_PORTD:
			PORTD=Copy_u8_PortValue;
    15c4:	e2 e3       	ldi	r30, 0x32	; 50
    15c6:	f0 e0       	ldi	r31, 0x00	; 0
    15c8:	8a 81       	ldd	r24, Y+2	; 0x02
    15ca:	80 83       	st	Z, r24
			break;
	}
}
    15cc:	0f 90       	pop	r0
    15ce:	0f 90       	pop	r0
    15d0:	0f 90       	pop	r0
    15d2:	0f 90       	pop	r0
    15d4:	cf 91       	pop	r28
    15d6:	df 91       	pop	r29
    15d8:	08 95       	ret

000015da <DIO_Dyn_vid_ClearPort>:
void DIO_Dyn_vid_ClearPort(u8 Copy_u8_PortNum){
    15da:	df 93       	push	r29
    15dc:	cf 93       	push	r28
    15de:	00 d0       	rcall	.+0      	; 0x15e0 <DIO_Dyn_vid_ClearPort+0x6>
    15e0:	0f 92       	push	r0
    15e2:	cd b7       	in	r28, 0x3d	; 61
    15e4:	de b7       	in	r29, 0x3e	; 62
    15e6:	89 83       	std	Y+1, r24	; 0x01
	switch(Copy_u8_PortNum){
    15e8:	89 81       	ldd	r24, Y+1	; 0x01
    15ea:	28 2f       	mov	r18, r24
    15ec:	30 e0       	ldi	r19, 0x00	; 0
    15ee:	3b 83       	std	Y+3, r19	; 0x03
    15f0:	2a 83       	std	Y+2, r18	; 0x02
    15f2:	8a 81       	ldd	r24, Y+2	; 0x02
    15f4:	9b 81       	ldd	r25, Y+3	; 0x03
    15f6:	81 30       	cpi	r24, 0x01	; 1
    15f8:	91 05       	cpc	r25, r1
    15fa:	c9 f0       	breq	.+50     	; 0x162e <DIO_Dyn_vid_ClearPort+0x54>
    15fc:	2a 81       	ldd	r18, Y+2	; 0x02
    15fe:	3b 81       	ldd	r19, Y+3	; 0x03
    1600:	22 30       	cpi	r18, 0x02	; 2
    1602:	31 05       	cpc	r19, r1
    1604:	2c f4       	brge	.+10     	; 0x1610 <DIO_Dyn_vid_ClearPort+0x36>
    1606:	8a 81       	ldd	r24, Y+2	; 0x02
    1608:	9b 81       	ldd	r25, Y+3	; 0x03
    160a:	00 97       	sbiw	r24, 0x00	; 0
    160c:	61 f0       	breq	.+24     	; 0x1626 <DIO_Dyn_vid_ClearPort+0x4c>
    160e:	1a c0       	rjmp	.+52     	; 0x1644 <DIO_Dyn_vid_ClearPort+0x6a>
    1610:	2a 81       	ldd	r18, Y+2	; 0x02
    1612:	3b 81       	ldd	r19, Y+3	; 0x03
    1614:	22 30       	cpi	r18, 0x02	; 2
    1616:	31 05       	cpc	r19, r1
    1618:	71 f0       	breq	.+28     	; 0x1636 <DIO_Dyn_vid_ClearPort+0x5c>
    161a:	8a 81       	ldd	r24, Y+2	; 0x02
    161c:	9b 81       	ldd	r25, Y+3	; 0x03
    161e:	83 30       	cpi	r24, 0x03	; 3
    1620:	91 05       	cpc	r25, r1
    1622:	69 f0       	breq	.+26     	; 0x163e <DIO_Dyn_vid_ClearPort+0x64>
    1624:	0f c0       	rjmp	.+30     	; 0x1644 <DIO_Dyn_vid_ClearPort+0x6a>
			case DIO_Dyn_u8_PORTA:
				PORTA=DIO_Dyn_u8_FALSE;
    1626:	eb e3       	ldi	r30, 0x3B	; 59
    1628:	f0 e0       	ldi	r31, 0x00	; 0
    162a:	10 82       	st	Z, r1
    162c:	0b c0       	rjmp	.+22     	; 0x1644 <DIO_Dyn_vid_ClearPort+0x6a>
				break;
				case DIO_Dyn_u8_PORTB:
				PORTB=DIO_Dyn_u8_FALSE;
    162e:	e8 e3       	ldi	r30, 0x38	; 56
    1630:	f0 e0       	ldi	r31, 0x00	; 0
    1632:	10 82       	st	Z, r1
    1634:	07 c0       	rjmp	.+14     	; 0x1644 <DIO_Dyn_vid_ClearPort+0x6a>
				break;
				case DIO_Dyn_u8_PORTC:
				PORTC=DIO_Dyn_u8_FALSE;
    1636:	e5 e3       	ldi	r30, 0x35	; 53
    1638:	f0 e0       	ldi	r31, 0x00	; 0
    163a:	10 82       	st	Z, r1
    163c:	03 c0       	rjmp	.+6      	; 0x1644 <DIO_Dyn_vid_ClearPort+0x6a>
				break;
				case DIO_Dyn_u8_PORTD:
				PORTD=DIO_Dyn_u8_FALSE;
    163e:	e2 e3       	ldi	r30, 0x32	; 50
    1640:	f0 e0       	ldi	r31, 0x00	; 0
    1642:	10 82       	st	Z, r1
				break;
		}
}
    1644:	0f 90       	pop	r0
    1646:	0f 90       	pop	r0
    1648:	0f 90       	pop	r0
    164a:	cf 91       	pop	r28
    164c:	df 91       	pop	r29
    164e:	08 95       	ret

00001650 <DIO_Dyn_u8_GetPort>:
u8 DIO_Dyn_u8_GetPort(u8 Copy_u8_PortNum ){
    1650:	df 93       	push	r29
    1652:	cf 93       	push	r28
    1654:	00 d0       	rcall	.+0      	; 0x1656 <DIO_Dyn_u8_GetPort+0x6>
    1656:	00 d0       	rcall	.+0      	; 0x1658 <DIO_Dyn_u8_GetPort+0x8>
    1658:	cd b7       	in	r28, 0x3d	; 61
    165a:	de b7       	in	r29, 0x3e	; 62
    165c:	8a 83       	std	Y+2, r24	; 0x02
	 u8 Local_u8_Port=0x00;
    165e:	19 82       	std	Y+1, r1	; 0x01
	switch(Copy_u8_PortNum){
    1660:	8a 81       	ldd	r24, Y+2	; 0x02
    1662:	28 2f       	mov	r18, r24
    1664:	30 e0       	ldi	r19, 0x00	; 0
    1666:	3c 83       	std	Y+4, r19	; 0x04
    1668:	2b 83       	std	Y+3, r18	; 0x03
    166a:	8b 81       	ldd	r24, Y+3	; 0x03
    166c:	9c 81       	ldd	r25, Y+4	; 0x04
    166e:	81 30       	cpi	r24, 0x01	; 1
    1670:	91 05       	cpc	r25, r1
    1672:	d1 f0       	breq	.+52     	; 0x16a8 <DIO_Dyn_u8_GetPort+0x58>
    1674:	2b 81       	ldd	r18, Y+3	; 0x03
    1676:	3c 81       	ldd	r19, Y+4	; 0x04
    1678:	22 30       	cpi	r18, 0x02	; 2
    167a:	31 05       	cpc	r19, r1
    167c:	2c f4       	brge	.+10     	; 0x1688 <DIO_Dyn_u8_GetPort+0x38>
    167e:	8b 81       	ldd	r24, Y+3	; 0x03
    1680:	9c 81       	ldd	r25, Y+4	; 0x04
    1682:	00 97       	sbiw	r24, 0x00	; 0
    1684:	61 f0       	breq	.+24     	; 0x169e <DIO_Dyn_u8_GetPort+0x4e>
    1686:	1e c0       	rjmp	.+60     	; 0x16c4 <DIO_Dyn_u8_GetPort+0x74>
    1688:	2b 81       	ldd	r18, Y+3	; 0x03
    168a:	3c 81       	ldd	r19, Y+4	; 0x04
    168c:	22 30       	cpi	r18, 0x02	; 2
    168e:	31 05       	cpc	r19, r1
    1690:	81 f0       	breq	.+32     	; 0x16b2 <DIO_Dyn_u8_GetPort+0x62>
    1692:	8b 81       	ldd	r24, Y+3	; 0x03
    1694:	9c 81       	ldd	r25, Y+4	; 0x04
    1696:	83 30       	cpi	r24, 0x03	; 3
    1698:	91 05       	cpc	r25, r1
    169a:	81 f0       	breq	.+32     	; 0x16bc <DIO_Dyn_u8_GetPort+0x6c>
    169c:	13 c0       	rjmp	.+38     	; 0x16c4 <DIO_Dyn_u8_GetPort+0x74>
				case DIO_Dyn_u8_PORTA:
						Local_u8_Port=PINA;
    169e:	e9 e3       	ldi	r30, 0x39	; 57
    16a0:	f0 e0       	ldi	r31, 0x00	; 0
    16a2:	80 81       	ld	r24, Z
    16a4:	89 83       	std	Y+1, r24	; 0x01
    16a6:	0e c0       	rjmp	.+28     	; 0x16c4 <DIO_Dyn_u8_GetPort+0x74>
					break;
					case DIO_Dyn_u8_PORTB:
						Local_u8_Port=PINB;
    16a8:	e6 e3       	ldi	r30, 0x36	; 54
    16aa:	f0 e0       	ldi	r31, 0x00	; 0
    16ac:	80 81       	ld	r24, Z
    16ae:	89 83       	std	Y+1, r24	; 0x01
    16b0:	09 c0       	rjmp	.+18     	; 0x16c4 <DIO_Dyn_u8_GetPort+0x74>
					break;
					case DIO_Dyn_u8_PORTC:
						Local_u8_Port=PINC;
    16b2:	e3 e3       	ldi	r30, 0x33	; 51
    16b4:	f0 e0       	ldi	r31, 0x00	; 0
    16b6:	80 81       	ld	r24, Z
    16b8:	89 83       	std	Y+1, r24	; 0x01
    16ba:	04 c0       	rjmp	.+8      	; 0x16c4 <DIO_Dyn_u8_GetPort+0x74>
					break;
					case DIO_Dyn_u8_PORTD:
						Local_u8_Port=PIND;
    16bc:	e0 e3       	ldi	r30, 0x30	; 48
    16be:	f0 e0       	ldi	r31, 0x00	; 0
    16c0:	80 81       	ld	r24, Z
    16c2:	89 83       	std	Y+1, r24	; 0x01
					break;
			}
	return Local_u8_Port;
    16c4:	89 81       	ldd	r24, Y+1	; 0x01
	}
    16c6:	0f 90       	pop	r0
    16c8:	0f 90       	pop	r0
    16ca:	0f 90       	pop	r0
    16cc:	0f 90       	pop	r0
    16ce:	cf 91       	pop	r28
    16d0:	df 91       	pop	r29
    16d2:	08 95       	ret

000016d4 <DIO_Dyn_TogglePin>:

void DIO_Dyn_TogglePin(u8 Copy_u8_PortNum, u8 Copy_u8_PinNum ){
    16d4:	df 93       	push	r29
    16d6:	cf 93       	push	r28
    16d8:	00 d0       	rcall	.+0      	; 0x16da <DIO_Dyn_TogglePin+0x6>
    16da:	00 d0       	rcall	.+0      	; 0x16dc <DIO_Dyn_TogglePin+0x8>
    16dc:	cd b7       	in	r28, 0x3d	; 61
    16de:	de b7       	in	r29, 0x3e	; 62
    16e0:	89 83       	std	Y+1, r24	; 0x01
    16e2:	6a 83       	std	Y+2, r22	; 0x02
	if(Copy_u8_PinNum>=DIO_Dyn_u8_PORT_START&&Copy_u8_PinNum<=DIO_Dyn_u8_PORT_END )
    16e4:	8a 81       	ldd	r24, Y+2	; 0x02
    16e6:	88 30       	cpi	r24, 0x08	; 8
    16e8:	08 f0       	brcs	.+2      	; 0x16ec <DIO_Dyn_TogglePin+0x18>
    16ea:	6e c0       	rjmp	.+220    	; 0x17c8 <DIO_Dyn_TogglePin+0xf4>
	switch(Copy_u8_PortNum){
    16ec:	89 81       	ldd	r24, Y+1	; 0x01
    16ee:	28 2f       	mov	r18, r24
    16f0:	30 e0       	ldi	r19, 0x00	; 0
    16f2:	3c 83       	std	Y+4, r19	; 0x04
    16f4:	2b 83       	std	Y+3, r18	; 0x03
    16f6:	8b 81       	ldd	r24, Y+3	; 0x03
    16f8:	9c 81       	ldd	r25, Y+4	; 0x04
    16fa:	81 30       	cpi	r24, 0x01	; 1
    16fc:	91 05       	cpc	r25, r1
    16fe:	49 f1       	breq	.+82     	; 0x1752 <DIO_Dyn_TogglePin+0x7e>
    1700:	2b 81       	ldd	r18, Y+3	; 0x03
    1702:	3c 81       	ldd	r19, Y+4	; 0x04
    1704:	22 30       	cpi	r18, 0x02	; 2
    1706:	31 05       	cpc	r19, r1
    1708:	2c f4       	brge	.+10     	; 0x1714 <DIO_Dyn_TogglePin+0x40>
    170a:	8b 81       	ldd	r24, Y+3	; 0x03
    170c:	9c 81       	ldd	r25, Y+4	; 0x04
    170e:	00 97       	sbiw	r24, 0x00	; 0
    1710:	61 f0       	breq	.+24     	; 0x172a <DIO_Dyn_TogglePin+0x56>
    1712:	5a c0       	rjmp	.+180    	; 0x17c8 <DIO_Dyn_TogglePin+0xf4>
    1714:	2b 81       	ldd	r18, Y+3	; 0x03
    1716:	3c 81       	ldd	r19, Y+4	; 0x04
    1718:	22 30       	cpi	r18, 0x02	; 2
    171a:	31 05       	cpc	r19, r1
    171c:	71 f1       	breq	.+92     	; 0x177a <DIO_Dyn_TogglePin+0xa6>
    171e:	8b 81       	ldd	r24, Y+3	; 0x03
    1720:	9c 81       	ldd	r25, Y+4	; 0x04
    1722:	83 30       	cpi	r24, 0x03	; 3
    1724:	91 05       	cpc	r25, r1
    1726:	e9 f1       	breq	.+122    	; 0x17a2 <DIO_Dyn_TogglePin+0xce>
    1728:	4f c0       	rjmp	.+158    	; 0x17c8 <DIO_Dyn_TogglePin+0xf4>
			case DIO_Dyn_u8_PORTA:
					TOG_BIT(PORTA,Copy_u8_PinNum);
    172a:	ab e3       	ldi	r26, 0x3B	; 59
    172c:	b0 e0       	ldi	r27, 0x00	; 0
    172e:	eb e3       	ldi	r30, 0x3B	; 59
    1730:	f0 e0       	ldi	r31, 0x00	; 0
    1732:	80 81       	ld	r24, Z
    1734:	48 2f       	mov	r20, r24
    1736:	8a 81       	ldd	r24, Y+2	; 0x02
    1738:	28 2f       	mov	r18, r24
    173a:	30 e0       	ldi	r19, 0x00	; 0
    173c:	81 e0       	ldi	r24, 0x01	; 1
    173e:	90 e0       	ldi	r25, 0x00	; 0
    1740:	02 2e       	mov	r0, r18
    1742:	02 c0       	rjmp	.+4      	; 0x1748 <DIO_Dyn_TogglePin+0x74>
    1744:	88 0f       	add	r24, r24
    1746:	99 1f       	adc	r25, r25
    1748:	0a 94       	dec	r0
    174a:	e2 f7       	brpl	.-8      	; 0x1744 <DIO_Dyn_TogglePin+0x70>
    174c:	84 27       	eor	r24, r20
    174e:	8c 93       	st	X, r24
    1750:	3b c0       	rjmp	.+118    	; 0x17c8 <DIO_Dyn_TogglePin+0xf4>
				break;
				case DIO_Dyn_u8_PORTB:
					TOG_BIT(PORTB,Copy_u8_PinNum);
    1752:	a8 e3       	ldi	r26, 0x38	; 56
    1754:	b0 e0       	ldi	r27, 0x00	; 0
    1756:	e8 e3       	ldi	r30, 0x38	; 56
    1758:	f0 e0       	ldi	r31, 0x00	; 0
    175a:	80 81       	ld	r24, Z
    175c:	48 2f       	mov	r20, r24
    175e:	8a 81       	ldd	r24, Y+2	; 0x02
    1760:	28 2f       	mov	r18, r24
    1762:	30 e0       	ldi	r19, 0x00	; 0
    1764:	81 e0       	ldi	r24, 0x01	; 1
    1766:	90 e0       	ldi	r25, 0x00	; 0
    1768:	02 2e       	mov	r0, r18
    176a:	02 c0       	rjmp	.+4      	; 0x1770 <DIO_Dyn_TogglePin+0x9c>
    176c:	88 0f       	add	r24, r24
    176e:	99 1f       	adc	r25, r25
    1770:	0a 94       	dec	r0
    1772:	e2 f7       	brpl	.-8      	; 0x176c <DIO_Dyn_TogglePin+0x98>
    1774:	84 27       	eor	r24, r20
    1776:	8c 93       	st	X, r24
    1778:	27 c0       	rjmp	.+78     	; 0x17c8 <DIO_Dyn_TogglePin+0xf4>
				break;
				case DIO_Dyn_u8_PORTC:
					TOG_BIT(PORTC,Copy_u8_PinNum);
    177a:	a5 e3       	ldi	r26, 0x35	; 53
    177c:	b0 e0       	ldi	r27, 0x00	; 0
    177e:	e5 e3       	ldi	r30, 0x35	; 53
    1780:	f0 e0       	ldi	r31, 0x00	; 0
    1782:	80 81       	ld	r24, Z
    1784:	48 2f       	mov	r20, r24
    1786:	8a 81       	ldd	r24, Y+2	; 0x02
    1788:	28 2f       	mov	r18, r24
    178a:	30 e0       	ldi	r19, 0x00	; 0
    178c:	81 e0       	ldi	r24, 0x01	; 1
    178e:	90 e0       	ldi	r25, 0x00	; 0
    1790:	02 2e       	mov	r0, r18
    1792:	02 c0       	rjmp	.+4      	; 0x1798 <DIO_Dyn_TogglePin+0xc4>
    1794:	88 0f       	add	r24, r24
    1796:	99 1f       	adc	r25, r25
    1798:	0a 94       	dec	r0
    179a:	e2 f7       	brpl	.-8      	; 0x1794 <DIO_Dyn_TogglePin+0xc0>
    179c:	84 27       	eor	r24, r20
    179e:	8c 93       	st	X, r24
    17a0:	13 c0       	rjmp	.+38     	; 0x17c8 <DIO_Dyn_TogglePin+0xf4>
				break;
				case DIO_Dyn_u8_PORTD:
					TOG_BIT(PORTD,Copy_u8_PinNum);
    17a2:	a2 e3       	ldi	r26, 0x32	; 50
    17a4:	b0 e0       	ldi	r27, 0x00	; 0
    17a6:	e2 e3       	ldi	r30, 0x32	; 50
    17a8:	f0 e0       	ldi	r31, 0x00	; 0
    17aa:	80 81       	ld	r24, Z
    17ac:	48 2f       	mov	r20, r24
    17ae:	8a 81       	ldd	r24, Y+2	; 0x02
    17b0:	28 2f       	mov	r18, r24
    17b2:	30 e0       	ldi	r19, 0x00	; 0
    17b4:	81 e0       	ldi	r24, 0x01	; 1
    17b6:	90 e0       	ldi	r25, 0x00	; 0
    17b8:	02 2e       	mov	r0, r18
    17ba:	02 c0       	rjmp	.+4      	; 0x17c0 <DIO_Dyn_TogglePin+0xec>
    17bc:	88 0f       	add	r24, r24
    17be:	99 1f       	adc	r25, r25
    17c0:	0a 94       	dec	r0
    17c2:	e2 f7       	brpl	.-8      	; 0x17bc <DIO_Dyn_TogglePin+0xe8>
    17c4:	84 27       	eor	r24, r20
    17c6:	8c 93       	st	X, r24
				break;
		}
}
    17c8:	0f 90       	pop	r0
    17ca:	0f 90       	pop	r0
    17cc:	0f 90       	pop	r0
    17ce:	0f 90       	pop	r0
    17d0:	cf 91       	pop	r28
    17d2:	df 91       	pop	r29
    17d4:	08 95       	ret

000017d6 <LCD_vid_Init>:
#include "../../MCL/DIO_dynamic/DIO_dynamic_int.h"
#include "LCD_config.h"
#include "LCD_priv.h"


void LCD_vid_Init(void){
    17d6:	df 93       	push	r29
    17d8:	cf 93       	push	r28
    17da:	cd b7       	in	r28, 0x3d	; 61
    17dc:	de b7       	in	r29, 0x3e	; 62
    17de:	e8 97       	sbiw	r28, 0x38	; 56
    17e0:	0f b6       	in	r0, 0x3f	; 63
    17e2:	f8 94       	cli
    17e4:	de bf       	out	0x3e, r29	; 62
    17e6:	0f be       	out	0x3f, r0	; 63
    17e8:	cd bf       	out	0x3d, r28	; 61
	DIO_Dyn_vid_SetPinDir(LCD_u8_PIN_RS,DIO_Dyn_u8_OUTPUT);
    17ea:	80 e0       	ldi	r24, 0x00	; 0
    17ec:	65 e0       	ldi	r22, 0x05	; 5
    17ee:	41 e0       	ldi	r20, 0x01	; 1
    17f0:	0e 94 63 08 	call	0x10c6	; 0x10c6 <DIO_Dyn_vid_SetPinDir>
	DIO_Dyn_vid_SetPinDir(LCD_u8_PIN_RW,DIO_Dyn_u8_OUTPUT);
    17f4:	80 e0       	ldi	r24, 0x00	; 0
    17f6:	66 e0       	ldi	r22, 0x06	; 6
    17f8:	41 e0       	ldi	r20, 0x01	; 1
    17fa:	0e 94 63 08 	call	0x10c6	; 0x10c6 <DIO_Dyn_vid_SetPinDir>
	DIO_Dyn_vid_SetPinDir(LCD_u8_PIN_E ,DIO_Dyn_u8_OUTPUT);
    17fe:	80 e0       	ldi	r24, 0x00	; 0
    1800:	67 e0       	ldi	r22, 0x07	; 7
    1802:	41 e0       	ldi	r20, 0x01	; 1
    1804:	0e 94 63 08 	call	0x10c6	; 0x10c6 <DIO_Dyn_vid_SetPinDir>
	DIO_Dyn_vid_SetPinDir(LCD_u8_PIN_D0,DIO_Dyn_u8_OUTPUT);
    1808:	81 e0       	ldi	r24, 0x01	; 1
    180a:	60 e0       	ldi	r22, 0x00	; 0
    180c:	41 e0       	ldi	r20, 0x01	; 1
    180e:	0e 94 63 08 	call	0x10c6	; 0x10c6 <DIO_Dyn_vid_SetPinDir>
	DIO_Dyn_vid_SetPinDir(LCD_u8_PIN_D1,DIO_Dyn_u8_OUTPUT);
    1812:	81 e0       	ldi	r24, 0x01	; 1
    1814:	61 e0       	ldi	r22, 0x01	; 1
    1816:	41 e0       	ldi	r20, 0x01	; 1
    1818:	0e 94 63 08 	call	0x10c6	; 0x10c6 <DIO_Dyn_vid_SetPinDir>
	DIO_Dyn_vid_SetPinDir(LCD_u8_PIN_D2,DIO_Dyn_u8_OUTPUT);
    181c:	81 e0       	ldi	r24, 0x01	; 1
    181e:	62 e0       	ldi	r22, 0x02	; 2
    1820:	41 e0       	ldi	r20, 0x01	; 1
    1822:	0e 94 63 08 	call	0x10c6	; 0x10c6 <DIO_Dyn_vid_SetPinDir>
	DIO_Dyn_vid_SetPinDir(LCD_u8_PIN_D3,DIO_Dyn_u8_OUTPUT);
    1826:	81 e0       	ldi	r24, 0x01	; 1
    1828:	63 e0       	ldi	r22, 0x03	; 3
    182a:	41 e0       	ldi	r20, 0x01	; 1
    182c:	0e 94 63 08 	call	0x10c6	; 0x10c6 <DIO_Dyn_vid_SetPinDir>
	DIO_Dyn_vid_SetPinDir(LCD_u8_PIN_D4,DIO_Dyn_u8_OUTPUT);
    1830:	81 e0       	ldi	r24, 0x01	; 1
    1832:	64 e0       	ldi	r22, 0x04	; 4
    1834:	41 e0       	ldi	r20, 0x01	; 1
    1836:	0e 94 63 08 	call	0x10c6	; 0x10c6 <DIO_Dyn_vid_SetPinDir>
	DIO_Dyn_vid_SetPinDir(LCD_u8_PIN_D5,DIO_Dyn_u8_OUTPUT);
    183a:	81 e0       	ldi	r24, 0x01	; 1
    183c:	65 e0       	ldi	r22, 0x05	; 5
    183e:	41 e0       	ldi	r20, 0x01	; 1
    1840:	0e 94 63 08 	call	0x10c6	; 0x10c6 <DIO_Dyn_vid_SetPinDir>
	DIO_Dyn_vid_SetPinDir(LCD_u8_PIN_D6,DIO_Dyn_u8_OUTPUT);
    1844:	81 e0       	ldi	r24, 0x01	; 1
    1846:	66 e0       	ldi	r22, 0x06	; 6
    1848:	41 e0       	ldi	r20, 0x01	; 1
    184a:	0e 94 63 08 	call	0x10c6	; 0x10c6 <DIO_Dyn_vid_SetPinDir>
	DIO_Dyn_vid_SetPinDir(LCD_u8_PIN_D7,DIO_Dyn_u8_OUTPUT);
    184e:	81 e0       	ldi	r24, 0x01	; 1
    1850:	67 e0       	ldi	r22, 0x07	; 7
    1852:	41 e0       	ldi	r20, 0x01	; 1
    1854:	0e 94 63 08 	call	0x10c6	; 0x10c6 <DIO_Dyn_vid_SetPinDir>
    1858:	80 e0       	ldi	r24, 0x00	; 0
    185a:	90 e0       	ldi	r25, 0x00	; 0
    185c:	ac e0       	ldi	r26, 0x0C	; 12
    185e:	b2 e4       	ldi	r27, 0x42	; 66
    1860:	8d ab       	std	Y+53, r24	; 0x35
    1862:	9e ab       	std	Y+54, r25	; 0x36
    1864:	af ab       	std	Y+55, r26	; 0x37
    1866:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1868:	6d a9       	ldd	r22, Y+53	; 0x35
    186a:	7e a9       	ldd	r23, Y+54	; 0x36
    186c:	8f a9       	ldd	r24, Y+55	; 0x37
    186e:	98 ad       	ldd	r25, Y+56	; 0x38
    1870:	20 e0       	ldi	r18, 0x00	; 0
    1872:	30 e0       	ldi	r19, 0x00	; 0
    1874:	4a e7       	ldi	r20, 0x7A	; 122
    1876:	53 e4       	ldi	r21, 0x43	; 67
    1878:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    187c:	dc 01       	movw	r26, r24
    187e:	cb 01       	movw	r24, r22
    1880:	89 ab       	std	Y+49, r24	; 0x31
    1882:	9a ab       	std	Y+50, r25	; 0x32
    1884:	ab ab       	std	Y+51, r26	; 0x33
    1886:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1888:	69 a9       	ldd	r22, Y+49	; 0x31
    188a:	7a a9       	ldd	r23, Y+50	; 0x32
    188c:	8b a9       	ldd	r24, Y+51	; 0x33
    188e:	9c a9       	ldd	r25, Y+52	; 0x34
    1890:	20 e0       	ldi	r18, 0x00	; 0
    1892:	30 e0       	ldi	r19, 0x00	; 0
    1894:	40 e8       	ldi	r20, 0x80	; 128
    1896:	5f e3       	ldi	r21, 0x3F	; 63
    1898:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    189c:	88 23       	and	r24, r24
    189e:	2c f4       	brge	.+10     	; 0x18aa <LCD_vid_Init+0xd4>
		__ticks = 1;
    18a0:	81 e0       	ldi	r24, 0x01	; 1
    18a2:	90 e0       	ldi	r25, 0x00	; 0
    18a4:	98 ab       	std	Y+48, r25	; 0x30
    18a6:	8f a7       	std	Y+47, r24	; 0x2f
    18a8:	3f c0       	rjmp	.+126    	; 0x1928 <LCD_vid_Init+0x152>
	else if (__tmp > 65535)
    18aa:	69 a9       	ldd	r22, Y+49	; 0x31
    18ac:	7a a9       	ldd	r23, Y+50	; 0x32
    18ae:	8b a9       	ldd	r24, Y+51	; 0x33
    18b0:	9c a9       	ldd	r25, Y+52	; 0x34
    18b2:	20 e0       	ldi	r18, 0x00	; 0
    18b4:	3f ef       	ldi	r19, 0xFF	; 255
    18b6:	4f e7       	ldi	r20, 0x7F	; 127
    18b8:	57 e4       	ldi	r21, 0x47	; 71
    18ba:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    18be:	18 16       	cp	r1, r24
    18c0:	4c f5       	brge	.+82     	; 0x1914 <LCD_vid_Init+0x13e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    18c2:	6d a9       	ldd	r22, Y+53	; 0x35
    18c4:	7e a9       	ldd	r23, Y+54	; 0x36
    18c6:	8f a9       	ldd	r24, Y+55	; 0x37
    18c8:	98 ad       	ldd	r25, Y+56	; 0x38
    18ca:	20 e0       	ldi	r18, 0x00	; 0
    18cc:	30 e0       	ldi	r19, 0x00	; 0
    18ce:	40 e2       	ldi	r20, 0x20	; 32
    18d0:	51 e4       	ldi	r21, 0x41	; 65
    18d2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    18d6:	dc 01       	movw	r26, r24
    18d8:	cb 01       	movw	r24, r22
    18da:	bc 01       	movw	r22, r24
    18dc:	cd 01       	movw	r24, r26
    18de:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    18e2:	dc 01       	movw	r26, r24
    18e4:	cb 01       	movw	r24, r22
    18e6:	98 ab       	std	Y+48, r25	; 0x30
    18e8:	8f a7       	std	Y+47, r24	; 0x2f
    18ea:	0f c0       	rjmp	.+30     	; 0x190a <LCD_vid_Init+0x134>
    18ec:	89 e1       	ldi	r24, 0x19	; 25
    18ee:	90 e0       	ldi	r25, 0x00	; 0
    18f0:	9e a7       	std	Y+46, r25	; 0x2e
    18f2:	8d a7       	std	Y+45, r24	; 0x2d
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    18f4:	8d a5       	ldd	r24, Y+45	; 0x2d
    18f6:	9e a5       	ldd	r25, Y+46	; 0x2e
    18f8:	01 97       	sbiw	r24, 0x01	; 1
    18fa:	f1 f7       	brne	.-4      	; 0x18f8 <LCD_vid_Init+0x122>
    18fc:	9e a7       	std	Y+46, r25	; 0x2e
    18fe:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1900:	8f a5       	ldd	r24, Y+47	; 0x2f
    1902:	98 a9       	ldd	r25, Y+48	; 0x30
    1904:	01 97       	sbiw	r24, 0x01	; 1
    1906:	98 ab       	std	Y+48, r25	; 0x30
    1908:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    190a:	8f a5       	ldd	r24, Y+47	; 0x2f
    190c:	98 a9       	ldd	r25, Y+48	; 0x30
    190e:	00 97       	sbiw	r24, 0x00	; 0
    1910:	69 f7       	brne	.-38     	; 0x18ec <LCD_vid_Init+0x116>
    1912:	14 c0       	rjmp	.+40     	; 0x193c <LCD_vid_Init+0x166>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1914:	69 a9       	ldd	r22, Y+49	; 0x31
    1916:	7a a9       	ldd	r23, Y+50	; 0x32
    1918:	8b a9       	ldd	r24, Y+51	; 0x33
    191a:	9c a9       	ldd	r25, Y+52	; 0x34
    191c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1920:	dc 01       	movw	r26, r24
    1922:	cb 01       	movw	r24, r22
    1924:	98 ab       	std	Y+48, r25	; 0x30
    1926:	8f a7       	std	Y+47, r24	; 0x2f
    1928:	8f a5       	ldd	r24, Y+47	; 0x2f
    192a:	98 a9       	ldd	r25, Y+48	; 0x30
    192c:	9c a7       	std	Y+44, r25	; 0x2c
    192e:	8b a7       	std	Y+43, r24	; 0x2b
    1930:	8b a5       	ldd	r24, Y+43	; 0x2b
    1932:	9c a5       	ldd	r25, Y+44	; 0x2c
    1934:	01 97       	sbiw	r24, 0x01	; 1
    1936:	f1 f7       	brne	.-4      	; 0x1934 <LCD_vid_Init+0x15e>
    1938:	9c a7       	std	Y+44, r25	; 0x2c
    193a:	8b a7       	std	Y+43, r24	; 0x2b

_delay_ms(35);
LCD_vid_WriteCommand(LCD_u8_FUNCTION_SET);
    193c:	88 e3       	ldi	r24, 0x38	; 56
    193e:	0e 94 09 0e 	call	0x1c12	; 0x1c12 <LCD_vid_WriteCommand>
    1942:	80 e0       	ldi	r24, 0x00	; 0
    1944:	90 e0       	ldi	r25, 0x00	; 0
    1946:	a0 e8       	ldi	r26, 0x80	; 128
    1948:	bf e3       	ldi	r27, 0x3F	; 63
    194a:	8f a3       	std	Y+39, r24	; 0x27
    194c:	98 a7       	std	Y+40, r25	; 0x28
    194e:	a9 a7       	std	Y+41, r26	; 0x29
    1950:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1952:	6f a1       	ldd	r22, Y+39	; 0x27
    1954:	78 a5       	ldd	r23, Y+40	; 0x28
    1956:	89 a5       	ldd	r24, Y+41	; 0x29
    1958:	9a a5       	ldd	r25, Y+42	; 0x2a
    195a:	20 e0       	ldi	r18, 0x00	; 0
    195c:	30 e0       	ldi	r19, 0x00	; 0
    195e:	4a e7       	ldi	r20, 0x7A	; 122
    1960:	53 e4       	ldi	r21, 0x43	; 67
    1962:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1966:	dc 01       	movw	r26, r24
    1968:	cb 01       	movw	r24, r22
    196a:	8b a3       	std	Y+35, r24	; 0x23
    196c:	9c a3       	std	Y+36, r25	; 0x24
    196e:	ad a3       	std	Y+37, r26	; 0x25
    1970:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1972:	6b a1       	ldd	r22, Y+35	; 0x23
    1974:	7c a1       	ldd	r23, Y+36	; 0x24
    1976:	8d a1       	ldd	r24, Y+37	; 0x25
    1978:	9e a1       	ldd	r25, Y+38	; 0x26
    197a:	20 e0       	ldi	r18, 0x00	; 0
    197c:	30 e0       	ldi	r19, 0x00	; 0
    197e:	40 e8       	ldi	r20, 0x80	; 128
    1980:	5f e3       	ldi	r21, 0x3F	; 63
    1982:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1986:	88 23       	and	r24, r24
    1988:	2c f4       	brge	.+10     	; 0x1994 <LCD_vid_Init+0x1be>
		__ticks = 1;
    198a:	81 e0       	ldi	r24, 0x01	; 1
    198c:	90 e0       	ldi	r25, 0x00	; 0
    198e:	9a a3       	std	Y+34, r25	; 0x22
    1990:	89 a3       	std	Y+33, r24	; 0x21
    1992:	3f c0       	rjmp	.+126    	; 0x1a12 <LCD_vid_Init+0x23c>
	else if (__tmp > 65535)
    1994:	6b a1       	ldd	r22, Y+35	; 0x23
    1996:	7c a1       	ldd	r23, Y+36	; 0x24
    1998:	8d a1       	ldd	r24, Y+37	; 0x25
    199a:	9e a1       	ldd	r25, Y+38	; 0x26
    199c:	20 e0       	ldi	r18, 0x00	; 0
    199e:	3f ef       	ldi	r19, 0xFF	; 255
    19a0:	4f e7       	ldi	r20, 0x7F	; 127
    19a2:	57 e4       	ldi	r21, 0x47	; 71
    19a4:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    19a8:	18 16       	cp	r1, r24
    19aa:	4c f5       	brge	.+82     	; 0x19fe <LCD_vid_Init+0x228>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    19ac:	6f a1       	ldd	r22, Y+39	; 0x27
    19ae:	78 a5       	ldd	r23, Y+40	; 0x28
    19b0:	89 a5       	ldd	r24, Y+41	; 0x29
    19b2:	9a a5       	ldd	r25, Y+42	; 0x2a
    19b4:	20 e0       	ldi	r18, 0x00	; 0
    19b6:	30 e0       	ldi	r19, 0x00	; 0
    19b8:	40 e2       	ldi	r20, 0x20	; 32
    19ba:	51 e4       	ldi	r21, 0x41	; 65
    19bc:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    19c0:	dc 01       	movw	r26, r24
    19c2:	cb 01       	movw	r24, r22
    19c4:	bc 01       	movw	r22, r24
    19c6:	cd 01       	movw	r24, r26
    19c8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    19cc:	dc 01       	movw	r26, r24
    19ce:	cb 01       	movw	r24, r22
    19d0:	9a a3       	std	Y+34, r25	; 0x22
    19d2:	89 a3       	std	Y+33, r24	; 0x21
    19d4:	0f c0       	rjmp	.+30     	; 0x19f4 <LCD_vid_Init+0x21e>
    19d6:	89 e1       	ldi	r24, 0x19	; 25
    19d8:	90 e0       	ldi	r25, 0x00	; 0
    19da:	98 a3       	std	Y+32, r25	; 0x20
    19dc:	8f 8f       	std	Y+31, r24	; 0x1f
    19de:	8f 8d       	ldd	r24, Y+31	; 0x1f
    19e0:	98 a1       	ldd	r25, Y+32	; 0x20
    19e2:	01 97       	sbiw	r24, 0x01	; 1
    19e4:	f1 f7       	brne	.-4      	; 0x19e2 <LCD_vid_Init+0x20c>
    19e6:	98 a3       	std	Y+32, r25	; 0x20
    19e8:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    19ea:	89 a1       	ldd	r24, Y+33	; 0x21
    19ec:	9a a1       	ldd	r25, Y+34	; 0x22
    19ee:	01 97       	sbiw	r24, 0x01	; 1
    19f0:	9a a3       	std	Y+34, r25	; 0x22
    19f2:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    19f4:	89 a1       	ldd	r24, Y+33	; 0x21
    19f6:	9a a1       	ldd	r25, Y+34	; 0x22
    19f8:	00 97       	sbiw	r24, 0x00	; 0
    19fa:	69 f7       	brne	.-38     	; 0x19d6 <LCD_vid_Init+0x200>
    19fc:	14 c0       	rjmp	.+40     	; 0x1a26 <LCD_vid_Init+0x250>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    19fe:	6b a1       	ldd	r22, Y+35	; 0x23
    1a00:	7c a1       	ldd	r23, Y+36	; 0x24
    1a02:	8d a1       	ldd	r24, Y+37	; 0x25
    1a04:	9e a1       	ldd	r25, Y+38	; 0x26
    1a06:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1a0a:	dc 01       	movw	r26, r24
    1a0c:	cb 01       	movw	r24, r22
    1a0e:	9a a3       	std	Y+34, r25	; 0x22
    1a10:	89 a3       	std	Y+33, r24	; 0x21
    1a12:	89 a1       	ldd	r24, Y+33	; 0x21
    1a14:	9a a1       	ldd	r25, Y+34	; 0x22
    1a16:	9e 8f       	std	Y+30, r25	; 0x1e
    1a18:	8d 8f       	std	Y+29, r24	; 0x1d
    1a1a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1a1c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1a1e:	01 97       	sbiw	r24, 0x01	; 1
    1a20:	f1 f7       	brne	.-4      	; 0x1a1e <LCD_vid_Init+0x248>
    1a22:	9e 8f       	std	Y+30, r25	; 0x1e
    1a24:	8d 8f       	std	Y+29, r24	; 0x1d
 _delay_ms(1);	
 LCD_vid_WriteCommand(LCD_u8_DISPLAY_CURSOR);	//DISPLAY ON/OFF CONTROL
    1a26:	8e e0       	ldi	r24, 0x0E	; 14
    1a28:	0e 94 09 0e 	call	0x1c12	; 0x1c12 <LCD_vid_WriteCommand>
    1a2c:	80 e0       	ldi	r24, 0x00	; 0
    1a2e:	90 e0       	ldi	r25, 0x00	; 0
    1a30:	a0 e8       	ldi	r26, 0x80	; 128
    1a32:	bf e3       	ldi	r27, 0x3F	; 63
    1a34:	89 8f       	std	Y+25, r24	; 0x19
    1a36:	9a 8f       	std	Y+26, r25	; 0x1a
    1a38:	ab 8f       	std	Y+27, r26	; 0x1b
    1a3a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a3c:	69 8d       	ldd	r22, Y+25	; 0x19
    1a3e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1a40:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1a42:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1a44:	20 e0       	ldi	r18, 0x00	; 0
    1a46:	30 e0       	ldi	r19, 0x00	; 0
    1a48:	4a e7       	ldi	r20, 0x7A	; 122
    1a4a:	53 e4       	ldi	r21, 0x43	; 67
    1a4c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1a50:	dc 01       	movw	r26, r24
    1a52:	cb 01       	movw	r24, r22
    1a54:	8d 8b       	std	Y+21, r24	; 0x15
    1a56:	9e 8b       	std	Y+22, r25	; 0x16
    1a58:	af 8b       	std	Y+23, r26	; 0x17
    1a5a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1a5c:	6d 89       	ldd	r22, Y+21	; 0x15
    1a5e:	7e 89       	ldd	r23, Y+22	; 0x16
    1a60:	8f 89       	ldd	r24, Y+23	; 0x17
    1a62:	98 8d       	ldd	r25, Y+24	; 0x18
    1a64:	20 e0       	ldi	r18, 0x00	; 0
    1a66:	30 e0       	ldi	r19, 0x00	; 0
    1a68:	40 e8       	ldi	r20, 0x80	; 128
    1a6a:	5f e3       	ldi	r21, 0x3F	; 63
    1a6c:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1a70:	88 23       	and	r24, r24
    1a72:	2c f4       	brge	.+10     	; 0x1a7e <LCD_vid_Init+0x2a8>
		__ticks = 1;
    1a74:	81 e0       	ldi	r24, 0x01	; 1
    1a76:	90 e0       	ldi	r25, 0x00	; 0
    1a78:	9c 8b       	std	Y+20, r25	; 0x14
    1a7a:	8b 8b       	std	Y+19, r24	; 0x13
    1a7c:	3f c0       	rjmp	.+126    	; 0x1afc <LCD_vid_Init+0x326>
	else if (__tmp > 65535)
    1a7e:	6d 89       	ldd	r22, Y+21	; 0x15
    1a80:	7e 89       	ldd	r23, Y+22	; 0x16
    1a82:	8f 89       	ldd	r24, Y+23	; 0x17
    1a84:	98 8d       	ldd	r25, Y+24	; 0x18
    1a86:	20 e0       	ldi	r18, 0x00	; 0
    1a88:	3f ef       	ldi	r19, 0xFF	; 255
    1a8a:	4f e7       	ldi	r20, 0x7F	; 127
    1a8c:	57 e4       	ldi	r21, 0x47	; 71
    1a8e:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1a92:	18 16       	cp	r1, r24
    1a94:	4c f5       	brge	.+82     	; 0x1ae8 <LCD_vid_Init+0x312>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a96:	69 8d       	ldd	r22, Y+25	; 0x19
    1a98:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1a9a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1a9c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1a9e:	20 e0       	ldi	r18, 0x00	; 0
    1aa0:	30 e0       	ldi	r19, 0x00	; 0
    1aa2:	40 e2       	ldi	r20, 0x20	; 32
    1aa4:	51 e4       	ldi	r21, 0x41	; 65
    1aa6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1aaa:	dc 01       	movw	r26, r24
    1aac:	cb 01       	movw	r24, r22
    1aae:	bc 01       	movw	r22, r24
    1ab0:	cd 01       	movw	r24, r26
    1ab2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1ab6:	dc 01       	movw	r26, r24
    1ab8:	cb 01       	movw	r24, r22
    1aba:	9c 8b       	std	Y+20, r25	; 0x14
    1abc:	8b 8b       	std	Y+19, r24	; 0x13
    1abe:	0f c0       	rjmp	.+30     	; 0x1ade <LCD_vid_Init+0x308>
    1ac0:	89 e1       	ldi	r24, 0x19	; 25
    1ac2:	90 e0       	ldi	r25, 0x00	; 0
    1ac4:	9a 8b       	std	Y+18, r25	; 0x12
    1ac6:	89 8b       	std	Y+17, r24	; 0x11
    1ac8:	89 89       	ldd	r24, Y+17	; 0x11
    1aca:	9a 89       	ldd	r25, Y+18	; 0x12
    1acc:	01 97       	sbiw	r24, 0x01	; 1
    1ace:	f1 f7       	brne	.-4      	; 0x1acc <LCD_vid_Init+0x2f6>
    1ad0:	9a 8b       	std	Y+18, r25	; 0x12
    1ad2:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ad4:	8b 89       	ldd	r24, Y+19	; 0x13
    1ad6:	9c 89       	ldd	r25, Y+20	; 0x14
    1ad8:	01 97       	sbiw	r24, 0x01	; 1
    1ada:	9c 8b       	std	Y+20, r25	; 0x14
    1adc:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ade:	8b 89       	ldd	r24, Y+19	; 0x13
    1ae0:	9c 89       	ldd	r25, Y+20	; 0x14
    1ae2:	00 97       	sbiw	r24, 0x00	; 0
    1ae4:	69 f7       	brne	.-38     	; 0x1ac0 <LCD_vid_Init+0x2ea>
    1ae6:	14 c0       	rjmp	.+40     	; 0x1b10 <LCD_vid_Init+0x33a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ae8:	6d 89       	ldd	r22, Y+21	; 0x15
    1aea:	7e 89       	ldd	r23, Y+22	; 0x16
    1aec:	8f 89       	ldd	r24, Y+23	; 0x17
    1aee:	98 8d       	ldd	r25, Y+24	; 0x18
    1af0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1af4:	dc 01       	movw	r26, r24
    1af6:	cb 01       	movw	r24, r22
    1af8:	9c 8b       	std	Y+20, r25	; 0x14
    1afa:	8b 8b       	std	Y+19, r24	; 0x13
    1afc:	8b 89       	ldd	r24, Y+19	; 0x13
    1afe:	9c 89       	ldd	r25, Y+20	; 0x14
    1b00:	98 8b       	std	Y+16, r25	; 0x10
    1b02:	8f 87       	std	Y+15, r24	; 0x0f
    1b04:	8f 85       	ldd	r24, Y+15	; 0x0f
    1b06:	98 89       	ldd	r25, Y+16	; 0x10
    1b08:	01 97       	sbiw	r24, 0x01	; 1
    1b0a:	f1 f7       	brne	.-4      	; 0x1b08 <LCD_vid_Init+0x332>
    1b0c:	98 8b       	std	Y+16, r25	; 0x10
    1b0e:	8f 87       	std	Y+15, r24	; 0x0f
 _delay_ms(1);
 LCD_vid_WriteCommand( LCD_u8_CLEAR_SCREEN);
    1b10:	81 e0       	ldi	r24, 0x01	; 1
    1b12:	0e 94 09 0e 	call	0x1c12	; 0x1c12 <LCD_vid_WriteCommand>
    1b16:	80 e0       	ldi	r24, 0x00	; 0
    1b18:	90 e0       	ldi	r25, 0x00	; 0
    1b1a:	a0 e0       	ldi	r26, 0x00	; 0
    1b1c:	b0 e4       	ldi	r27, 0x40	; 64
    1b1e:	8b 87       	std	Y+11, r24	; 0x0b
    1b20:	9c 87       	std	Y+12, r25	; 0x0c
    1b22:	ad 87       	std	Y+13, r26	; 0x0d
    1b24:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b26:	6b 85       	ldd	r22, Y+11	; 0x0b
    1b28:	7c 85       	ldd	r23, Y+12	; 0x0c
    1b2a:	8d 85       	ldd	r24, Y+13	; 0x0d
    1b2c:	9e 85       	ldd	r25, Y+14	; 0x0e
    1b2e:	20 e0       	ldi	r18, 0x00	; 0
    1b30:	30 e0       	ldi	r19, 0x00	; 0
    1b32:	4a e7       	ldi	r20, 0x7A	; 122
    1b34:	53 e4       	ldi	r21, 0x43	; 67
    1b36:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1b3a:	dc 01       	movw	r26, r24
    1b3c:	cb 01       	movw	r24, r22
    1b3e:	8f 83       	std	Y+7, r24	; 0x07
    1b40:	98 87       	std	Y+8, r25	; 0x08
    1b42:	a9 87       	std	Y+9, r26	; 0x09
    1b44:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1b46:	6f 81       	ldd	r22, Y+7	; 0x07
    1b48:	78 85       	ldd	r23, Y+8	; 0x08
    1b4a:	89 85       	ldd	r24, Y+9	; 0x09
    1b4c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b4e:	20 e0       	ldi	r18, 0x00	; 0
    1b50:	30 e0       	ldi	r19, 0x00	; 0
    1b52:	40 e8       	ldi	r20, 0x80	; 128
    1b54:	5f e3       	ldi	r21, 0x3F	; 63
    1b56:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1b5a:	88 23       	and	r24, r24
    1b5c:	2c f4       	brge	.+10     	; 0x1b68 <LCD_vid_Init+0x392>
		__ticks = 1;
    1b5e:	81 e0       	ldi	r24, 0x01	; 1
    1b60:	90 e0       	ldi	r25, 0x00	; 0
    1b62:	9e 83       	std	Y+6, r25	; 0x06
    1b64:	8d 83       	std	Y+5, r24	; 0x05
    1b66:	3f c0       	rjmp	.+126    	; 0x1be6 <LCD_vid_Init+0x410>
	else if (__tmp > 65535)
    1b68:	6f 81       	ldd	r22, Y+7	; 0x07
    1b6a:	78 85       	ldd	r23, Y+8	; 0x08
    1b6c:	89 85       	ldd	r24, Y+9	; 0x09
    1b6e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b70:	20 e0       	ldi	r18, 0x00	; 0
    1b72:	3f ef       	ldi	r19, 0xFF	; 255
    1b74:	4f e7       	ldi	r20, 0x7F	; 127
    1b76:	57 e4       	ldi	r21, 0x47	; 71
    1b78:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1b7c:	18 16       	cp	r1, r24
    1b7e:	4c f5       	brge	.+82     	; 0x1bd2 <LCD_vid_Init+0x3fc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b80:	6b 85       	ldd	r22, Y+11	; 0x0b
    1b82:	7c 85       	ldd	r23, Y+12	; 0x0c
    1b84:	8d 85       	ldd	r24, Y+13	; 0x0d
    1b86:	9e 85       	ldd	r25, Y+14	; 0x0e
    1b88:	20 e0       	ldi	r18, 0x00	; 0
    1b8a:	30 e0       	ldi	r19, 0x00	; 0
    1b8c:	40 e2       	ldi	r20, 0x20	; 32
    1b8e:	51 e4       	ldi	r21, 0x41	; 65
    1b90:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1b94:	dc 01       	movw	r26, r24
    1b96:	cb 01       	movw	r24, r22
    1b98:	bc 01       	movw	r22, r24
    1b9a:	cd 01       	movw	r24, r26
    1b9c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1ba0:	dc 01       	movw	r26, r24
    1ba2:	cb 01       	movw	r24, r22
    1ba4:	9e 83       	std	Y+6, r25	; 0x06
    1ba6:	8d 83       	std	Y+5, r24	; 0x05
    1ba8:	0f c0       	rjmp	.+30     	; 0x1bc8 <LCD_vid_Init+0x3f2>
    1baa:	89 e1       	ldi	r24, 0x19	; 25
    1bac:	90 e0       	ldi	r25, 0x00	; 0
    1bae:	9c 83       	std	Y+4, r25	; 0x04
    1bb0:	8b 83       	std	Y+3, r24	; 0x03
    1bb2:	8b 81       	ldd	r24, Y+3	; 0x03
    1bb4:	9c 81       	ldd	r25, Y+4	; 0x04
    1bb6:	01 97       	sbiw	r24, 0x01	; 1
    1bb8:	f1 f7       	brne	.-4      	; 0x1bb6 <LCD_vid_Init+0x3e0>
    1bba:	9c 83       	std	Y+4, r25	; 0x04
    1bbc:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1bbe:	8d 81       	ldd	r24, Y+5	; 0x05
    1bc0:	9e 81       	ldd	r25, Y+6	; 0x06
    1bc2:	01 97       	sbiw	r24, 0x01	; 1
    1bc4:	9e 83       	std	Y+6, r25	; 0x06
    1bc6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1bc8:	8d 81       	ldd	r24, Y+5	; 0x05
    1bca:	9e 81       	ldd	r25, Y+6	; 0x06
    1bcc:	00 97       	sbiw	r24, 0x00	; 0
    1bce:	69 f7       	brne	.-38     	; 0x1baa <LCD_vid_Init+0x3d4>
    1bd0:	14 c0       	rjmp	.+40     	; 0x1bfa <LCD_vid_Init+0x424>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1bd2:	6f 81       	ldd	r22, Y+7	; 0x07
    1bd4:	78 85       	ldd	r23, Y+8	; 0x08
    1bd6:	89 85       	ldd	r24, Y+9	; 0x09
    1bd8:	9a 85       	ldd	r25, Y+10	; 0x0a
    1bda:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1bde:	dc 01       	movw	r26, r24
    1be0:	cb 01       	movw	r24, r22
    1be2:	9e 83       	std	Y+6, r25	; 0x06
    1be4:	8d 83       	std	Y+5, r24	; 0x05
    1be6:	8d 81       	ldd	r24, Y+5	; 0x05
    1be8:	9e 81       	ldd	r25, Y+6	; 0x06
    1bea:	9a 83       	std	Y+2, r25	; 0x02
    1bec:	89 83       	std	Y+1, r24	; 0x01
    1bee:	89 81       	ldd	r24, Y+1	; 0x01
    1bf0:	9a 81       	ldd	r25, Y+2	; 0x02
    1bf2:	01 97       	sbiw	r24, 0x01	; 1
    1bf4:	f1 f7       	brne	.-4      	; 0x1bf2 <LCD_vid_Init+0x41c>
    1bf6:	9a 83       	std	Y+2, r25	; 0x02
    1bf8:	89 83       	std	Y+1, r24	; 0x01
  _delay_ms(2);
 LCD_vid_WriteCommand( LCD_u8_CURSOR_DIR);	//ENTRY POINT SET
    1bfa:	86 e0       	ldi	r24, 0x06	; 6
    1bfc:	0e 94 09 0e 	call	0x1c12	; 0x1c12 <LCD_vid_WriteCommand>

}
    1c00:	e8 96       	adiw	r28, 0x38	; 56
    1c02:	0f b6       	in	r0, 0x3f	; 63
    1c04:	f8 94       	cli
    1c06:	de bf       	out	0x3e, r29	; 62
    1c08:	0f be       	out	0x3f, r0	; 63
    1c0a:	cd bf       	out	0x3d, r28	; 61
    1c0c:	cf 91       	pop	r28
    1c0e:	df 91       	pop	r29
    1c10:	08 95       	ret

00001c12 <LCD_vid_WriteCommand>:
	}else
		Local_u8_var=0;
	Local_u8_var++;
}
*/
void LCD_vid_WriteCommand(u8 Copy_u8_Command ){
    1c12:	df 93       	push	r29
    1c14:	cf 93       	push	r28
    1c16:	0f 92       	push	r0
    1c18:	cd b7       	in	r28, 0x3d	; 61
    1c1a:	de b7       	in	r29, 0x3e	; 62
    1c1c:	89 83       	std	Y+1, r24	; 0x01
	DIO_Dyn_vid_SetPinValue(LCD_u8_PIN_RS,DIO_Dyn_u8_LOW);
    1c1e:	80 e0       	ldi	r24, 0x00	; 0
    1c20:	65 e0       	ldi	r22, 0x05	; 5
    1c22:	40 e0       	ldi	r20, 0x00	; 0
    1c24:	0e 94 6d 07 	call	0xeda	; 0xeda <DIO_Dyn_vid_SetPinValue>
	LCD_SvidExecute(Copy_u8_Command);
    1c28:	89 81       	ldd	r24, Y+1	; 0x01
    1c2a:	0e 94 1b 0e 	call	0x1c36	; 0x1c36 <LCD_SvidExecute>
}
    1c2e:	0f 90       	pop	r0
    1c30:	cf 91       	pop	r28
    1c32:	df 91       	pop	r29
    1c34:	08 95       	ret

00001c36 <LCD_SvidExecute>:
 static void LCD_SvidExecute(u8 Copy_u8DataCmd){
    1c36:	df 93       	push	r29
    1c38:	cf 93       	push	r28
    1c3a:	cd b7       	in	r28, 0x3d	; 61
    1c3c:	de b7       	in	r29, 0x3e	; 62
    1c3e:	e9 97       	sbiw	r28, 0x39	; 57
    1c40:	0f b6       	in	r0, 0x3f	; 63
    1c42:	f8 94       	cli
    1c44:	de bf       	out	0x3e, r29	; 62
    1c46:	0f be       	out	0x3f, r0	; 63
    1c48:	cd bf       	out	0x3d, r28	; 61
    1c4a:	89 af       	std	Y+57, r24	; 0x39
	DIO_Dyn_vid_SetPinValue(LCD_u8_PIN_RW,DIO_Dyn_u8_LOW);
    1c4c:	80 e0       	ldi	r24, 0x00	; 0
    1c4e:	66 e0       	ldi	r22, 0x06	; 6
    1c50:	40 e0       	ldi	r20, 0x00	; 0
    1c52:	0e 94 6d 07 	call	0xeda	; 0xeda <DIO_Dyn_vid_SetPinValue>
    1c56:	80 e0       	ldi	r24, 0x00	; 0
    1c58:	90 e0       	ldi	r25, 0x00	; 0
    1c5a:	a0 e8       	ldi	r26, 0x80	; 128
    1c5c:	bf e3       	ldi	r27, 0x3F	; 63
    1c5e:	8d ab       	std	Y+53, r24	; 0x35
    1c60:	9e ab       	std	Y+54, r25	; 0x36
    1c62:	af ab       	std	Y+55, r26	; 0x37
    1c64:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c66:	6d a9       	ldd	r22, Y+53	; 0x35
    1c68:	7e a9       	ldd	r23, Y+54	; 0x36
    1c6a:	8f a9       	ldd	r24, Y+55	; 0x37
    1c6c:	98 ad       	ldd	r25, Y+56	; 0x38
    1c6e:	20 e0       	ldi	r18, 0x00	; 0
    1c70:	30 e0       	ldi	r19, 0x00	; 0
    1c72:	4a e7       	ldi	r20, 0x7A	; 122
    1c74:	53 e4       	ldi	r21, 0x43	; 67
    1c76:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1c7a:	dc 01       	movw	r26, r24
    1c7c:	cb 01       	movw	r24, r22
    1c7e:	89 ab       	std	Y+49, r24	; 0x31
    1c80:	9a ab       	std	Y+50, r25	; 0x32
    1c82:	ab ab       	std	Y+51, r26	; 0x33
    1c84:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1c86:	69 a9       	ldd	r22, Y+49	; 0x31
    1c88:	7a a9       	ldd	r23, Y+50	; 0x32
    1c8a:	8b a9       	ldd	r24, Y+51	; 0x33
    1c8c:	9c a9       	ldd	r25, Y+52	; 0x34
    1c8e:	20 e0       	ldi	r18, 0x00	; 0
    1c90:	30 e0       	ldi	r19, 0x00	; 0
    1c92:	40 e8       	ldi	r20, 0x80	; 128
    1c94:	5f e3       	ldi	r21, 0x3F	; 63
    1c96:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1c9a:	88 23       	and	r24, r24
    1c9c:	2c f4       	brge	.+10     	; 0x1ca8 <LCD_SvidExecute+0x72>
		__ticks = 1;
    1c9e:	81 e0       	ldi	r24, 0x01	; 1
    1ca0:	90 e0       	ldi	r25, 0x00	; 0
    1ca2:	98 ab       	std	Y+48, r25	; 0x30
    1ca4:	8f a7       	std	Y+47, r24	; 0x2f
    1ca6:	3f c0       	rjmp	.+126    	; 0x1d26 <LCD_SvidExecute+0xf0>
	else if (__tmp > 65535)
    1ca8:	69 a9       	ldd	r22, Y+49	; 0x31
    1caa:	7a a9       	ldd	r23, Y+50	; 0x32
    1cac:	8b a9       	ldd	r24, Y+51	; 0x33
    1cae:	9c a9       	ldd	r25, Y+52	; 0x34
    1cb0:	20 e0       	ldi	r18, 0x00	; 0
    1cb2:	3f ef       	ldi	r19, 0xFF	; 255
    1cb4:	4f e7       	ldi	r20, 0x7F	; 127
    1cb6:	57 e4       	ldi	r21, 0x47	; 71
    1cb8:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1cbc:	18 16       	cp	r1, r24
    1cbe:	4c f5       	brge	.+82     	; 0x1d12 <LCD_SvidExecute+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1cc0:	6d a9       	ldd	r22, Y+53	; 0x35
    1cc2:	7e a9       	ldd	r23, Y+54	; 0x36
    1cc4:	8f a9       	ldd	r24, Y+55	; 0x37
    1cc6:	98 ad       	ldd	r25, Y+56	; 0x38
    1cc8:	20 e0       	ldi	r18, 0x00	; 0
    1cca:	30 e0       	ldi	r19, 0x00	; 0
    1ccc:	40 e2       	ldi	r20, 0x20	; 32
    1cce:	51 e4       	ldi	r21, 0x41	; 65
    1cd0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1cd4:	dc 01       	movw	r26, r24
    1cd6:	cb 01       	movw	r24, r22
    1cd8:	bc 01       	movw	r22, r24
    1cda:	cd 01       	movw	r24, r26
    1cdc:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1ce0:	dc 01       	movw	r26, r24
    1ce2:	cb 01       	movw	r24, r22
    1ce4:	98 ab       	std	Y+48, r25	; 0x30
    1ce6:	8f a7       	std	Y+47, r24	; 0x2f
    1ce8:	0f c0       	rjmp	.+30     	; 0x1d08 <LCD_SvidExecute+0xd2>
    1cea:	89 e1       	ldi	r24, 0x19	; 25
    1cec:	90 e0       	ldi	r25, 0x00	; 0
    1cee:	9e a7       	std	Y+46, r25	; 0x2e
    1cf0:	8d a7       	std	Y+45, r24	; 0x2d
    1cf2:	8d a5       	ldd	r24, Y+45	; 0x2d
    1cf4:	9e a5       	ldd	r25, Y+46	; 0x2e
    1cf6:	01 97       	sbiw	r24, 0x01	; 1
    1cf8:	f1 f7       	brne	.-4      	; 0x1cf6 <LCD_SvidExecute+0xc0>
    1cfa:	9e a7       	std	Y+46, r25	; 0x2e
    1cfc:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1cfe:	8f a5       	ldd	r24, Y+47	; 0x2f
    1d00:	98 a9       	ldd	r25, Y+48	; 0x30
    1d02:	01 97       	sbiw	r24, 0x01	; 1
    1d04:	98 ab       	std	Y+48, r25	; 0x30
    1d06:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d08:	8f a5       	ldd	r24, Y+47	; 0x2f
    1d0a:	98 a9       	ldd	r25, Y+48	; 0x30
    1d0c:	00 97       	sbiw	r24, 0x00	; 0
    1d0e:	69 f7       	brne	.-38     	; 0x1cea <LCD_SvidExecute+0xb4>
    1d10:	14 c0       	rjmp	.+40     	; 0x1d3a <LCD_SvidExecute+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d12:	69 a9       	ldd	r22, Y+49	; 0x31
    1d14:	7a a9       	ldd	r23, Y+50	; 0x32
    1d16:	8b a9       	ldd	r24, Y+51	; 0x33
    1d18:	9c a9       	ldd	r25, Y+52	; 0x34
    1d1a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1d1e:	dc 01       	movw	r26, r24
    1d20:	cb 01       	movw	r24, r22
    1d22:	98 ab       	std	Y+48, r25	; 0x30
    1d24:	8f a7       	std	Y+47, r24	; 0x2f
    1d26:	8f a5       	ldd	r24, Y+47	; 0x2f
    1d28:	98 a9       	ldd	r25, Y+48	; 0x30
    1d2a:	9c a7       	std	Y+44, r25	; 0x2c
    1d2c:	8b a7       	std	Y+43, r24	; 0x2b
    1d2e:	8b a5       	ldd	r24, Y+43	; 0x2b
    1d30:	9c a5       	ldd	r25, Y+44	; 0x2c
    1d32:	01 97       	sbiw	r24, 0x01	; 1
    1d34:	f1 f7       	brne	.-4      	; 0x1d32 <LCD_SvidExecute+0xfc>
    1d36:	9c a7       	std	Y+44, r25	; 0x2c
    1d38:	8b a7       	std	Y+43, r24	; 0x2b

_delay_ms(1);
DIO_Dyn_vid_SetPinValue(LCD_u8_PIN_E,DIO_Dyn_u8_HIGH);
    1d3a:	80 e0       	ldi	r24, 0x00	; 0
    1d3c:	67 e0       	ldi	r22, 0x07	; 7
    1d3e:	41 e0       	ldi	r20, 0x01	; 1
    1d40:	0e 94 6d 07 	call	0xeda	; 0xeda <DIO_Dyn_vid_SetPinValue>
    1d44:	80 e0       	ldi	r24, 0x00	; 0
    1d46:	90 e0       	ldi	r25, 0x00	; 0
    1d48:	a0 e8       	ldi	r26, 0x80	; 128
    1d4a:	bf e3       	ldi	r27, 0x3F	; 63
    1d4c:	8f a3       	std	Y+39, r24	; 0x27
    1d4e:	98 a7       	std	Y+40, r25	; 0x28
    1d50:	a9 a7       	std	Y+41, r26	; 0x29
    1d52:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d54:	6f a1       	ldd	r22, Y+39	; 0x27
    1d56:	78 a5       	ldd	r23, Y+40	; 0x28
    1d58:	89 a5       	ldd	r24, Y+41	; 0x29
    1d5a:	9a a5       	ldd	r25, Y+42	; 0x2a
    1d5c:	20 e0       	ldi	r18, 0x00	; 0
    1d5e:	30 e0       	ldi	r19, 0x00	; 0
    1d60:	4a e7       	ldi	r20, 0x7A	; 122
    1d62:	53 e4       	ldi	r21, 0x43	; 67
    1d64:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1d68:	dc 01       	movw	r26, r24
    1d6a:	cb 01       	movw	r24, r22
    1d6c:	8b a3       	std	Y+35, r24	; 0x23
    1d6e:	9c a3       	std	Y+36, r25	; 0x24
    1d70:	ad a3       	std	Y+37, r26	; 0x25
    1d72:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1d74:	6b a1       	ldd	r22, Y+35	; 0x23
    1d76:	7c a1       	ldd	r23, Y+36	; 0x24
    1d78:	8d a1       	ldd	r24, Y+37	; 0x25
    1d7a:	9e a1       	ldd	r25, Y+38	; 0x26
    1d7c:	20 e0       	ldi	r18, 0x00	; 0
    1d7e:	30 e0       	ldi	r19, 0x00	; 0
    1d80:	40 e8       	ldi	r20, 0x80	; 128
    1d82:	5f e3       	ldi	r21, 0x3F	; 63
    1d84:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1d88:	88 23       	and	r24, r24
    1d8a:	2c f4       	brge	.+10     	; 0x1d96 <LCD_SvidExecute+0x160>
		__ticks = 1;
    1d8c:	81 e0       	ldi	r24, 0x01	; 1
    1d8e:	90 e0       	ldi	r25, 0x00	; 0
    1d90:	9a a3       	std	Y+34, r25	; 0x22
    1d92:	89 a3       	std	Y+33, r24	; 0x21
    1d94:	3f c0       	rjmp	.+126    	; 0x1e14 <LCD_SvidExecute+0x1de>
	else if (__tmp > 65535)
    1d96:	6b a1       	ldd	r22, Y+35	; 0x23
    1d98:	7c a1       	ldd	r23, Y+36	; 0x24
    1d9a:	8d a1       	ldd	r24, Y+37	; 0x25
    1d9c:	9e a1       	ldd	r25, Y+38	; 0x26
    1d9e:	20 e0       	ldi	r18, 0x00	; 0
    1da0:	3f ef       	ldi	r19, 0xFF	; 255
    1da2:	4f e7       	ldi	r20, 0x7F	; 127
    1da4:	57 e4       	ldi	r21, 0x47	; 71
    1da6:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1daa:	18 16       	cp	r1, r24
    1dac:	4c f5       	brge	.+82     	; 0x1e00 <LCD_SvidExecute+0x1ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1dae:	6f a1       	ldd	r22, Y+39	; 0x27
    1db0:	78 a5       	ldd	r23, Y+40	; 0x28
    1db2:	89 a5       	ldd	r24, Y+41	; 0x29
    1db4:	9a a5       	ldd	r25, Y+42	; 0x2a
    1db6:	20 e0       	ldi	r18, 0x00	; 0
    1db8:	30 e0       	ldi	r19, 0x00	; 0
    1dba:	40 e2       	ldi	r20, 0x20	; 32
    1dbc:	51 e4       	ldi	r21, 0x41	; 65
    1dbe:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1dc2:	dc 01       	movw	r26, r24
    1dc4:	cb 01       	movw	r24, r22
    1dc6:	bc 01       	movw	r22, r24
    1dc8:	cd 01       	movw	r24, r26
    1dca:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1dce:	dc 01       	movw	r26, r24
    1dd0:	cb 01       	movw	r24, r22
    1dd2:	9a a3       	std	Y+34, r25	; 0x22
    1dd4:	89 a3       	std	Y+33, r24	; 0x21
    1dd6:	0f c0       	rjmp	.+30     	; 0x1df6 <LCD_SvidExecute+0x1c0>
    1dd8:	89 e1       	ldi	r24, 0x19	; 25
    1dda:	90 e0       	ldi	r25, 0x00	; 0
    1ddc:	98 a3       	std	Y+32, r25	; 0x20
    1dde:	8f 8f       	std	Y+31, r24	; 0x1f
    1de0:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1de2:	98 a1       	ldd	r25, Y+32	; 0x20
    1de4:	01 97       	sbiw	r24, 0x01	; 1
    1de6:	f1 f7       	brne	.-4      	; 0x1de4 <LCD_SvidExecute+0x1ae>
    1de8:	98 a3       	std	Y+32, r25	; 0x20
    1dea:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1dec:	89 a1       	ldd	r24, Y+33	; 0x21
    1dee:	9a a1       	ldd	r25, Y+34	; 0x22
    1df0:	01 97       	sbiw	r24, 0x01	; 1
    1df2:	9a a3       	std	Y+34, r25	; 0x22
    1df4:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1df6:	89 a1       	ldd	r24, Y+33	; 0x21
    1df8:	9a a1       	ldd	r25, Y+34	; 0x22
    1dfa:	00 97       	sbiw	r24, 0x00	; 0
    1dfc:	69 f7       	brne	.-38     	; 0x1dd8 <LCD_SvidExecute+0x1a2>
    1dfe:	14 c0       	rjmp	.+40     	; 0x1e28 <LCD_SvidExecute+0x1f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e00:	6b a1       	ldd	r22, Y+35	; 0x23
    1e02:	7c a1       	ldd	r23, Y+36	; 0x24
    1e04:	8d a1       	ldd	r24, Y+37	; 0x25
    1e06:	9e a1       	ldd	r25, Y+38	; 0x26
    1e08:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1e0c:	dc 01       	movw	r26, r24
    1e0e:	cb 01       	movw	r24, r22
    1e10:	9a a3       	std	Y+34, r25	; 0x22
    1e12:	89 a3       	std	Y+33, r24	; 0x21
    1e14:	89 a1       	ldd	r24, Y+33	; 0x21
    1e16:	9a a1       	ldd	r25, Y+34	; 0x22
    1e18:	9e 8f       	std	Y+30, r25	; 0x1e
    1e1a:	8d 8f       	std	Y+29, r24	; 0x1d
    1e1c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1e1e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1e20:	01 97       	sbiw	r24, 0x01	; 1
    1e22:	f1 f7       	brne	.-4      	; 0x1e20 <LCD_SvidExecute+0x1ea>
    1e24:	9e 8f       	std	Y+30, r25	; 0x1e
    1e26:	8d 8f       	std	Y+29, r24	; 0x1d
_delay_ms(1);

	if( GET_BIT(Copy_u8DataCmd , LCD_u8_PIN_0)  ){
    1e28:	89 ad       	ldd	r24, Y+57	; 0x39
    1e2a:	88 2f       	mov	r24, r24
    1e2c:	90 e0       	ldi	r25, 0x00	; 0
    1e2e:	81 70       	andi	r24, 0x01	; 1
    1e30:	90 70       	andi	r25, 0x00	; 0
    1e32:	88 23       	and	r24, r24
    1e34:	31 f0       	breq	.+12     	; 0x1e42 <LCD_SvidExecute+0x20c>
		DIO_Dyn_vid_SetPinValue(LCD_u8_PIN_D0,DIO_Dyn_u8_HIGH);
    1e36:	81 e0       	ldi	r24, 0x01	; 1
    1e38:	60 e0       	ldi	r22, 0x00	; 0
    1e3a:	41 e0       	ldi	r20, 0x01	; 1
    1e3c:	0e 94 6d 07 	call	0xeda	; 0xeda <DIO_Dyn_vid_SetPinValue>
    1e40:	05 c0       	rjmp	.+10     	; 0x1e4c <LCD_SvidExecute+0x216>
	}else{
		DIO_Dyn_vid_SetPinValue(LCD_u8_PIN_D0,DIO_Dyn_u8_LOW);
    1e42:	81 e0       	ldi	r24, 0x01	; 1
    1e44:	60 e0       	ldi	r22, 0x00	; 0
    1e46:	40 e0       	ldi	r20, 0x00	; 0
    1e48:	0e 94 6d 07 	call	0xeda	; 0xeda <DIO_Dyn_vid_SetPinValue>
	}
	if( GET_BIT(Copy_u8DataCmd , LCD_u8_PIN_1)  ){
    1e4c:	89 ad       	ldd	r24, Y+57	; 0x39
    1e4e:	88 2f       	mov	r24, r24
    1e50:	90 e0       	ldi	r25, 0x00	; 0
    1e52:	82 70       	andi	r24, 0x02	; 2
    1e54:	90 70       	andi	r25, 0x00	; 0
    1e56:	00 97       	sbiw	r24, 0x00	; 0
    1e58:	31 f0       	breq	.+12     	; 0x1e66 <LCD_SvidExecute+0x230>
		DIO_Dyn_vid_SetPinValue(LCD_u8_PIN_D1,DIO_Dyn_u8_HIGH);
    1e5a:	81 e0       	ldi	r24, 0x01	; 1
    1e5c:	61 e0       	ldi	r22, 0x01	; 1
    1e5e:	41 e0       	ldi	r20, 0x01	; 1
    1e60:	0e 94 6d 07 	call	0xeda	; 0xeda <DIO_Dyn_vid_SetPinValue>
    1e64:	05 c0       	rjmp	.+10     	; 0x1e70 <LCD_SvidExecute+0x23a>
	}else{
		DIO_Dyn_vid_SetPinValue(LCD_u8_PIN_D1,DIO_Dyn_u8_LOW);
    1e66:	81 e0       	ldi	r24, 0x01	; 1
    1e68:	61 e0       	ldi	r22, 0x01	; 1
    1e6a:	40 e0       	ldi	r20, 0x00	; 0
    1e6c:	0e 94 6d 07 	call	0xeda	; 0xeda <DIO_Dyn_vid_SetPinValue>
	}
	if( GET_BIT(Copy_u8DataCmd , LCD_u8_PIN_2)  ){
    1e70:	89 ad       	ldd	r24, Y+57	; 0x39
    1e72:	88 2f       	mov	r24, r24
    1e74:	90 e0       	ldi	r25, 0x00	; 0
    1e76:	84 70       	andi	r24, 0x04	; 4
    1e78:	90 70       	andi	r25, 0x00	; 0
    1e7a:	00 97       	sbiw	r24, 0x00	; 0
    1e7c:	31 f0       	breq	.+12     	; 0x1e8a <LCD_SvidExecute+0x254>
		DIO_Dyn_vid_SetPinValue(LCD_u8_PIN_D2,DIO_Dyn_u8_HIGH);
    1e7e:	81 e0       	ldi	r24, 0x01	; 1
    1e80:	62 e0       	ldi	r22, 0x02	; 2
    1e82:	41 e0       	ldi	r20, 0x01	; 1
    1e84:	0e 94 6d 07 	call	0xeda	; 0xeda <DIO_Dyn_vid_SetPinValue>
    1e88:	05 c0       	rjmp	.+10     	; 0x1e94 <LCD_SvidExecute+0x25e>
	}else{
		DIO_Dyn_vid_SetPinValue(LCD_u8_PIN_D2,DIO_Dyn_u8_LOW);
    1e8a:	81 e0       	ldi	r24, 0x01	; 1
    1e8c:	62 e0       	ldi	r22, 0x02	; 2
    1e8e:	40 e0       	ldi	r20, 0x00	; 0
    1e90:	0e 94 6d 07 	call	0xeda	; 0xeda <DIO_Dyn_vid_SetPinValue>
	}
	if( GET_BIT(Copy_u8DataCmd , LCD_u8_PIN_3)  ){
    1e94:	89 ad       	ldd	r24, Y+57	; 0x39
    1e96:	88 2f       	mov	r24, r24
    1e98:	90 e0       	ldi	r25, 0x00	; 0
    1e9a:	88 70       	andi	r24, 0x08	; 8
    1e9c:	90 70       	andi	r25, 0x00	; 0
    1e9e:	00 97       	sbiw	r24, 0x00	; 0
    1ea0:	31 f0       	breq	.+12     	; 0x1eae <LCD_SvidExecute+0x278>
		DIO_Dyn_vid_SetPinValue(LCD_u8_PIN_D3,DIO_Dyn_u8_HIGH);
    1ea2:	81 e0       	ldi	r24, 0x01	; 1
    1ea4:	63 e0       	ldi	r22, 0x03	; 3
    1ea6:	41 e0       	ldi	r20, 0x01	; 1
    1ea8:	0e 94 6d 07 	call	0xeda	; 0xeda <DIO_Dyn_vid_SetPinValue>
    1eac:	05 c0       	rjmp	.+10     	; 0x1eb8 <LCD_SvidExecute+0x282>
	}else{
		DIO_Dyn_vid_SetPinValue(LCD_u8_PIN_D3,DIO_Dyn_u8_LOW);
    1eae:	81 e0       	ldi	r24, 0x01	; 1
    1eb0:	63 e0       	ldi	r22, 0x03	; 3
    1eb2:	40 e0       	ldi	r20, 0x00	; 0
    1eb4:	0e 94 6d 07 	call	0xeda	; 0xeda <DIO_Dyn_vid_SetPinValue>
	}
	if( GET_BIT(Copy_u8DataCmd , LCD_u8_PIN_4)  ){
    1eb8:	89 ad       	ldd	r24, Y+57	; 0x39
    1eba:	88 2f       	mov	r24, r24
    1ebc:	90 e0       	ldi	r25, 0x00	; 0
    1ebe:	80 71       	andi	r24, 0x10	; 16
    1ec0:	90 70       	andi	r25, 0x00	; 0
    1ec2:	00 97       	sbiw	r24, 0x00	; 0
    1ec4:	31 f0       	breq	.+12     	; 0x1ed2 <LCD_SvidExecute+0x29c>
		DIO_Dyn_vid_SetPinValue(LCD_u8_PIN_D4,DIO_Dyn_u8_HIGH);
    1ec6:	81 e0       	ldi	r24, 0x01	; 1
    1ec8:	64 e0       	ldi	r22, 0x04	; 4
    1eca:	41 e0       	ldi	r20, 0x01	; 1
    1ecc:	0e 94 6d 07 	call	0xeda	; 0xeda <DIO_Dyn_vid_SetPinValue>
    1ed0:	05 c0       	rjmp	.+10     	; 0x1edc <LCD_SvidExecute+0x2a6>
	}else{
		DIO_Dyn_vid_SetPinValue(LCD_u8_PIN_D4,DIO_Dyn_u8_LOW);
    1ed2:	81 e0       	ldi	r24, 0x01	; 1
    1ed4:	64 e0       	ldi	r22, 0x04	; 4
    1ed6:	40 e0       	ldi	r20, 0x00	; 0
    1ed8:	0e 94 6d 07 	call	0xeda	; 0xeda <DIO_Dyn_vid_SetPinValue>
	}
	if( GET_BIT(Copy_u8DataCmd , LCD_u8_PIN_5)  ){
    1edc:	89 ad       	ldd	r24, Y+57	; 0x39
    1ede:	88 2f       	mov	r24, r24
    1ee0:	90 e0       	ldi	r25, 0x00	; 0
    1ee2:	80 72       	andi	r24, 0x20	; 32
    1ee4:	90 70       	andi	r25, 0x00	; 0
    1ee6:	00 97       	sbiw	r24, 0x00	; 0
    1ee8:	31 f0       	breq	.+12     	; 0x1ef6 <LCD_SvidExecute+0x2c0>
		DIO_Dyn_vid_SetPinValue(LCD_u8_PIN_D5,DIO_Dyn_u8_HIGH);
    1eea:	81 e0       	ldi	r24, 0x01	; 1
    1eec:	65 e0       	ldi	r22, 0x05	; 5
    1eee:	41 e0       	ldi	r20, 0x01	; 1
    1ef0:	0e 94 6d 07 	call	0xeda	; 0xeda <DIO_Dyn_vid_SetPinValue>
    1ef4:	05 c0       	rjmp	.+10     	; 0x1f00 <LCD_SvidExecute+0x2ca>
	}else{
		DIO_Dyn_vid_SetPinValue(LCD_u8_PIN_D5,DIO_Dyn_u8_LOW);
    1ef6:	81 e0       	ldi	r24, 0x01	; 1
    1ef8:	65 e0       	ldi	r22, 0x05	; 5
    1efa:	40 e0       	ldi	r20, 0x00	; 0
    1efc:	0e 94 6d 07 	call	0xeda	; 0xeda <DIO_Dyn_vid_SetPinValue>
	}
	if( GET_BIT(Copy_u8DataCmd , LCD_u8_PIN_6)  ){
    1f00:	89 ad       	ldd	r24, Y+57	; 0x39
    1f02:	88 2f       	mov	r24, r24
    1f04:	90 e0       	ldi	r25, 0x00	; 0
    1f06:	80 74       	andi	r24, 0x40	; 64
    1f08:	90 70       	andi	r25, 0x00	; 0
    1f0a:	00 97       	sbiw	r24, 0x00	; 0
    1f0c:	31 f0       	breq	.+12     	; 0x1f1a <LCD_SvidExecute+0x2e4>
		DIO_Dyn_vid_SetPinValue(LCD_u8_PIN_D6,DIO_Dyn_u8_HIGH);
    1f0e:	81 e0       	ldi	r24, 0x01	; 1
    1f10:	66 e0       	ldi	r22, 0x06	; 6
    1f12:	41 e0       	ldi	r20, 0x01	; 1
    1f14:	0e 94 6d 07 	call	0xeda	; 0xeda <DIO_Dyn_vid_SetPinValue>
    1f18:	05 c0       	rjmp	.+10     	; 0x1f24 <LCD_SvidExecute+0x2ee>
	}else{
		DIO_Dyn_vid_SetPinValue(LCD_u8_PIN_D6,DIO_Dyn_u8_LOW);
    1f1a:	81 e0       	ldi	r24, 0x01	; 1
    1f1c:	66 e0       	ldi	r22, 0x06	; 6
    1f1e:	40 e0       	ldi	r20, 0x00	; 0
    1f20:	0e 94 6d 07 	call	0xeda	; 0xeda <DIO_Dyn_vid_SetPinValue>
	}
	if( GET_BIT(Copy_u8DataCmd , LCD_u8_PIN_7)  ){
    1f24:	89 ad       	ldd	r24, Y+57	; 0x39
    1f26:	88 23       	and	r24, r24
    1f28:	34 f4       	brge	.+12     	; 0x1f36 <LCD_SvidExecute+0x300>
		DIO_Dyn_vid_SetPinValue(LCD_u8_PIN_D7,DIO_Dyn_u8_HIGH);
    1f2a:	81 e0       	ldi	r24, 0x01	; 1
    1f2c:	67 e0       	ldi	r22, 0x07	; 7
    1f2e:	41 e0       	ldi	r20, 0x01	; 1
    1f30:	0e 94 6d 07 	call	0xeda	; 0xeda <DIO_Dyn_vid_SetPinValue>
    1f34:	05 c0       	rjmp	.+10     	; 0x1f40 <LCD_SvidExecute+0x30a>
	}else{
		DIO_Dyn_vid_SetPinValue(LCD_u8_PIN_D7,DIO_Dyn_u8_LOW);
    1f36:	81 e0       	ldi	r24, 0x01	; 1
    1f38:	67 e0       	ldi	r22, 0x07	; 7
    1f3a:	40 e0       	ldi	r20, 0x00	; 0
    1f3c:	0e 94 6d 07 	call	0xeda	; 0xeda <DIO_Dyn_vid_SetPinValue>
    1f40:	80 e0       	ldi	r24, 0x00	; 0
    1f42:	90 e0       	ldi	r25, 0x00	; 0
    1f44:	a0 e8       	ldi	r26, 0x80	; 128
    1f46:	bf e3       	ldi	r27, 0x3F	; 63
    1f48:	89 8f       	std	Y+25, r24	; 0x19
    1f4a:	9a 8f       	std	Y+26, r25	; 0x1a
    1f4c:	ab 8f       	std	Y+27, r26	; 0x1b
    1f4e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f50:	69 8d       	ldd	r22, Y+25	; 0x19
    1f52:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1f54:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1f56:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1f58:	20 e0       	ldi	r18, 0x00	; 0
    1f5a:	30 e0       	ldi	r19, 0x00	; 0
    1f5c:	4a e7       	ldi	r20, 0x7A	; 122
    1f5e:	53 e4       	ldi	r21, 0x43	; 67
    1f60:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1f64:	dc 01       	movw	r26, r24
    1f66:	cb 01       	movw	r24, r22
    1f68:	8d 8b       	std	Y+21, r24	; 0x15
    1f6a:	9e 8b       	std	Y+22, r25	; 0x16
    1f6c:	af 8b       	std	Y+23, r26	; 0x17
    1f6e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1f70:	6d 89       	ldd	r22, Y+21	; 0x15
    1f72:	7e 89       	ldd	r23, Y+22	; 0x16
    1f74:	8f 89       	ldd	r24, Y+23	; 0x17
    1f76:	98 8d       	ldd	r25, Y+24	; 0x18
    1f78:	20 e0       	ldi	r18, 0x00	; 0
    1f7a:	30 e0       	ldi	r19, 0x00	; 0
    1f7c:	40 e8       	ldi	r20, 0x80	; 128
    1f7e:	5f e3       	ldi	r21, 0x3F	; 63
    1f80:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1f84:	88 23       	and	r24, r24
    1f86:	2c f4       	brge	.+10     	; 0x1f92 <LCD_SvidExecute+0x35c>
		__ticks = 1;
    1f88:	81 e0       	ldi	r24, 0x01	; 1
    1f8a:	90 e0       	ldi	r25, 0x00	; 0
    1f8c:	9c 8b       	std	Y+20, r25	; 0x14
    1f8e:	8b 8b       	std	Y+19, r24	; 0x13
    1f90:	3f c0       	rjmp	.+126    	; 0x2010 <LCD_SvidExecute+0x3da>
	else if (__tmp > 65535)
    1f92:	6d 89       	ldd	r22, Y+21	; 0x15
    1f94:	7e 89       	ldd	r23, Y+22	; 0x16
    1f96:	8f 89       	ldd	r24, Y+23	; 0x17
    1f98:	98 8d       	ldd	r25, Y+24	; 0x18
    1f9a:	20 e0       	ldi	r18, 0x00	; 0
    1f9c:	3f ef       	ldi	r19, 0xFF	; 255
    1f9e:	4f e7       	ldi	r20, 0x7F	; 127
    1fa0:	57 e4       	ldi	r21, 0x47	; 71
    1fa2:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1fa6:	18 16       	cp	r1, r24
    1fa8:	4c f5       	brge	.+82     	; 0x1ffc <LCD_SvidExecute+0x3c6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1faa:	69 8d       	ldd	r22, Y+25	; 0x19
    1fac:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1fae:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1fb0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1fb2:	20 e0       	ldi	r18, 0x00	; 0
    1fb4:	30 e0       	ldi	r19, 0x00	; 0
    1fb6:	40 e2       	ldi	r20, 0x20	; 32
    1fb8:	51 e4       	ldi	r21, 0x41	; 65
    1fba:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1fbe:	dc 01       	movw	r26, r24
    1fc0:	cb 01       	movw	r24, r22
    1fc2:	bc 01       	movw	r22, r24
    1fc4:	cd 01       	movw	r24, r26
    1fc6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1fca:	dc 01       	movw	r26, r24
    1fcc:	cb 01       	movw	r24, r22
    1fce:	9c 8b       	std	Y+20, r25	; 0x14
    1fd0:	8b 8b       	std	Y+19, r24	; 0x13
    1fd2:	0f c0       	rjmp	.+30     	; 0x1ff2 <LCD_SvidExecute+0x3bc>
    1fd4:	89 e1       	ldi	r24, 0x19	; 25
    1fd6:	90 e0       	ldi	r25, 0x00	; 0
    1fd8:	9a 8b       	std	Y+18, r25	; 0x12
    1fda:	89 8b       	std	Y+17, r24	; 0x11
    1fdc:	89 89       	ldd	r24, Y+17	; 0x11
    1fde:	9a 89       	ldd	r25, Y+18	; 0x12
    1fe0:	01 97       	sbiw	r24, 0x01	; 1
    1fe2:	f1 f7       	brne	.-4      	; 0x1fe0 <LCD_SvidExecute+0x3aa>
    1fe4:	9a 8b       	std	Y+18, r25	; 0x12
    1fe6:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1fe8:	8b 89       	ldd	r24, Y+19	; 0x13
    1fea:	9c 89       	ldd	r25, Y+20	; 0x14
    1fec:	01 97       	sbiw	r24, 0x01	; 1
    1fee:	9c 8b       	std	Y+20, r25	; 0x14
    1ff0:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ff2:	8b 89       	ldd	r24, Y+19	; 0x13
    1ff4:	9c 89       	ldd	r25, Y+20	; 0x14
    1ff6:	00 97       	sbiw	r24, 0x00	; 0
    1ff8:	69 f7       	brne	.-38     	; 0x1fd4 <LCD_SvidExecute+0x39e>
    1ffa:	14 c0       	rjmp	.+40     	; 0x2024 <LCD_SvidExecute+0x3ee>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ffc:	6d 89       	ldd	r22, Y+21	; 0x15
    1ffe:	7e 89       	ldd	r23, Y+22	; 0x16
    2000:	8f 89       	ldd	r24, Y+23	; 0x17
    2002:	98 8d       	ldd	r25, Y+24	; 0x18
    2004:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2008:	dc 01       	movw	r26, r24
    200a:	cb 01       	movw	r24, r22
    200c:	9c 8b       	std	Y+20, r25	; 0x14
    200e:	8b 8b       	std	Y+19, r24	; 0x13
    2010:	8b 89       	ldd	r24, Y+19	; 0x13
    2012:	9c 89       	ldd	r25, Y+20	; 0x14
    2014:	98 8b       	std	Y+16, r25	; 0x10
    2016:	8f 87       	std	Y+15, r24	; 0x0f
    2018:	8f 85       	ldd	r24, Y+15	; 0x0f
    201a:	98 89       	ldd	r25, Y+16	; 0x10
    201c:	01 97       	sbiw	r24, 0x01	; 1
    201e:	f1 f7       	brne	.-4      	; 0x201c <LCD_SvidExecute+0x3e6>
    2020:	98 8b       	std	Y+16, r25	; 0x10
    2022:	8f 87       	std	Y+15, r24	; 0x0f
	}


//DIO_Dyn_vid_SetPort(DIO_Dyn_u8_PORTD,Copy_u8DataCmd);
_delay_ms(1);
DIO_Dyn_vid_SetPinValue( LCD_u8_PIN_E ,  DIO_Dyn_u8_LOW);
    2024:	80 e0       	ldi	r24, 0x00	; 0
    2026:	67 e0       	ldi	r22, 0x07	; 7
    2028:	40 e0       	ldi	r20, 0x00	; 0
    202a:	0e 94 6d 07 	call	0xeda	; 0xeda <DIO_Dyn_vid_SetPinValue>
    202e:	80 e0       	ldi	r24, 0x00	; 0
    2030:	90 e0       	ldi	r25, 0x00	; 0
    2032:	a0 e0       	ldi	r26, 0x00	; 0
    2034:	b0 e4       	ldi	r27, 0x40	; 64
    2036:	8b 87       	std	Y+11, r24	; 0x0b
    2038:	9c 87       	std	Y+12, r25	; 0x0c
    203a:	ad 87       	std	Y+13, r26	; 0x0d
    203c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    203e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2040:	7c 85       	ldd	r23, Y+12	; 0x0c
    2042:	8d 85       	ldd	r24, Y+13	; 0x0d
    2044:	9e 85       	ldd	r25, Y+14	; 0x0e
    2046:	20 e0       	ldi	r18, 0x00	; 0
    2048:	30 e0       	ldi	r19, 0x00	; 0
    204a:	4a e7       	ldi	r20, 0x7A	; 122
    204c:	53 e4       	ldi	r21, 0x43	; 67
    204e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2052:	dc 01       	movw	r26, r24
    2054:	cb 01       	movw	r24, r22
    2056:	8f 83       	std	Y+7, r24	; 0x07
    2058:	98 87       	std	Y+8, r25	; 0x08
    205a:	a9 87       	std	Y+9, r26	; 0x09
    205c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    205e:	6f 81       	ldd	r22, Y+7	; 0x07
    2060:	78 85       	ldd	r23, Y+8	; 0x08
    2062:	89 85       	ldd	r24, Y+9	; 0x09
    2064:	9a 85       	ldd	r25, Y+10	; 0x0a
    2066:	20 e0       	ldi	r18, 0x00	; 0
    2068:	30 e0       	ldi	r19, 0x00	; 0
    206a:	40 e8       	ldi	r20, 0x80	; 128
    206c:	5f e3       	ldi	r21, 0x3F	; 63
    206e:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    2072:	88 23       	and	r24, r24
    2074:	2c f4       	brge	.+10     	; 0x2080 <LCD_SvidExecute+0x44a>
		__ticks = 1;
    2076:	81 e0       	ldi	r24, 0x01	; 1
    2078:	90 e0       	ldi	r25, 0x00	; 0
    207a:	9e 83       	std	Y+6, r25	; 0x06
    207c:	8d 83       	std	Y+5, r24	; 0x05
    207e:	3f c0       	rjmp	.+126    	; 0x20fe <LCD_SvidExecute+0x4c8>
	else if (__tmp > 65535)
    2080:	6f 81       	ldd	r22, Y+7	; 0x07
    2082:	78 85       	ldd	r23, Y+8	; 0x08
    2084:	89 85       	ldd	r24, Y+9	; 0x09
    2086:	9a 85       	ldd	r25, Y+10	; 0x0a
    2088:	20 e0       	ldi	r18, 0x00	; 0
    208a:	3f ef       	ldi	r19, 0xFF	; 255
    208c:	4f e7       	ldi	r20, 0x7F	; 127
    208e:	57 e4       	ldi	r21, 0x47	; 71
    2090:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    2094:	18 16       	cp	r1, r24
    2096:	4c f5       	brge	.+82     	; 0x20ea <LCD_SvidExecute+0x4b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2098:	6b 85       	ldd	r22, Y+11	; 0x0b
    209a:	7c 85       	ldd	r23, Y+12	; 0x0c
    209c:	8d 85       	ldd	r24, Y+13	; 0x0d
    209e:	9e 85       	ldd	r25, Y+14	; 0x0e
    20a0:	20 e0       	ldi	r18, 0x00	; 0
    20a2:	30 e0       	ldi	r19, 0x00	; 0
    20a4:	40 e2       	ldi	r20, 0x20	; 32
    20a6:	51 e4       	ldi	r21, 0x41	; 65
    20a8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    20ac:	dc 01       	movw	r26, r24
    20ae:	cb 01       	movw	r24, r22
    20b0:	bc 01       	movw	r22, r24
    20b2:	cd 01       	movw	r24, r26
    20b4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    20b8:	dc 01       	movw	r26, r24
    20ba:	cb 01       	movw	r24, r22
    20bc:	9e 83       	std	Y+6, r25	; 0x06
    20be:	8d 83       	std	Y+5, r24	; 0x05
    20c0:	0f c0       	rjmp	.+30     	; 0x20e0 <LCD_SvidExecute+0x4aa>
    20c2:	89 e1       	ldi	r24, 0x19	; 25
    20c4:	90 e0       	ldi	r25, 0x00	; 0
    20c6:	9c 83       	std	Y+4, r25	; 0x04
    20c8:	8b 83       	std	Y+3, r24	; 0x03
    20ca:	8b 81       	ldd	r24, Y+3	; 0x03
    20cc:	9c 81       	ldd	r25, Y+4	; 0x04
    20ce:	01 97       	sbiw	r24, 0x01	; 1
    20d0:	f1 f7       	brne	.-4      	; 0x20ce <LCD_SvidExecute+0x498>
    20d2:	9c 83       	std	Y+4, r25	; 0x04
    20d4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    20d6:	8d 81       	ldd	r24, Y+5	; 0x05
    20d8:	9e 81       	ldd	r25, Y+6	; 0x06
    20da:	01 97       	sbiw	r24, 0x01	; 1
    20dc:	9e 83       	std	Y+6, r25	; 0x06
    20de:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    20e0:	8d 81       	ldd	r24, Y+5	; 0x05
    20e2:	9e 81       	ldd	r25, Y+6	; 0x06
    20e4:	00 97       	sbiw	r24, 0x00	; 0
    20e6:	69 f7       	brne	.-38     	; 0x20c2 <LCD_SvidExecute+0x48c>
    20e8:	14 c0       	rjmp	.+40     	; 0x2112 <LCD_SvidExecute+0x4dc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    20ea:	6f 81       	ldd	r22, Y+7	; 0x07
    20ec:	78 85       	ldd	r23, Y+8	; 0x08
    20ee:	89 85       	ldd	r24, Y+9	; 0x09
    20f0:	9a 85       	ldd	r25, Y+10	; 0x0a
    20f2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    20f6:	dc 01       	movw	r26, r24
    20f8:	cb 01       	movw	r24, r22
    20fa:	9e 83       	std	Y+6, r25	; 0x06
    20fc:	8d 83       	std	Y+5, r24	; 0x05
    20fe:	8d 81       	ldd	r24, Y+5	; 0x05
    2100:	9e 81       	ldd	r25, Y+6	; 0x06
    2102:	9a 83       	std	Y+2, r25	; 0x02
    2104:	89 83       	std	Y+1, r24	; 0x01
    2106:	89 81       	ldd	r24, Y+1	; 0x01
    2108:	9a 81       	ldd	r25, Y+2	; 0x02
    210a:	01 97       	sbiw	r24, 0x01	; 1
    210c:	f1 f7       	brne	.-4      	; 0x210a <LCD_SvidExecute+0x4d4>
    210e:	9a 83       	std	Y+2, r25	; 0x02
    2110:	89 83       	std	Y+1, r24	; 0x01
_delay_ms(2);
 }
    2112:	e9 96       	adiw	r28, 0x39	; 57
    2114:	0f b6       	in	r0, 0x3f	; 63
    2116:	f8 94       	cli
    2118:	de bf       	out	0x3e, r29	; 62
    211a:	0f be       	out	0x3f, r0	; 63
    211c:	cd bf       	out	0x3d, r28	; 61
    211e:	cf 91       	pop	r28
    2120:	df 91       	pop	r29
    2122:	08 95       	ret

00002124 <LCD_vid_WriteCharacter>:
void LCD_vid_WriteCharacter(u8 Copy_u8_Char ){
    2124:	df 93       	push	r29
    2126:	cf 93       	push	r28
    2128:	0f 92       	push	r0
    212a:	cd b7       	in	r28, 0x3d	; 61
    212c:	de b7       	in	r29, 0x3e	; 62
    212e:	89 83       	std	Y+1, r24	; 0x01
	DIO_Dyn_vid_SetPinValue(LCD_u8_PIN_RS,DIO_Dyn_u8_HIGH);
    2130:	80 e0       	ldi	r24, 0x00	; 0
    2132:	65 e0       	ldi	r22, 0x05	; 5
    2134:	41 e0       	ldi	r20, 0x01	; 1
    2136:	0e 94 6d 07 	call	0xeda	; 0xeda <DIO_Dyn_vid_SetPinValue>
	LCD_SvidExecute( Copy_u8_Char);
    213a:	89 81       	ldd	r24, Y+1	; 0x01
    213c:	0e 94 1b 0e 	call	0x1c36	; 0x1c36 <LCD_SvidExecute>
}
    2140:	0f 90       	pop	r0
    2142:	cf 91       	pop	r28
    2144:	df 91       	pop	r29
    2146:	08 95       	ret

00002148 <LCD_vid_ClearScreen>:
void LCD_vid_ClearScreen(void){
    2148:	df 93       	push	r29
    214a:	cf 93       	push	r28
    214c:	cd b7       	in	r28, 0x3d	; 61
    214e:	de b7       	in	r29, 0x3e	; 62
	LCD_vid_WriteCommand(LCD_u8_CLEAR_SCREEN);
    2150:	81 e0       	ldi	r24, 0x01	; 1
    2152:	0e 94 09 0e 	call	0x1c12	; 0x1c12 <LCD_vid_WriteCommand>
}
    2156:	cf 91       	pop	r28
    2158:	df 91       	pop	r29
    215a:	08 95       	ret

0000215c <LCD_vid_WriteString>:
void LCD_vid_WriteString(u8* Copy_pString){
    215c:	df 93       	push	r29
    215e:	cf 93       	push	r28
    2160:	00 d0       	rcall	.+0      	; 0x2162 <LCD_vid_WriteString+0x6>
    2162:	0f 92       	push	r0
    2164:	cd b7       	in	r28, 0x3d	; 61
    2166:	de b7       	in	r29, 0x3e	; 62
    2168:	9b 83       	std	Y+3, r25	; 0x03
    216a:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8_Index = 0 ;
    216c:	19 82       	std	Y+1, r1	; 0x01
    216e:	0e c0       	rjmp	.+28     	; 0x218c <LCD_vid_WriteString+0x30>
	while(Copy_pString[Local_u8_Index]  != '\0' ){
		LCD_vid_WriteCharacter(Copy_pString[Local_u8_Index]);
    2170:	89 81       	ldd	r24, Y+1	; 0x01
    2172:	28 2f       	mov	r18, r24
    2174:	30 e0       	ldi	r19, 0x00	; 0
    2176:	8a 81       	ldd	r24, Y+2	; 0x02
    2178:	9b 81       	ldd	r25, Y+3	; 0x03
    217a:	fc 01       	movw	r30, r24
    217c:	e2 0f       	add	r30, r18
    217e:	f3 1f       	adc	r31, r19
    2180:	80 81       	ld	r24, Z
    2182:	0e 94 92 10 	call	0x2124	; 0x2124 <LCD_vid_WriteCharacter>
		Local_u8_Index ++ ;
    2186:	89 81       	ldd	r24, Y+1	; 0x01
    2188:	8f 5f       	subi	r24, 0xFF	; 255
    218a:	89 83       	std	Y+1, r24	; 0x01
void LCD_vid_ClearScreen(void){
	LCD_vid_WriteCommand(LCD_u8_CLEAR_SCREEN);
}
void LCD_vid_WriteString(u8* Copy_pString){
	u8 Local_u8_Index = 0 ;
	while(Copy_pString[Local_u8_Index]  != '\0' ){
    218c:	89 81       	ldd	r24, Y+1	; 0x01
    218e:	28 2f       	mov	r18, r24
    2190:	30 e0       	ldi	r19, 0x00	; 0
    2192:	8a 81       	ldd	r24, Y+2	; 0x02
    2194:	9b 81       	ldd	r25, Y+3	; 0x03
    2196:	fc 01       	movw	r30, r24
    2198:	e2 0f       	add	r30, r18
    219a:	f3 1f       	adc	r31, r19
    219c:	80 81       	ld	r24, Z
    219e:	88 23       	and	r24, r24
    21a0:	39 f7       	brne	.-50     	; 0x2170 <LCD_vid_WriteString+0x14>
		LCD_vid_WriteCharacter(Copy_pString[Local_u8_Index]);
		Local_u8_Index ++ ;
	}
}
    21a2:	0f 90       	pop	r0
    21a4:	0f 90       	pop	r0
    21a6:	0f 90       	pop	r0
    21a8:	cf 91       	pop	r28
    21aa:	df 91       	pop	r29
    21ac:	08 95       	ret

000021ae <LCD_vid_GoTORowCol>:
void LCD_vid_GoTORowCol(u8 Copy_u8_Row,u8 Copy_u8_Col ){
    21ae:	df 93       	push	r29
    21b0:	cf 93       	push	r28
    21b2:	00 d0       	rcall	.+0      	; 0x21b4 <LCD_vid_GoTORowCol+0x6>
    21b4:	00 d0       	rcall	.+0      	; 0x21b6 <LCD_vid_GoTORowCol+0x8>
    21b6:	0f 92       	push	r0
    21b8:	cd b7       	in	r28, 0x3d	; 61
    21ba:	de b7       	in	r29, 0x3e	; 62
    21bc:	8a 83       	std	Y+2, r24	; 0x02
    21be:	6b 83       	std	Y+3, r22	; 0x03
u8 Local_u8_Address ;
switch(Copy_u8_Row){
    21c0:	8a 81       	ldd	r24, Y+2	; 0x02
    21c2:	28 2f       	mov	r18, r24
    21c4:	30 e0       	ldi	r19, 0x00	; 0
    21c6:	3d 83       	std	Y+5, r19	; 0x05
    21c8:	2c 83       	std	Y+4, r18	; 0x04
    21ca:	8c 81       	ldd	r24, Y+4	; 0x04
    21cc:	9d 81       	ldd	r25, Y+5	; 0x05
    21ce:	00 97       	sbiw	r24, 0x00	; 0
    21d0:	31 f0       	breq	.+12     	; 0x21de <LCD_vid_GoTORowCol+0x30>
    21d2:	2c 81       	ldd	r18, Y+4	; 0x04
    21d4:	3d 81       	ldd	r19, Y+5	; 0x05
    21d6:	21 30       	cpi	r18, 0x01	; 1
    21d8:	31 05       	cpc	r19, r1
    21da:	21 f0       	breq	.+8      	; 0x21e4 <LCD_vid_GoTORowCol+0x36>
    21dc:	06 c0       	rjmp	.+12     	; 0x21ea <LCD_vid_GoTORowCol+0x3c>
	case   LCD_u8_line0 :
		Local_u8_Address = LCD_u8_FIRST_ROW_ADDRESS + Copy_u8_Col;
    21de:	8b 81       	ldd	r24, Y+3	; 0x03
    21e0:	89 83       	std	Y+1, r24	; 0x01
    21e2:	03 c0       	rjmp	.+6      	; 0x21ea <LCD_vid_GoTORowCol+0x3c>
    break;
	case   LCD_u8_line1 :
		Local_u8_Address = LCD_u8_SEC_ROW_ADDRESS + Copy_u8_Col ;
    21e4:	8b 81       	ldd	r24, Y+3	; 0x03
    21e6:	80 5c       	subi	r24, 0xC0	; 192
    21e8:	89 83       	std	Y+1, r24	; 0x01
	break;

}
LCD_vid_WriteCommand( LCD_u8_DDRAM_ADDRESS(Local_u8_Address)  ); // DDRAM address
    21ea:	89 81       	ldd	r24, Y+1	; 0x01
    21ec:	80 68       	ori	r24, 0x80	; 128
    21ee:	0e 94 09 0e 	call	0x1c12	; 0x1c12 <LCD_vid_WriteCommand>

}
    21f2:	0f 90       	pop	r0
    21f4:	0f 90       	pop	r0
    21f6:	0f 90       	pop	r0
    21f8:	0f 90       	pop	r0
    21fa:	0f 90       	pop	r0
    21fc:	cf 91       	pop	r28
    21fe:	df 91       	pop	r29
    2200:	08 95       	ret

00002202 <Keypad_u8_Set_Col>:
#include "../../Services/BIT_math.h"
#include "Keypad_int.h"
#include "Keypad_Config.h"
#include "Keypad_priv.h"
#include "../../MCL/DIO_dynamic/DIO_dynamic_int.h"
static void Keypad_u8_Set_Col(u8 Copy_u8_Col){//sequence
    2202:	df 93       	push	r29
    2204:	cf 93       	push	r28
    2206:	00 d0       	rcall	.+0      	; 0x2208 <Keypad_u8_Set_Col+0x6>
    2208:	0f 92       	push	r0
    220a:	cd b7       	in	r28, 0x3d	; 61
    220c:	de b7       	in	r29, 0x3e	; 62
    220e:	89 83       	std	Y+1, r24	; 0x01
	switch (Copy_u8_Col){
    2210:	89 81       	ldd	r24, Y+1	; 0x01
    2212:	28 2f       	mov	r18, r24
    2214:	30 e0       	ldi	r19, 0x00	; 0
    2216:	3b 83       	std	Y+3, r19	; 0x03
    2218:	2a 83       	std	Y+2, r18	; 0x02
    221a:	8a 81       	ldd	r24, Y+2	; 0x02
    221c:	9b 81       	ldd	r25, Y+3	; 0x03
    221e:	86 30       	cpi	r24, 0x06	; 6
    2220:	91 05       	cpc	r25, r1
    2222:	09 f4       	brne	.+2      	; 0x2226 <Keypad_u8_Set_Col+0x24>
    2224:	51 c0       	rjmp	.+162    	; 0x22c8 <Keypad_u8_Set_Col+0xc6>
    2226:	2a 81       	ldd	r18, Y+2	; 0x02
    2228:	3b 81       	ldd	r19, Y+3	; 0x03
    222a:	27 30       	cpi	r18, 0x07	; 7
    222c:	31 05       	cpc	r19, r1
    222e:	5c f4       	brge	.+22     	; 0x2246 <Keypad_u8_Set_Col+0x44>
    2230:	8a 81       	ldd	r24, Y+2	; 0x02
    2232:	9b 81       	ldd	r25, Y+3	; 0x03
    2234:	84 30       	cpi	r24, 0x04	; 4
    2236:	91 05       	cpc	r25, r1
    2238:	99 f0       	breq	.+38     	; 0x2260 <Keypad_u8_Set_Col+0x5e>
    223a:	2a 81       	ldd	r18, Y+2	; 0x02
    223c:	3b 81       	ldd	r19, Y+3	; 0x03
    223e:	25 30       	cpi	r18, 0x05	; 5
    2240:	31 05       	cpc	r19, r1
    2242:	41 f1       	breq	.+80     	; 0x2294 <Keypad_u8_Set_Col+0x92>
    2244:	8e c0       	rjmp	.+284    	; 0x2362 <Keypad_u8_Set_Col+0x160>
    2246:	8a 81       	ldd	r24, Y+2	; 0x02
    2248:	9b 81       	ldd	r25, Y+3	; 0x03
    224a:	87 30       	cpi	r24, 0x07	; 7
    224c:	91 05       	cpc	r25, r1
    224e:	09 f4       	brne	.+2      	; 0x2252 <Keypad_u8_Set_Col+0x50>
    2250:	55 c0       	rjmp	.+170    	; 0x22fc <Keypad_u8_Set_Col+0xfa>
    2252:	2a 81       	ldd	r18, Y+2	; 0x02
    2254:	3b 81       	ldd	r19, Y+3	; 0x03
    2256:	28 30       	cpi	r18, 0x08	; 8
    2258:	31 05       	cpc	r19, r1
    225a:	09 f4       	brne	.+2      	; 0x225e <Keypad_u8_Set_Col+0x5c>
    225c:	69 c0       	rjmp	.+210    	; 0x2330 <Keypad_u8_Set_Col+0x12e>
    225e:	81 c0       	rjmp	.+258    	; 0x2362 <Keypad_u8_Set_Col+0x160>
	case KEYPAD_u8_Set_C1:
		DIO_Dyn_vid_SetPinValue(KEYPAD_u8_C1,DIO_Dyn_u8_LOW);
    2260:	82 e0       	ldi	r24, 0x02	; 2
    2262:	64 e0       	ldi	r22, 0x04	; 4
    2264:	40 e0       	ldi	r20, 0x00	; 0
    2266:	0e 94 6d 07 	call	0xeda	; 0xeda <DIO_Dyn_vid_SetPinValue>
		DIO_Dyn_vid_SetPinValue(KEYPAD_u8_C2,DIO_Dyn_u8_HIGH);
    226a:	82 e0       	ldi	r24, 0x02	; 2
    226c:	65 e0       	ldi	r22, 0x05	; 5
    226e:	41 e0       	ldi	r20, 0x01	; 1
    2270:	0e 94 6d 07 	call	0xeda	; 0xeda <DIO_Dyn_vid_SetPinValue>
		DIO_Dyn_vid_SetPinValue(KEYPAD_u8_C3,DIO_Dyn_u8_HIGH);
    2274:	82 e0       	ldi	r24, 0x02	; 2
    2276:	66 e0       	ldi	r22, 0x06	; 6
    2278:	41 e0       	ldi	r20, 0x01	; 1
    227a:	0e 94 6d 07 	call	0xeda	; 0xeda <DIO_Dyn_vid_SetPinValue>
		DIO_Dyn_vid_SetPinValue(KEYPAD_u8_C4,DIO_Dyn_u8_HIGH);
    227e:	82 e0       	ldi	r24, 0x02	; 2
    2280:	67 e0       	ldi	r22, 0x07	; 7
    2282:	41 e0       	ldi	r20, 0x01	; 1
    2284:	0e 94 6d 07 	call	0xeda	; 0xeda <DIO_Dyn_vid_SetPinValue>
		DIO_Dyn_vid_SetPinValue(KEYPAD_u8_C5,DIO_Dyn_u8_HIGH);
    2288:	83 e0       	ldi	r24, 0x03	; 3
    228a:	60 e0       	ldi	r22, 0x00	; 0
    228c:	41 e0       	ldi	r20, 0x01	; 1
    228e:	0e 94 6d 07 	call	0xeda	; 0xeda <DIO_Dyn_vid_SetPinValue>
    2292:	67 c0       	rjmp	.+206    	; 0x2362 <Keypad_u8_Set_Col+0x160>
			break;
	case KEYPAD_u8_Set_C2:
		DIO_Dyn_vid_SetPinValue(KEYPAD_u8_C1,DIO_Dyn_u8_HIGH);
    2294:	82 e0       	ldi	r24, 0x02	; 2
    2296:	64 e0       	ldi	r22, 0x04	; 4
    2298:	41 e0       	ldi	r20, 0x01	; 1
    229a:	0e 94 6d 07 	call	0xeda	; 0xeda <DIO_Dyn_vid_SetPinValue>
		DIO_Dyn_vid_SetPinValue(KEYPAD_u8_C2,DIO_Dyn_u8_LOW);
    229e:	82 e0       	ldi	r24, 0x02	; 2
    22a0:	65 e0       	ldi	r22, 0x05	; 5
    22a2:	40 e0       	ldi	r20, 0x00	; 0
    22a4:	0e 94 6d 07 	call	0xeda	; 0xeda <DIO_Dyn_vid_SetPinValue>
		DIO_Dyn_vid_SetPinValue(KEYPAD_u8_C3,DIO_Dyn_u8_HIGH);
    22a8:	82 e0       	ldi	r24, 0x02	; 2
    22aa:	66 e0       	ldi	r22, 0x06	; 6
    22ac:	41 e0       	ldi	r20, 0x01	; 1
    22ae:	0e 94 6d 07 	call	0xeda	; 0xeda <DIO_Dyn_vid_SetPinValue>
		DIO_Dyn_vid_SetPinValue(KEYPAD_u8_C4,DIO_Dyn_u8_HIGH);
    22b2:	82 e0       	ldi	r24, 0x02	; 2
    22b4:	67 e0       	ldi	r22, 0x07	; 7
    22b6:	41 e0       	ldi	r20, 0x01	; 1
    22b8:	0e 94 6d 07 	call	0xeda	; 0xeda <DIO_Dyn_vid_SetPinValue>
		DIO_Dyn_vid_SetPinValue(KEYPAD_u8_C5,DIO_Dyn_u8_HIGH);
    22bc:	83 e0       	ldi	r24, 0x03	; 3
    22be:	60 e0       	ldi	r22, 0x00	; 0
    22c0:	41 e0       	ldi	r20, 0x01	; 1
    22c2:	0e 94 6d 07 	call	0xeda	; 0xeda <DIO_Dyn_vid_SetPinValue>
    22c6:	4d c0       	rjmp	.+154    	; 0x2362 <Keypad_u8_Set_Col+0x160>
		break;
	case KEYPAD_u8_Set_C3:
		DIO_Dyn_vid_SetPinValue(KEYPAD_u8_C1,DIO_Dyn_u8_HIGH);
    22c8:	82 e0       	ldi	r24, 0x02	; 2
    22ca:	64 e0       	ldi	r22, 0x04	; 4
    22cc:	41 e0       	ldi	r20, 0x01	; 1
    22ce:	0e 94 6d 07 	call	0xeda	; 0xeda <DIO_Dyn_vid_SetPinValue>
		DIO_Dyn_vid_SetPinValue(KEYPAD_u8_C2,DIO_Dyn_u8_HIGH);
    22d2:	82 e0       	ldi	r24, 0x02	; 2
    22d4:	65 e0       	ldi	r22, 0x05	; 5
    22d6:	41 e0       	ldi	r20, 0x01	; 1
    22d8:	0e 94 6d 07 	call	0xeda	; 0xeda <DIO_Dyn_vid_SetPinValue>
		DIO_Dyn_vid_SetPinValue(KEYPAD_u8_C3,DIO_Dyn_u8_LOW);
    22dc:	82 e0       	ldi	r24, 0x02	; 2
    22de:	66 e0       	ldi	r22, 0x06	; 6
    22e0:	40 e0       	ldi	r20, 0x00	; 0
    22e2:	0e 94 6d 07 	call	0xeda	; 0xeda <DIO_Dyn_vid_SetPinValue>
		DIO_Dyn_vid_SetPinValue(KEYPAD_u8_C4,DIO_Dyn_u8_HIGH);
    22e6:	82 e0       	ldi	r24, 0x02	; 2
    22e8:	67 e0       	ldi	r22, 0x07	; 7
    22ea:	41 e0       	ldi	r20, 0x01	; 1
    22ec:	0e 94 6d 07 	call	0xeda	; 0xeda <DIO_Dyn_vid_SetPinValue>
		DIO_Dyn_vid_SetPinValue(KEYPAD_u8_C5,DIO_Dyn_u8_HIGH);
    22f0:	83 e0       	ldi	r24, 0x03	; 3
    22f2:	60 e0       	ldi	r22, 0x00	; 0
    22f4:	41 e0       	ldi	r20, 0x01	; 1
    22f6:	0e 94 6d 07 	call	0xeda	; 0xeda <DIO_Dyn_vid_SetPinValue>
    22fa:	33 c0       	rjmp	.+102    	; 0x2362 <Keypad_u8_Set_Col+0x160>
		break;
	case KEYPAD_u8_Set_C4:
		DIO_Dyn_vid_SetPinValue(KEYPAD_u8_C1,DIO_Dyn_u8_HIGH);
    22fc:	82 e0       	ldi	r24, 0x02	; 2
    22fe:	64 e0       	ldi	r22, 0x04	; 4
    2300:	41 e0       	ldi	r20, 0x01	; 1
    2302:	0e 94 6d 07 	call	0xeda	; 0xeda <DIO_Dyn_vid_SetPinValue>
		DIO_Dyn_vid_SetPinValue(KEYPAD_u8_C2,DIO_Dyn_u8_HIGH);
    2306:	82 e0       	ldi	r24, 0x02	; 2
    2308:	65 e0       	ldi	r22, 0x05	; 5
    230a:	41 e0       	ldi	r20, 0x01	; 1
    230c:	0e 94 6d 07 	call	0xeda	; 0xeda <DIO_Dyn_vid_SetPinValue>
		DIO_Dyn_vid_SetPinValue(KEYPAD_u8_C3,DIO_Dyn_u8_HIGH);
    2310:	82 e0       	ldi	r24, 0x02	; 2
    2312:	66 e0       	ldi	r22, 0x06	; 6
    2314:	41 e0       	ldi	r20, 0x01	; 1
    2316:	0e 94 6d 07 	call	0xeda	; 0xeda <DIO_Dyn_vid_SetPinValue>
		DIO_Dyn_vid_SetPinValue(KEYPAD_u8_C4,DIO_Dyn_u8_LOW);
    231a:	82 e0       	ldi	r24, 0x02	; 2
    231c:	67 e0       	ldi	r22, 0x07	; 7
    231e:	40 e0       	ldi	r20, 0x00	; 0
    2320:	0e 94 6d 07 	call	0xeda	; 0xeda <DIO_Dyn_vid_SetPinValue>
		DIO_Dyn_vid_SetPinValue(KEYPAD_u8_C5,DIO_Dyn_u8_HIGH);
    2324:	83 e0       	ldi	r24, 0x03	; 3
    2326:	60 e0       	ldi	r22, 0x00	; 0
    2328:	41 e0       	ldi	r20, 0x01	; 1
    232a:	0e 94 6d 07 	call	0xeda	; 0xeda <DIO_Dyn_vid_SetPinValue>
    232e:	19 c0       	rjmp	.+50     	; 0x2362 <Keypad_u8_Set_Col+0x160>
		break;
	case KEYPAD_u8_Set_C5:
		DIO_Dyn_vid_SetPinValue(KEYPAD_u8_C1,DIO_Dyn_u8_HIGH);
    2330:	82 e0       	ldi	r24, 0x02	; 2
    2332:	64 e0       	ldi	r22, 0x04	; 4
    2334:	41 e0       	ldi	r20, 0x01	; 1
    2336:	0e 94 6d 07 	call	0xeda	; 0xeda <DIO_Dyn_vid_SetPinValue>
		DIO_Dyn_vid_SetPinValue(KEYPAD_u8_C2,DIO_Dyn_u8_HIGH);
    233a:	82 e0       	ldi	r24, 0x02	; 2
    233c:	65 e0       	ldi	r22, 0x05	; 5
    233e:	41 e0       	ldi	r20, 0x01	; 1
    2340:	0e 94 6d 07 	call	0xeda	; 0xeda <DIO_Dyn_vid_SetPinValue>
		DIO_Dyn_vid_SetPinValue(KEYPAD_u8_C3,DIO_Dyn_u8_HIGH);
    2344:	82 e0       	ldi	r24, 0x02	; 2
    2346:	66 e0       	ldi	r22, 0x06	; 6
    2348:	41 e0       	ldi	r20, 0x01	; 1
    234a:	0e 94 6d 07 	call	0xeda	; 0xeda <DIO_Dyn_vid_SetPinValue>
		DIO_Dyn_vid_SetPinValue(KEYPAD_u8_C4,DIO_Dyn_u8_HIGH);
    234e:	82 e0       	ldi	r24, 0x02	; 2
    2350:	67 e0       	ldi	r22, 0x07	; 7
    2352:	41 e0       	ldi	r20, 0x01	; 1
    2354:	0e 94 6d 07 	call	0xeda	; 0xeda <DIO_Dyn_vid_SetPinValue>
		DIO_Dyn_vid_SetPinValue(KEYPAD_u8_C5,DIO_Dyn_u8_LOW);
    2358:	83 e0       	ldi	r24, 0x03	; 3
    235a:	60 e0       	ldi	r22, 0x00	; 0
    235c:	40 e0       	ldi	r20, 0x00	; 0
    235e:	0e 94 6d 07 	call	0xeda	; 0xeda <DIO_Dyn_vid_SetPinValue>
		break;

	}
}
    2362:	0f 90       	pop	r0
    2364:	0f 90       	pop	r0
    2366:	0f 90       	pop	r0
    2368:	cf 91       	pop	r28
    236a:	df 91       	pop	r29
    236c:	08 95       	ret

0000236e <Keypad_vid_Init>:
void Keypad_vid_Init(void){
    236e:	df 93       	push	r29
    2370:	cf 93       	push	r28
    2372:	cd b7       	in	r28, 0x3d	; 61
    2374:	de b7       	in	r29, 0x3e	; 62
	DIO_Dyn_vid_SetPinDir(KEYPAD_u8_R1,DIO_Dyn_u8_INPUT);
    2376:	82 e0       	ldi	r24, 0x02	; 2
    2378:	60 e0       	ldi	r22, 0x00	; 0
    237a:	40 e0       	ldi	r20, 0x00	; 0
    237c:	0e 94 63 08 	call	0x10c6	; 0x10c6 <DIO_Dyn_vid_SetPinDir>
	DIO_Dyn_vid_SetPinDir(KEYPAD_u8_R2,DIO_Dyn_u8_INPUT);
    2380:	82 e0       	ldi	r24, 0x02	; 2
    2382:	61 e0       	ldi	r22, 0x01	; 1
    2384:	40 e0       	ldi	r20, 0x00	; 0
    2386:	0e 94 63 08 	call	0x10c6	; 0x10c6 <DIO_Dyn_vid_SetPinDir>
	DIO_Dyn_vid_SetPinDir(KEYPAD_u8_R3,DIO_Dyn_u8_INPUT);
    238a:	82 e0       	ldi	r24, 0x02	; 2
    238c:	62 e0       	ldi	r22, 0x02	; 2
    238e:	40 e0       	ldi	r20, 0x00	; 0
    2390:	0e 94 63 08 	call	0x10c6	; 0x10c6 <DIO_Dyn_vid_SetPinDir>
	DIO_Dyn_vid_SetPinDir(KEYPAD_u8_R4,DIO_Dyn_u8_INPUT);
    2394:	82 e0       	ldi	r24, 0x02	; 2
    2396:	63 e0       	ldi	r22, 0x03	; 3
    2398:	40 e0       	ldi	r20, 0x00	; 0
    239a:	0e 94 63 08 	call	0x10c6	; 0x10c6 <DIO_Dyn_vid_SetPinDir>
	DIO_Dyn_vid_SetPinDir(KEYPAD_u8_C1,DIO_Dyn_u8_OUTPUT);
    239e:	82 e0       	ldi	r24, 0x02	; 2
    23a0:	64 e0       	ldi	r22, 0x04	; 4
    23a2:	41 e0       	ldi	r20, 0x01	; 1
    23a4:	0e 94 63 08 	call	0x10c6	; 0x10c6 <DIO_Dyn_vid_SetPinDir>
	DIO_Dyn_vid_SetPinDir(KEYPAD_u8_C2,DIO_Dyn_u8_OUTPUT);
    23a8:	82 e0       	ldi	r24, 0x02	; 2
    23aa:	65 e0       	ldi	r22, 0x05	; 5
    23ac:	41 e0       	ldi	r20, 0x01	; 1
    23ae:	0e 94 63 08 	call	0x10c6	; 0x10c6 <DIO_Dyn_vid_SetPinDir>
	DIO_Dyn_vid_SetPinDir(KEYPAD_u8_C3,DIO_Dyn_u8_OUTPUT);
    23b2:	82 e0       	ldi	r24, 0x02	; 2
    23b4:	66 e0       	ldi	r22, 0x06	; 6
    23b6:	41 e0       	ldi	r20, 0x01	; 1
    23b8:	0e 94 63 08 	call	0x10c6	; 0x10c6 <DIO_Dyn_vid_SetPinDir>
	DIO_Dyn_vid_SetPinDir(KEYPAD_u8_C4,DIO_Dyn_u8_OUTPUT);
    23bc:	82 e0       	ldi	r24, 0x02	; 2
    23be:	67 e0       	ldi	r22, 0x07	; 7
    23c0:	41 e0       	ldi	r20, 0x01	; 1
    23c2:	0e 94 63 08 	call	0x10c6	; 0x10c6 <DIO_Dyn_vid_SetPinDir>
	DIO_Dyn_vid_SetPinDir(KEYPAD_u8_C5,DIO_Dyn_u8_OUTPUT);
    23c6:	83 e0       	ldi	r24, 0x03	; 3
    23c8:	60 e0       	ldi	r22, 0x00	; 0
    23ca:	41 e0       	ldi	r20, 0x01	; 1
    23cc:	0e 94 63 08 	call	0x10c6	; 0x10c6 <DIO_Dyn_vid_SetPinDir>
	DIO_Dyn_vid_SetPinValue(KEYPAD_u8_R1,DIO_Dyn_u8_HIGH);//pull up
    23d0:	82 e0       	ldi	r24, 0x02	; 2
    23d2:	60 e0       	ldi	r22, 0x00	; 0
    23d4:	41 e0       	ldi	r20, 0x01	; 1
    23d6:	0e 94 6d 07 	call	0xeda	; 0xeda <DIO_Dyn_vid_SetPinValue>
	DIO_Dyn_vid_SetPinValue(KEYPAD_u8_R2,DIO_Dyn_u8_HIGH);
    23da:	82 e0       	ldi	r24, 0x02	; 2
    23dc:	61 e0       	ldi	r22, 0x01	; 1
    23de:	41 e0       	ldi	r20, 0x01	; 1
    23e0:	0e 94 6d 07 	call	0xeda	; 0xeda <DIO_Dyn_vid_SetPinValue>
	DIO_Dyn_vid_SetPinValue(KEYPAD_u8_R3,DIO_Dyn_u8_HIGH);
    23e4:	82 e0       	ldi	r24, 0x02	; 2
    23e6:	62 e0       	ldi	r22, 0x02	; 2
    23e8:	41 e0       	ldi	r20, 0x01	; 1
    23ea:	0e 94 6d 07 	call	0xeda	; 0xeda <DIO_Dyn_vid_SetPinValue>
	DIO_Dyn_vid_SetPinValue(KEYPAD_u8_R4,DIO_Dyn_u8_HIGH);
    23ee:	82 e0       	ldi	r24, 0x02	; 2
    23f0:	63 e0       	ldi	r22, 0x03	; 3
    23f2:	41 e0       	ldi	r20, 0x01	; 1
    23f4:	0e 94 6d 07 	call	0xeda	; 0xeda <DIO_Dyn_vid_SetPinValue>

}
    23f8:	cf 91       	pop	r28
    23fa:	df 91       	pop	r29
    23fc:	08 95       	ret

000023fe <Keypad_u8_Get_Button>:
u8 Keypad_u8_Get_Button(void){
    23fe:	df 93       	push	r29
    2400:	cf 93       	push	r28
    2402:	00 d0       	rcall	.+0      	; 0x2404 <Keypad_u8_Get_Button+0x6>
    2404:	cd b7       	in	r28, 0x3d	; 61
    2406:	de b7       	in	r29, 0x3e	; 62
	u8  Local_u8_Button='\0' ;
    2408:	19 82       	std	Y+1, r1	; 0x01
	Keypad_u8_Set_Col( KEYPAD_u8_Set_C1);
    240a:	84 e0       	ldi	r24, 0x04	; 4
    240c:	0e 94 01 11 	call	0x2202	; 0x2202 <Keypad_u8_Set_Col>
	Local_u8_Button=Keypad_u8_Check_Row(KEY_u8_C1);
    2410:	84 e0       	ldi	r24, 0x04	; 4
    2412:	0e 94 4d 12 	call	0x249a	; 0x249a <Keypad_u8_Check_Row>
    2416:	89 83       	std	Y+1, r24	; 0x01
	if(Local_u8_Button!='\0')
    2418:	89 81       	ldd	r24, Y+1	; 0x01
    241a:	88 23       	and	r24, r24
    241c:	19 f0       	breq	.+6      	; 0x2424 <Keypad_u8_Get_Button+0x26>
		return Local_u8_Button;
    241e:	89 81       	ldd	r24, Y+1	; 0x01
    2420:	8a 83       	std	Y+2, r24	; 0x02
    2422:	35 c0       	rjmp	.+106    	; 0x248e <Keypad_u8_Get_Button+0x90>
	Keypad_u8_Set_Col( KEYPAD_u8_Set_C2);
    2424:	85 e0       	ldi	r24, 0x05	; 5
    2426:	0e 94 01 11 	call	0x2202	; 0x2202 <Keypad_u8_Set_Col>
	Local_u8_Button=Keypad_u8_Check_Row(KEY_u8_C2);
    242a:	85 e0       	ldi	r24, 0x05	; 5
    242c:	0e 94 4d 12 	call	0x249a	; 0x249a <Keypad_u8_Check_Row>
    2430:	89 83       	std	Y+1, r24	; 0x01
	if(Local_u8_Button!='\0')
    2432:	89 81       	ldd	r24, Y+1	; 0x01
    2434:	88 23       	and	r24, r24
    2436:	19 f0       	breq	.+6      	; 0x243e <Keypad_u8_Get_Button+0x40>
		return Local_u8_Button;
    2438:	89 81       	ldd	r24, Y+1	; 0x01
    243a:	8a 83       	std	Y+2, r24	; 0x02
    243c:	28 c0       	rjmp	.+80     	; 0x248e <Keypad_u8_Get_Button+0x90>
	Keypad_u8_Set_Col( KEYPAD_u8_Set_C3);
    243e:	86 e0       	ldi	r24, 0x06	; 6
    2440:	0e 94 01 11 	call	0x2202	; 0x2202 <Keypad_u8_Set_Col>
	Local_u8_Button=Keypad_u8_Check_Row(KEY_u8_C3);
    2444:	86 e0       	ldi	r24, 0x06	; 6
    2446:	0e 94 4d 12 	call	0x249a	; 0x249a <Keypad_u8_Check_Row>
    244a:	89 83       	std	Y+1, r24	; 0x01
	if(Local_u8_Button!='\0')
    244c:	89 81       	ldd	r24, Y+1	; 0x01
    244e:	88 23       	and	r24, r24
    2450:	19 f0       	breq	.+6      	; 0x2458 <Keypad_u8_Get_Button+0x5a>
		return Local_u8_Button;
    2452:	89 81       	ldd	r24, Y+1	; 0x01
    2454:	8a 83       	std	Y+2, r24	; 0x02
    2456:	1b c0       	rjmp	.+54     	; 0x248e <Keypad_u8_Get_Button+0x90>
	Keypad_u8_Set_Col( KEYPAD_u8_Set_C4);
    2458:	87 e0       	ldi	r24, 0x07	; 7
    245a:	0e 94 01 11 	call	0x2202	; 0x2202 <Keypad_u8_Set_Col>
	Local_u8_Button=Keypad_u8_Check_Row(KEY_u8_C4);
    245e:	87 e0       	ldi	r24, 0x07	; 7
    2460:	0e 94 4d 12 	call	0x249a	; 0x249a <Keypad_u8_Check_Row>
    2464:	89 83       	std	Y+1, r24	; 0x01
	if(Local_u8_Button!='\0')
    2466:	89 81       	ldd	r24, Y+1	; 0x01
    2468:	88 23       	and	r24, r24
    246a:	19 f0       	breq	.+6      	; 0x2472 <Keypad_u8_Get_Button+0x74>
		return Local_u8_Button;
    246c:	89 81       	ldd	r24, Y+1	; 0x01
    246e:	8a 83       	std	Y+2, r24	; 0x02
    2470:	0e c0       	rjmp	.+28     	; 0x248e <Keypad_u8_Get_Button+0x90>
	Keypad_u8_Set_Col( KEYPAD_u8_Set_C5);
    2472:	88 e0       	ldi	r24, 0x08	; 8
    2474:	0e 94 01 11 	call	0x2202	; 0x2202 <Keypad_u8_Set_Col>
		Local_u8_Button=Keypad_u8_Check_Row(KEY_u8_C5);
    2478:	88 e0       	ldi	r24, 0x08	; 8
    247a:	0e 94 4d 12 	call	0x249a	; 0x249a <Keypad_u8_Check_Row>
    247e:	89 83       	std	Y+1, r24	; 0x01
		if(Local_u8_Button!='\0')
    2480:	89 81       	ldd	r24, Y+1	; 0x01
    2482:	88 23       	and	r24, r24
    2484:	19 f0       	breq	.+6      	; 0x248c <Keypad_u8_Get_Button+0x8e>
			return Local_u8_Button;
    2486:	89 81       	ldd	r24, Y+1	; 0x01
    2488:	8a 83       	std	Y+2, r24	; 0x02
    248a:	01 c0       	rjmp	.+2      	; 0x248e <Keypad_u8_Get_Button+0x90>
		return '\0';
    248c:	1a 82       	std	Y+2, r1	; 0x02
    248e:	8a 81       	ldd	r24, Y+2	; 0x02
}
    2490:	0f 90       	pop	r0
    2492:	0f 90       	pop	r0
    2494:	cf 91       	pop	r28
    2496:	df 91       	pop	r29
    2498:	08 95       	ret

0000249a <Keypad_u8_Check_Row>:
 static u8 Keypad_u8_Check_Row(u8 Copy_u8_Col){
    249a:	df 93       	push	r29
    249c:	cf 93       	push	r28
    249e:	cd b7       	in	r28, 0x3d	; 61
    24a0:	de b7       	in	r29, 0x3e	; 62
    24a2:	2a 97       	sbiw	r28, 0x0a	; 10
    24a4:	0f b6       	in	r0, 0x3f	; 63
    24a6:	f8 94       	cli
    24a8:	de bf       	out	0x3e, r29	; 62
    24aa:	0f be       	out	0x3f, r0	; 63
    24ac:	cd bf       	out	0x3d, r28	; 61
    24ae:	8a 83       	std	Y+2, r24	; 0x02
	 u8 Local_u8_Data='\0';
    24b0:	19 82       	std	Y+1, r1	; 0x01
	if( DIO_Dyn_u8_GetPinValue(KEYPAD_u8_R1 )==DIO_Dyn_u8_LOW )
    24b2:	82 e0       	ldi	r24, 0x02	; 2
    24b4:	60 e0       	ldi	r22, 0x00	; 0
    24b6:	0e 94 11 0a 	call	0x1422	; 0x1422 <DIO_Dyn_u8_GetPinValue>
    24ba:	88 23       	and	r24, r24
    24bc:	a1 f5       	brne	.+104    	; 0x2526 <Keypad_u8_Check_Row+0x8c>
	     switch (Copy_u8_Col){
    24be:	8a 81       	ldd	r24, Y+2	; 0x02
    24c0:	28 2f       	mov	r18, r24
    24c2:	30 e0       	ldi	r19, 0x00	; 0
    24c4:	3a 87       	std	Y+10, r19	; 0x0a
    24c6:	29 87       	std	Y+9, r18	; 0x09
    24c8:	89 85       	ldd	r24, Y+9	; 0x09
    24ca:	9a 85       	ldd	r25, Y+10	; 0x0a
    24cc:	86 30       	cpi	r24, 0x06	; 6
    24ce:	91 05       	cpc	r25, r1
    24d0:	09 f1       	breq	.+66     	; 0x2514 <Keypad_u8_Check_Row+0x7a>
    24d2:	29 85       	ldd	r18, Y+9	; 0x09
    24d4:	3a 85       	ldd	r19, Y+10	; 0x0a
    24d6:	27 30       	cpi	r18, 0x07	; 7
    24d8:	31 05       	cpc	r19, r1
    24da:	5c f4       	brge	.+22     	; 0x24f2 <Keypad_u8_Check_Row+0x58>
    24dc:	89 85       	ldd	r24, Y+9	; 0x09
    24de:	9a 85       	ldd	r25, Y+10	; 0x0a
    24e0:	84 30       	cpi	r24, 0x04	; 4
    24e2:	91 05       	cpc	r25, r1
    24e4:	89 f0       	breq	.+34     	; 0x2508 <Keypad_u8_Check_Row+0x6e>
    24e6:	29 85       	ldd	r18, Y+9	; 0x09
    24e8:	3a 85       	ldd	r19, Y+10	; 0x0a
    24ea:	25 30       	cpi	r18, 0x05	; 5
    24ec:	31 05       	cpc	r19, r1
    24ee:	79 f0       	breq	.+30     	; 0x250e <Keypad_u8_Check_Row+0x74>
    24f0:	c7 c0       	rjmp	.+398    	; 0x2680 <Keypad_u8_Check_Row+0x1e6>
    24f2:	89 85       	ldd	r24, Y+9	; 0x09
    24f4:	9a 85       	ldd	r25, Y+10	; 0x0a
    24f6:	87 30       	cpi	r24, 0x07	; 7
    24f8:	91 05       	cpc	r25, r1
    24fa:	79 f0       	breq	.+30     	; 0x251a <Keypad_u8_Check_Row+0x80>
    24fc:	29 85       	ldd	r18, Y+9	; 0x09
    24fe:	3a 85       	ldd	r19, Y+10	; 0x0a
    2500:	28 30       	cpi	r18, 0x08	; 8
    2502:	31 05       	cpc	r19, r1
    2504:	69 f0       	breq	.+26     	; 0x2520 <Keypad_u8_Check_Row+0x86>
    2506:	bc c0       	rjmp	.+376    	; 0x2680 <Keypad_u8_Check_Row+0x1e6>
			  case KEY_u8_C1:
							Local_u8_Data=KEYPAD_u8_R1C1	;
    2508:	87 e3       	ldi	r24, 0x37	; 55
    250a:	89 83       	std	Y+1, r24	; 0x01
    250c:	b9 c0       	rjmp	.+370    	; 0x2680 <Keypad_u8_Check_Row+0x1e6>
							break;
			case KEY_u8_C2:
							Local_u8_Data=KEYPAD_u8_R1C2	;
    250e:	88 e3       	ldi	r24, 0x38	; 56
    2510:	89 83       	std	Y+1, r24	; 0x01
    2512:	b6 c0       	rjmp	.+364    	; 0x2680 <Keypad_u8_Check_Row+0x1e6>
							break;
			case KEY_u8_C3:
							Local_u8_Data= KEYPAD_u8_R1C3	;
    2514:	89 e3       	ldi	r24, 0x39	; 57
    2516:	89 83       	std	Y+1, r24	; 0x01
    2518:	b3 c0       	rjmp	.+358    	; 0x2680 <Keypad_u8_Check_Row+0x1e6>
							break;
			case KEY_u8_C4:
							Local_u8_Data= KEYPAD_u8_R1C4	;
    251a:	8f e2       	ldi	r24, 0x2F	; 47
    251c:	89 83       	std	Y+1, r24	; 0x01
    251e:	b0 c0       	rjmp	.+352    	; 0x2680 <Keypad_u8_Check_Row+0x1e6>
							break;
			case KEY_u8_C5:
							Local_u8_Data= KEYPAD_u8_R1C5	;
    2520:	88 e2       	ldi	r24, 0x28	; 40
    2522:	89 83       	std	Y+1, r24	; 0x01
    2524:	ad c0       	rjmp	.+346    	; 0x2680 <Keypad_u8_Check_Row+0x1e6>
							break;
		 }
		 else if( DIO_Dyn_u8_GetPinValue(KEYPAD_u8_R2 )==DIO_Dyn_u8_LOW )
    2526:	82 e0       	ldi	r24, 0x02	; 2
    2528:	61 e0       	ldi	r22, 0x01	; 1
    252a:	0e 94 11 0a 	call	0x1422	; 0x1422 <DIO_Dyn_u8_GetPinValue>
    252e:	88 23       	and	r24, r24
    2530:	a1 f5       	brne	.+104    	; 0x259a <Keypad_u8_Check_Row+0x100>
	     switch (Copy_u8_Col){
    2532:	8a 81       	ldd	r24, Y+2	; 0x02
    2534:	28 2f       	mov	r18, r24
    2536:	30 e0       	ldi	r19, 0x00	; 0
    2538:	38 87       	std	Y+8, r19	; 0x08
    253a:	2f 83       	std	Y+7, r18	; 0x07
    253c:	8f 81       	ldd	r24, Y+7	; 0x07
    253e:	98 85       	ldd	r25, Y+8	; 0x08
    2540:	86 30       	cpi	r24, 0x06	; 6
    2542:	91 05       	cpc	r25, r1
    2544:	09 f1       	breq	.+66     	; 0x2588 <Keypad_u8_Check_Row+0xee>
    2546:	2f 81       	ldd	r18, Y+7	; 0x07
    2548:	38 85       	ldd	r19, Y+8	; 0x08
    254a:	27 30       	cpi	r18, 0x07	; 7
    254c:	31 05       	cpc	r19, r1
    254e:	5c f4       	brge	.+22     	; 0x2566 <Keypad_u8_Check_Row+0xcc>
    2550:	8f 81       	ldd	r24, Y+7	; 0x07
    2552:	98 85       	ldd	r25, Y+8	; 0x08
    2554:	84 30       	cpi	r24, 0x04	; 4
    2556:	91 05       	cpc	r25, r1
    2558:	89 f0       	breq	.+34     	; 0x257c <Keypad_u8_Check_Row+0xe2>
    255a:	2f 81       	ldd	r18, Y+7	; 0x07
    255c:	38 85       	ldd	r19, Y+8	; 0x08
    255e:	25 30       	cpi	r18, 0x05	; 5
    2560:	31 05       	cpc	r19, r1
    2562:	79 f0       	breq	.+30     	; 0x2582 <Keypad_u8_Check_Row+0xe8>
    2564:	8d c0       	rjmp	.+282    	; 0x2680 <Keypad_u8_Check_Row+0x1e6>
    2566:	8f 81       	ldd	r24, Y+7	; 0x07
    2568:	98 85       	ldd	r25, Y+8	; 0x08
    256a:	87 30       	cpi	r24, 0x07	; 7
    256c:	91 05       	cpc	r25, r1
    256e:	79 f0       	breq	.+30     	; 0x258e <Keypad_u8_Check_Row+0xf4>
    2570:	2f 81       	ldd	r18, Y+7	; 0x07
    2572:	38 85       	ldd	r19, Y+8	; 0x08
    2574:	28 30       	cpi	r18, 0x08	; 8
    2576:	31 05       	cpc	r19, r1
    2578:	69 f0       	breq	.+26     	; 0x2594 <Keypad_u8_Check_Row+0xfa>
    257a:	82 c0       	rjmp	.+260    	; 0x2680 <Keypad_u8_Check_Row+0x1e6>
			  case KEY_u8_C1:
							Local_u8_Data=KEYPAD_u8_R2C1	;
    257c:	84 e3       	ldi	r24, 0x34	; 52
    257e:	89 83       	std	Y+1, r24	; 0x01
    2580:	7f c0       	rjmp	.+254    	; 0x2680 <Keypad_u8_Check_Row+0x1e6>
							break;
			case KEY_u8_C2:
							Local_u8_Data=KEYPAD_u8_R2C2	;
    2582:	85 e3       	ldi	r24, 0x35	; 53
    2584:	89 83       	std	Y+1, r24	; 0x01
    2586:	7c c0       	rjmp	.+248    	; 0x2680 <Keypad_u8_Check_Row+0x1e6>
							break;
			case KEY_u8_C3:
							Local_u8_Data= KEYPAD_u8_R2C3	;
    2588:	86 e3       	ldi	r24, 0x36	; 54
    258a:	89 83       	std	Y+1, r24	; 0x01
    258c:	79 c0       	rjmp	.+242    	; 0x2680 <Keypad_u8_Check_Row+0x1e6>
							break;
			case KEY_u8_C4:
							Local_u8_Data= KEYPAD_u8_R2C4	;
    258e:	8a e2       	ldi	r24, 0x2A	; 42
    2590:	89 83       	std	Y+1, r24	; 0x01
    2592:	76 c0       	rjmp	.+236    	; 0x2680 <Keypad_u8_Check_Row+0x1e6>
							break;
			case KEY_u8_C5:
							Local_u8_Data= KEYPAD_u8_R2C5	;
    2594:	89 e2       	ldi	r24, 0x29	; 41
    2596:	89 83       	std	Y+1, r24	; 0x01
    2598:	73 c0       	rjmp	.+230    	; 0x2680 <Keypad_u8_Check_Row+0x1e6>
							break;
		 }
		 else if( DIO_Dyn_u8_GetPinValue(KEYPAD_u8_R3 )==DIO_Dyn_u8_LOW )
    259a:	82 e0       	ldi	r24, 0x02	; 2
    259c:	62 e0       	ldi	r22, 0x02	; 2
    259e:	0e 94 11 0a 	call	0x1422	; 0x1422 <DIO_Dyn_u8_GetPinValue>
    25a2:	88 23       	and	r24, r24
    25a4:	a1 f5       	brne	.+104    	; 0x260e <Keypad_u8_Check_Row+0x174>
	     switch (Copy_u8_Col){
    25a6:	8a 81       	ldd	r24, Y+2	; 0x02
    25a8:	28 2f       	mov	r18, r24
    25aa:	30 e0       	ldi	r19, 0x00	; 0
    25ac:	3e 83       	std	Y+6, r19	; 0x06
    25ae:	2d 83       	std	Y+5, r18	; 0x05
    25b0:	8d 81       	ldd	r24, Y+5	; 0x05
    25b2:	9e 81       	ldd	r25, Y+6	; 0x06
    25b4:	86 30       	cpi	r24, 0x06	; 6
    25b6:	91 05       	cpc	r25, r1
    25b8:	09 f1       	breq	.+66     	; 0x25fc <Keypad_u8_Check_Row+0x162>
    25ba:	2d 81       	ldd	r18, Y+5	; 0x05
    25bc:	3e 81       	ldd	r19, Y+6	; 0x06
    25be:	27 30       	cpi	r18, 0x07	; 7
    25c0:	31 05       	cpc	r19, r1
    25c2:	5c f4       	brge	.+22     	; 0x25da <Keypad_u8_Check_Row+0x140>
    25c4:	8d 81       	ldd	r24, Y+5	; 0x05
    25c6:	9e 81       	ldd	r25, Y+6	; 0x06
    25c8:	84 30       	cpi	r24, 0x04	; 4
    25ca:	91 05       	cpc	r25, r1
    25cc:	89 f0       	breq	.+34     	; 0x25f0 <Keypad_u8_Check_Row+0x156>
    25ce:	2d 81       	ldd	r18, Y+5	; 0x05
    25d0:	3e 81       	ldd	r19, Y+6	; 0x06
    25d2:	25 30       	cpi	r18, 0x05	; 5
    25d4:	31 05       	cpc	r19, r1
    25d6:	79 f0       	breq	.+30     	; 0x25f6 <Keypad_u8_Check_Row+0x15c>
    25d8:	53 c0       	rjmp	.+166    	; 0x2680 <Keypad_u8_Check_Row+0x1e6>
    25da:	8d 81       	ldd	r24, Y+5	; 0x05
    25dc:	9e 81       	ldd	r25, Y+6	; 0x06
    25de:	87 30       	cpi	r24, 0x07	; 7
    25e0:	91 05       	cpc	r25, r1
    25e2:	79 f0       	breq	.+30     	; 0x2602 <Keypad_u8_Check_Row+0x168>
    25e4:	2d 81       	ldd	r18, Y+5	; 0x05
    25e6:	3e 81       	ldd	r19, Y+6	; 0x06
    25e8:	28 30       	cpi	r18, 0x08	; 8
    25ea:	31 05       	cpc	r19, r1
    25ec:	69 f0       	breq	.+26     	; 0x2608 <Keypad_u8_Check_Row+0x16e>
    25ee:	48 c0       	rjmp	.+144    	; 0x2680 <Keypad_u8_Check_Row+0x1e6>
			  case KEY_u8_C1:
							Local_u8_Data=KEYPAD_u8_R3C1	;
    25f0:	81 e3       	ldi	r24, 0x31	; 49
    25f2:	89 83       	std	Y+1, r24	; 0x01
    25f4:	45 c0       	rjmp	.+138    	; 0x2680 <Keypad_u8_Check_Row+0x1e6>
							break;
			case KEY_u8_C2:
							Local_u8_Data=KEYPAD_u8_R3C2	;
    25f6:	82 e3       	ldi	r24, 0x32	; 50
    25f8:	89 83       	std	Y+1, r24	; 0x01
    25fa:	42 c0       	rjmp	.+132    	; 0x2680 <Keypad_u8_Check_Row+0x1e6>
							break;
			case KEY_u8_C3:
							Local_u8_Data= KEYPAD_u8_R3C3	;
    25fc:	83 e3       	ldi	r24, 0x33	; 51
    25fe:	89 83       	std	Y+1, r24	; 0x01
    2600:	3f c0       	rjmp	.+126    	; 0x2680 <Keypad_u8_Check_Row+0x1e6>
							break;
			case KEY_u8_C4:
							Local_u8_Data= KEYPAD_u8_R3C4	;
    2602:	8d e2       	ldi	r24, 0x2D	; 45
    2604:	89 83       	std	Y+1, r24	; 0x01
    2606:	3c c0       	rjmp	.+120    	; 0x2680 <Keypad_u8_Check_Row+0x1e6>
							break;
			case KEY_u8_C5:
							Local_u8_Data= KEYPAD_u8_R3C5	;
    2608:	8e e2       	ldi	r24, 0x2E	; 46
    260a:	89 83       	std	Y+1, r24	; 0x01
    260c:	39 c0       	rjmp	.+114    	; 0x2680 <Keypad_u8_Check_Row+0x1e6>
							break;
		 }
		 else if( DIO_Dyn_u8_GetPinValue(KEYPAD_u8_R4 )==DIO_Dyn_u8_LOW )
    260e:	82 e0       	ldi	r24, 0x02	; 2
    2610:	63 e0       	ldi	r22, 0x03	; 3
    2612:	0e 94 11 0a 	call	0x1422	; 0x1422 <DIO_Dyn_u8_GetPinValue>
    2616:	88 23       	and	r24, r24
    2618:	99 f5       	brne	.+102    	; 0x2680 <Keypad_u8_Check_Row+0x1e6>
	     switch (Copy_u8_Col){
    261a:	8a 81       	ldd	r24, Y+2	; 0x02
    261c:	28 2f       	mov	r18, r24
    261e:	30 e0       	ldi	r19, 0x00	; 0
    2620:	3c 83       	std	Y+4, r19	; 0x04
    2622:	2b 83       	std	Y+3, r18	; 0x03
    2624:	8b 81       	ldd	r24, Y+3	; 0x03
    2626:	9c 81       	ldd	r25, Y+4	; 0x04
    2628:	86 30       	cpi	r24, 0x06	; 6
    262a:	91 05       	cpc	r25, r1
    262c:	09 f1       	breq	.+66     	; 0x2670 <Keypad_u8_Check_Row+0x1d6>
    262e:	2b 81       	ldd	r18, Y+3	; 0x03
    2630:	3c 81       	ldd	r19, Y+4	; 0x04
    2632:	27 30       	cpi	r18, 0x07	; 7
    2634:	31 05       	cpc	r19, r1
    2636:	5c f4       	brge	.+22     	; 0x264e <Keypad_u8_Check_Row+0x1b4>
    2638:	8b 81       	ldd	r24, Y+3	; 0x03
    263a:	9c 81       	ldd	r25, Y+4	; 0x04
    263c:	84 30       	cpi	r24, 0x04	; 4
    263e:	91 05       	cpc	r25, r1
    2640:	89 f0       	breq	.+34     	; 0x2664 <Keypad_u8_Check_Row+0x1ca>
    2642:	2b 81       	ldd	r18, Y+3	; 0x03
    2644:	3c 81       	ldd	r19, Y+4	; 0x04
    2646:	25 30       	cpi	r18, 0x05	; 5
    2648:	31 05       	cpc	r19, r1
    264a:	79 f0       	breq	.+30     	; 0x266a <Keypad_u8_Check_Row+0x1d0>
    264c:	19 c0       	rjmp	.+50     	; 0x2680 <Keypad_u8_Check_Row+0x1e6>
    264e:	8b 81       	ldd	r24, Y+3	; 0x03
    2650:	9c 81       	ldd	r25, Y+4	; 0x04
    2652:	87 30       	cpi	r24, 0x07	; 7
    2654:	91 05       	cpc	r25, r1
    2656:	79 f0       	breq	.+30     	; 0x2676 <Keypad_u8_Check_Row+0x1dc>
    2658:	2b 81       	ldd	r18, Y+3	; 0x03
    265a:	3c 81       	ldd	r19, Y+4	; 0x04
    265c:	28 30       	cpi	r18, 0x08	; 8
    265e:	31 05       	cpc	r19, r1
    2660:	69 f0       	breq	.+26     	; 0x267c <Keypad_u8_Check_Row+0x1e2>
    2662:	0e c0       	rjmp	.+28     	; 0x2680 <Keypad_u8_Check_Row+0x1e6>
			case KEY_u8_C1:
							Local_u8_Data=KEYPAD_u8_R4C1	;
    2664:	83 e4       	ldi	r24, 0x43	; 67
    2666:	89 83       	std	Y+1, r24	; 0x01
    2668:	0b c0       	rjmp	.+22     	; 0x2680 <Keypad_u8_Check_Row+0x1e6>
							break;
			case KEY_u8_C2:
							Local_u8_Data=KEYPAD_u8_R4C2	;
    266a:	80 e3       	ldi	r24, 0x30	; 48
    266c:	89 83       	std	Y+1, r24	; 0x01
    266e:	08 c0       	rjmp	.+16     	; 0x2680 <Keypad_u8_Check_Row+0x1e6>
							break;
			case KEY_u8_C3:
							Local_u8_Data= KEYPAD_u8_R4C3	;
    2670:	8d e3       	ldi	r24, 0x3D	; 61
    2672:	89 83       	std	Y+1, r24	; 0x01
    2674:	05 c0       	rjmp	.+10     	; 0x2680 <Keypad_u8_Check_Row+0x1e6>
							break;
			case KEY_u8_C4:
							Local_u8_Data= KEYPAD_u8_R4C4	;
    2676:	8b e2       	ldi	r24, 0x2B	; 43
    2678:	89 83       	std	Y+1, r24	; 0x01
    267a:	02 c0       	rjmp	.+4      	; 0x2680 <Keypad_u8_Check_Row+0x1e6>
							break;
			case KEY_u8_C5:
							Local_u8_Data= KEYPAD_u8_R4C5	;
    267c:	8e e5       	ldi	r24, 0x5E	; 94
    267e:	89 83       	std	Y+1, r24	; 0x01
							break;
		 }
		 return Local_u8_Data;
    2680:	89 81       	ldd	r24, Y+1	; 0x01


}
    2682:	2a 96       	adiw	r28, 0x0a	; 10
    2684:	0f b6       	in	r0, 0x3f	; 63
    2686:	f8 94       	cli
    2688:	de bf       	out	0x3e, r29	; 62
    268a:	0f be       	out	0x3f, r0	; 63
    268c:	cd bf       	out	0x3d, r28	; 61
    268e:	cf 91       	pop	r28
    2690:	df 91       	pop	r29
    2692:	08 95       	ret

00002694 <stackc_init>:
{
    signed short top;
    char stk[stack_length];
} stack_char;
void stackc_init(stack_char* stk)
{
    2694:	df 93       	push	r29
    2696:	cf 93       	push	r28
    2698:	00 d0       	rcall	.+0      	; 0x269a <stackc_init+0x6>
    269a:	cd b7       	in	r28, 0x3d	; 61
    269c:	de b7       	in	r29, 0x3e	; 62
    269e:	9a 83       	std	Y+2, r25	; 0x02
    26a0:	89 83       	std	Y+1, r24	; 0x01
    stk->top=-1;
    26a2:	e9 81       	ldd	r30, Y+1	; 0x01
    26a4:	fa 81       	ldd	r31, Y+2	; 0x02
    26a6:	8f ef       	ldi	r24, 0xFF	; 255
    26a8:	9f ef       	ldi	r25, 0xFF	; 255
    26aa:	91 83       	std	Z+1, r25	; 0x01
    26ac:	80 83       	st	Z, r24
}
    26ae:	0f 90       	pop	r0
    26b0:	0f 90       	pop	r0
    26b2:	cf 91       	pop	r28
    26b4:	df 91       	pop	r29
    26b6:	08 95       	ret

000026b8 <stackc_push>:
void stackc_push(stack_char* stk,char ele)
{
    26b8:	df 93       	push	r29
    26ba:	cf 93       	push	r28
    26bc:	00 d0       	rcall	.+0      	; 0x26be <stackc_push+0x6>
    26be:	0f 92       	push	r0
    26c0:	cd b7       	in	r28, 0x3d	; 61
    26c2:	de b7       	in	r29, 0x3e	; 62
    26c4:	9a 83       	std	Y+2, r25	; 0x02
    26c6:	89 83       	std	Y+1, r24	; 0x01
    26c8:	6b 83       	std	Y+3, r22	; 0x03
    if(stk->top<stack_length)
    26ca:	e9 81       	ldd	r30, Y+1	; 0x01
    26cc:	fa 81       	ldd	r31, Y+2	; 0x02
    26ce:	80 81       	ld	r24, Z
    26d0:	91 81       	ldd	r25, Z+1	; 0x01
    26d2:	80 32       	cpi	r24, 0x20	; 32
    26d4:	91 05       	cpc	r25, r1
    26d6:	ac f4       	brge	.+42     	; 0x2702 <stackc_push+0x4a>
        stk->stk[++stk->top]=ele;
    26d8:	e9 81       	ldd	r30, Y+1	; 0x01
    26da:	fa 81       	ldd	r31, Y+2	; 0x02
    26dc:	80 81       	ld	r24, Z
    26de:	91 81       	ldd	r25, Z+1	; 0x01
    26e0:	01 96       	adiw	r24, 0x01	; 1
    26e2:	e9 81       	ldd	r30, Y+1	; 0x01
    26e4:	fa 81       	ldd	r31, Y+2	; 0x02
    26e6:	91 83       	std	Z+1, r25	; 0x01
    26e8:	80 83       	st	Z, r24
    26ea:	e9 81       	ldd	r30, Y+1	; 0x01
    26ec:	fa 81       	ldd	r31, Y+2	; 0x02
    26ee:	20 81       	ld	r18, Z
    26f0:	31 81       	ldd	r19, Z+1	; 0x01
    26f2:	89 81       	ldd	r24, Y+1	; 0x01
    26f4:	9a 81       	ldd	r25, Y+2	; 0x02
    26f6:	82 0f       	add	r24, r18
    26f8:	93 1f       	adc	r25, r19
    26fa:	fc 01       	movw	r30, r24
    26fc:	32 96       	adiw	r30, 0x02	; 2
    26fe:	8b 81       	ldd	r24, Y+3	; 0x03
    2700:	80 83       	st	Z, r24
    return;
}
    2702:	0f 90       	pop	r0
    2704:	0f 90       	pop	r0
    2706:	0f 90       	pop	r0
    2708:	cf 91       	pop	r28
    270a:	df 91       	pop	r29
    270c:	08 95       	ret

0000270e <stackc_empty>:
u8 stackc_empty(stack_char* stk)
{
    270e:	df 93       	push	r29
    2710:	cf 93       	push	r28
    2712:	00 d0       	rcall	.+0      	; 0x2714 <stackc_empty+0x6>
    2714:	0f 92       	push	r0
    2716:	cd b7       	in	r28, 0x3d	; 61
    2718:	de b7       	in	r29, 0x3e	; 62
    271a:	9a 83       	std	Y+2, r25	; 0x02
    271c:	89 83       	std	Y+1, r24	; 0x01
    if(stk->top==-1)
    271e:	e9 81       	ldd	r30, Y+1	; 0x01
    2720:	fa 81       	ldd	r31, Y+2	; 0x02
    2722:	80 81       	ld	r24, Z
    2724:	91 81       	ldd	r25, Z+1	; 0x01
    2726:	2f ef       	ldi	r18, 0xFF	; 255
    2728:	8f 3f       	cpi	r24, 0xFF	; 255
    272a:	92 07       	cpc	r25, r18
    272c:	19 f4       	brne	.+6      	; 0x2734 <stackc_empty+0x26>
        return true;
    272e:	81 e0       	ldi	r24, 0x01	; 1
    2730:	8b 83       	std	Y+3, r24	; 0x03
    2732:	01 c0       	rjmp	.+2      	; 0x2736 <stackc_empty+0x28>
    return false;
    2734:	1b 82       	std	Y+3, r1	; 0x03
    2736:	8b 81       	ldd	r24, Y+3	; 0x03
}
    2738:	0f 90       	pop	r0
    273a:	0f 90       	pop	r0
    273c:	0f 90       	pop	r0
    273e:	cf 91       	pop	r28
    2740:	df 91       	pop	r29
    2742:	08 95       	ret

00002744 <stackc_pop>:
void stackc_pop(stack_char* stk)
{
    2744:	df 93       	push	r29
    2746:	cf 93       	push	r28
    2748:	00 d0       	rcall	.+0      	; 0x274a <stackc_pop+0x6>
    274a:	cd b7       	in	r28, 0x3d	; 61
    274c:	de b7       	in	r29, 0x3e	; 62
    274e:	9a 83       	std	Y+2, r25	; 0x02
    2750:	89 83       	std	Y+1, r24	; 0x01
    if(stk->top>-1)
    2752:	e9 81       	ldd	r30, Y+1	; 0x01
    2754:	fa 81       	ldd	r31, Y+2	; 0x02
    2756:	80 81       	ld	r24, Z
    2758:	91 81       	ldd	r25, Z+1	; 0x01
    275a:	99 23       	and	r25, r25
    275c:	4c f0       	brlt	.+18     	; 0x2770 <stackc_pop+0x2c>
        stk->top--;
    275e:	e9 81       	ldd	r30, Y+1	; 0x01
    2760:	fa 81       	ldd	r31, Y+2	; 0x02
    2762:	80 81       	ld	r24, Z
    2764:	91 81       	ldd	r25, Z+1	; 0x01
    2766:	01 97       	sbiw	r24, 0x01	; 1
    2768:	e9 81       	ldd	r30, Y+1	; 0x01
    276a:	fa 81       	ldd	r31, Y+2	; 0x02
    276c:	91 83       	std	Z+1, r25	; 0x01
    276e:	80 83       	st	Z, r24
    return;
}
    2770:	0f 90       	pop	r0
    2772:	0f 90       	pop	r0
    2774:	cf 91       	pop	r28
    2776:	df 91       	pop	r29
    2778:	08 95       	ret

0000277a <stackc_top>:
char stackc_top(stack_char* stk)
{
    277a:	df 93       	push	r29
    277c:	cf 93       	push	r28
    277e:	00 d0       	rcall	.+0      	; 0x2780 <stackc_top+0x6>
    2780:	0f 92       	push	r0
    2782:	cd b7       	in	r28, 0x3d	; 61
    2784:	de b7       	in	r29, 0x3e	; 62
    2786:	9a 83       	std	Y+2, r25	; 0x02
    2788:	89 83       	std	Y+1, r24	; 0x01
    if(stk->top<stack_length)
    278a:	e9 81       	ldd	r30, Y+1	; 0x01
    278c:	fa 81       	ldd	r31, Y+2	; 0x02
    278e:	80 81       	ld	r24, Z
    2790:	91 81       	ldd	r25, Z+1	; 0x01
    2792:	80 32       	cpi	r24, 0x20	; 32
    2794:	91 05       	cpc	r25, r1
    2796:	6c f4       	brge	.+26     	; 0x27b2 <stackc_top+0x38>
        return stk->stk[stk->top];
    2798:	e9 81       	ldd	r30, Y+1	; 0x01
    279a:	fa 81       	ldd	r31, Y+2	; 0x02
    279c:	20 81       	ld	r18, Z
    279e:	31 81       	ldd	r19, Z+1	; 0x01
    27a0:	89 81       	ldd	r24, Y+1	; 0x01
    27a2:	9a 81       	ldd	r25, Y+2	; 0x02
    27a4:	82 0f       	add	r24, r18
    27a6:	93 1f       	adc	r25, r19
    27a8:	fc 01       	movw	r30, r24
    27aa:	32 96       	adiw	r30, 0x02	; 2
    27ac:	80 81       	ld	r24, Z
    27ae:	8b 83       	std	Y+3, r24	; 0x03
    27b0:	01 c0       	rjmp	.+2      	; 0x27b4 <stackc_top+0x3a>
    else
        return '\0';
    27b2:	1b 82       	std	Y+3, r1	; 0x03
    27b4:	8b 81       	ldd	r24, Y+3	; 0x03
}
    27b6:	0f 90       	pop	r0
    27b8:	0f 90       	pop	r0
    27ba:	0f 90       	pop	r0
    27bc:	cf 91       	pop	r28
    27be:	df 91       	pop	r29
    27c0:	08 95       	ret

000027c2 <stackf_init>:
{
    signed short top;
    f32 stk[stack_length];
} stack_float;
void stackf_init(stack_float* stk)
{
    27c2:	df 93       	push	r29
    27c4:	cf 93       	push	r28
    27c6:	00 d0       	rcall	.+0      	; 0x27c8 <stackf_init+0x6>
    27c8:	cd b7       	in	r28, 0x3d	; 61
    27ca:	de b7       	in	r29, 0x3e	; 62
    27cc:	9a 83       	std	Y+2, r25	; 0x02
    27ce:	89 83       	std	Y+1, r24	; 0x01
    stk->top=-1;
    27d0:	e9 81       	ldd	r30, Y+1	; 0x01
    27d2:	fa 81       	ldd	r31, Y+2	; 0x02
    27d4:	8f ef       	ldi	r24, 0xFF	; 255
    27d6:	9f ef       	ldi	r25, 0xFF	; 255
    27d8:	91 83       	std	Z+1, r25	; 0x01
    27da:	80 83       	st	Z, r24
}
    27dc:	0f 90       	pop	r0
    27de:	0f 90       	pop	r0
    27e0:	cf 91       	pop	r28
    27e2:	df 91       	pop	r29
    27e4:	08 95       	ret

000027e6 <stackf_push>:
void stackf_push(stack_float* stk,f32 ele)
{
    27e6:	df 93       	push	r29
    27e8:	cf 93       	push	r28
    27ea:	00 d0       	rcall	.+0      	; 0x27ec <stackf_push+0x6>
    27ec:	00 d0       	rcall	.+0      	; 0x27ee <stackf_push+0x8>
    27ee:	00 d0       	rcall	.+0      	; 0x27f0 <stackf_push+0xa>
    27f0:	cd b7       	in	r28, 0x3d	; 61
    27f2:	de b7       	in	r29, 0x3e	; 62
    27f4:	9a 83       	std	Y+2, r25	; 0x02
    27f6:	89 83       	std	Y+1, r24	; 0x01
    27f8:	4b 83       	std	Y+3, r20	; 0x03
    27fa:	5c 83       	std	Y+4, r21	; 0x04
    27fc:	6d 83       	std	Y+5, r22	; 0x05
    27fe:	7e 83       	std	Y+6, r23	; 0x06
    if(stk->top < stack_length)
    2800:	e9 81       	ldd	r30, Y+1	; 0x01
    2802:	fa 81       	ldd	r31, Y+2	; 0x02
    2804:	80 81       	ld	r24, Z
    2806:	91 81       	ldd	r25, Z+1	; 0x01
    2808:	80 32       	cpi	r24, 0x20	; 32
    280a:	91 05       	cpc	r25, r1
    280c:	fc f4       	brge	.+62     	; 0x284c <stackf_push+0x66>
        stk->stk[++stk->top]=ele;
    280e:	e9 81       	ldd	r30, Y+1	; 0x01
    2810:	fa 81       	ldd	r31, Y+2	; 0x02
    2812:	80 81       	ld	r24, Z
    2814:	91 81       	ldd	r25, Z+1	; 0x01
    2816:	01 96       	adiw	r24, 0x01	; 1
    2818:	e9 81       	ldd	r30, Y+1	; 0x01
    281a:	fa 81       	ldd	r31, Y+2	; 0x02
    281c:	91 83       	std	Z+1, r25	; 0x01
    281e:	80 83       	st	Z, r24
    2820:	e9 81       	ldd	r30, Y+1	; 0x01
    2822:	fa 81       	ldd	r31, Y+2	; 0x02
    2824:	80 81       	ld	r24, Z
    2826:	91 81       	ldd	r25, Z+1	; 0x01
    2828:	29 81       	ldd	r18, Y+1	; 0x01
    282a:	3a 81       	ldd	r19, Y+2	; 0x02
    282c:	88 0f       	add	r24, r24
    282e:	99 1f       	adc	r25, r25
    2830:	01 96       	adiw	r24, 0x01	; 1
    2832:	88 0f       	add	r24, r24
    2834:	99 1f       	adc	r25, r25
    2836:	f9 01       	movw	r30, r18
    2838:	e8 0f       	add	r30, r24
    283a:	f9 1f       	adc	r31, r25
    283c:	8b 81       	ldd	r24, Y+3	; 0x03
    283e:	9c 81       	ldd	r25, Y+4	; 0x04
    2840:	ad 81       	ldd	r26, Y+5	; 0x05
    2842:	be 81       	ldd	r27, Y+6	; 0x06
    2844:	80 83       	st	Z, r24
    2846:	91 83       	std	Z+1, r25	; 0x01
    2848:	a2 83       	std	Z+2, r26	; 0x02
    284a:	b3 83       	std	Z+3, r27	; 0x03
    return;
}
    284c:	26 96       	adiw	r28, 0x06	; 6
    284e:	0f b6       	in	r0, 0x3f	; 63
    2850:	f8 94       	cli
    2852:	de bf       	out	0x3e, r29	; 62
    2854:	0f be       	out	0x3f, r0	; 63
    2856:	cd bf       	out	0x3d, r28	; 61
    2858:	cf 91       	pop	r28
    285a:	df 91       	pop	r29
    285c:	08 95       	ret

0000285e <stackf_empty>:
u8 stackf_empty(stack_float* stk)
{
    285e:	df 93       	push	r29
    2860:	cf 93       	push	r28
    2862:	00 d0       	rcall	.+0      	; 0x2864 <stackf_empty+0x6>
    2864:	0f 92       	push	r0
    2866:	cd b7       	in	r28, 0x3d	; 61
    2868:	de b7       	in	r29, 0x3e	; 62
    286a:	9a 83       	std	Y+2, r25	; 0x02
    286c:	89 83       	std	Y+1, r24	; 0x01
    if(stk->top==-1)
    286e:	e9 81       	ldd	r30, Y+1	; 0x01
    2870:	fa 81       	ldd	r31, Y+2	; 0x02
    2872:	80 81       	ld	r24, Z
    2874:	91 81       	ldd	r25, Z+1	; 0x01
    2876:	2f ef       	ldi	r18, 0xFF	; 255
    2878:	8f 3f       	cpi	r24, 0xFF	; 255
    287a:	92 07       	cpc	r25, r18
    287c:	19 f4       	brne	.+6      	; 0x2884 <stackf_empty+0x26>
        return true;
    287e:	81 e0       	ldi	r24, 0x01	; 1
    2880:	8b 83       	std	Y+3, r24	; 0x03
    2882:	01 c0       	rjmp	.+2      	; 0x2886 <stackf_empty+0x28>
    return false;
    2884:	1b 82       	std	Y+3, r1	; 0x03
    2886:	8b 81       	ldd	r24, Y+3	; 0x03
}
    2888:	0f 90       	pop	r0
    288a:	0f 90       	pop	r0
    288c:	0f 90       	pop	r0
    288e:	cf 91       	pop	r28
    2890:	df 91       	pop	r29
    2892:	08 95       	ret

00002894 <stackf_pop>:
void stackf_pop(stack_float* stk)
{
    2894:	df 93       	push	r29
    2896:	cf 93       	push	r28
    2898:	00 d0       	rcall	.+0      	; 0x289a <stackf_pop+0x6>
    289a:	cd b7       	in	r28, 0x3d	; 61
    289c:	de b7       	in	r29, 0x3e	; 62
    289e:	9a 83       	std	Y+2, r25	; 0x02
    28a0:	89 83       	std	Y+1, r24	; 0x01
    if(stk->top>-1)
    28a2:	e9 81       	ldd	r30, Y+1	; 0x01
    28a4:	fa 81       	ldd	r31, Y+2	; 0x02
    28a6:	80 81       	ld	r24, Z
    28a8:	91 81       	ldd	r25, Z+1	; 0x01
    28aa:	99 23       	and	r25, r25
    28ac:	4c f0       	brlt	.+18     	; 0x28c0 <stackf_pop+0x2c>
        stk->top--;
    28ae:	e9 81       	ldd	r30, Y+1	; 0x01
    28b0:	fa 81       	ldd	r31, Y+2	; 0x02
    28b2:	80 81       	ld	r24, Z
    28b4:	91 81       	ldd	r25, Z+1	; 0x01
    28b6:	01 97       	sbiw	r24, 0x01	; 1
    28b8:	e9 81       	ldd	r30, Y+1	; 0x01
    28ba:	fa 81       	ldd	r31, Y+2	; 0x02
    28bc:	91 83       	std	Z+1, r25	; 0x01
    28be:	80 83       	st	Z, r24
    return;
}
    28c0:	0f 90       	pop	r0
    28c2:	0f 90       	pop	r0
    28c4:	cf 91       	pop	r28
    28c6:	df 91       	pop	r29
    28c8:	08 95       	ret

000028ca <stackf_top>:
f32 stackf_top(stack_float* stk)
{
    28ca:	df 93       	push	r29
    28cc:	cf 93       	push	r28
    28ce:	00 d0       	rcall	.+0      	; 0x28d0 <stackf_top+0x6>
    28d0:	00 d0       	rcall	.+0      	; 0x28d2 <stackf_top+0x8>
    28d2:	00 d0       	rcall	.+0      	; 0x28d4 <stackf_top+0xa>
    28d4:	cd b7       	in	r28, 0x3d	; 61
    28d6:	de b7       	in	r29, 0x3e	; 62
    28d8:	9a 83       	std	Y+2, r25	; 0x02
    28da:	89 83       	std	Y+1, r24	; 0x01
    if(stk->top<stack_length)
    28dc:	e9 81       	ldd	r30, Y+1	; 0x01
    28de:	fa 81       	ldd	r31, Y+2	; 0x02
    28e0:	80 81       	ld	r24, Z
    28e2:	91 81       	ldd	r25, Z+1	; 0x01
    28e4:	80 32       	cpi	r24, 0x20	; 32
    28e6:	91 05       	cpc	r25, r1
    28e8:	bc f4       	brge	.+46     	; 0x2918 <stackf_top+0x4e>
        return stk->stk[stk->top];
    28ea:	e9 81       	ldd	r30, Y+1	; 0x01
    28ec:	fa 81       	ldd	r31, Y+2	; 0x02
    28ee:	80 81       	ld	r24, Z
    28f0:	91 81       	ldd	r25, Z+1	; 0x01
    28f2:	29 81       	ldd	r18, Y+1	; 0x01
    28f4:	3a 81       	ldd	r19, Y+2	; 0x02
    28f6:	88 0f       	add	r24, r24
    28f8:	99 1f       	adc	r25, r25
    28fa:	01 96       	adiw	r24, 0x01	; 1
    28fc:	88 0f       	add	r24, r24
    28fe:	99 1f       	adc	r25, r25
    2900:	f9 01       	movw	r30, r18
    2902:	e8 0f       	add	r30, r24
    2904:	f9 1f       	adc	r31, r25
    2906:	80 81       	ld	r24, Z
    2908:	91 81       	ldd	r25, Z+1	; 0x01
    290a:	a2 81       	ldd	r26, Z+2	; 0x02
    290c:	b3 81       	ldd	r27, Z+3	; 0x03
    290e:	8b 83       	std	Y+3, r24	; 0x03
    2910:	9c 83       	std	Y+4, r25	; 0x04
    2912:	ad 83       	std	Y+5, r26	; 0x05
    2914:	be 83       	std	Y+6, r27	; 0x06
    2916:	08 c0       	rjmp	.+16     	; 0x2928 <stackf_top+0x5e>
    else
        return 0.0f;
    2918:	80 e0       	ldi	r24, 0x00	; 0
    291a:	90 e0       	ldi	r25, 0x00	; 0
    291c:	a0 e0       	ldi	r26, 0x00	; 0
    291e:	b0 e0       	ldi	r27, 0x00	; 0
    2920:	8b 83       	std	Y+3, r24	; 0x03
    2922:	9c 83       	std	Y+4, r25	; 0x04
    2924:	ad 83       	std	Y+5, r26	; 0x05
    2926:	be 83       	std	Y+6, r27	; 0x06
    2928:	8b 81       	ldd	r24, Y+3	; 0x03
    292a:	9c 81       	ldd	r25, Y+4	; 0x04
    292c:	ad 81       	ldd	r26, Y+5	; 0x05
    292e:	be 81       	ldd	r27, Y+6	; 0x06
}
    2930:	bc 01       	movw	r22, r24
    2932:	cd 01       	movw	r24, r26
    2934:	26 96       	adiw	r28, 0x06	; 6
    2936:	0f b6       	in	r0, 0x3f	; 63
    2938:	f8 94       	cli
    293a:	de bf       	out	0x3e, r29	; 62
    293c:	0f be       	out	0x3f, r0	; 63
    293e:	cd bf       	out	0x3d, r28	; 61
    2940:	cf 91       	pop	r28
    2942:	df 91       	pop	r29
    2944:	08 95       	ret

00002946 <IsOperator>:


u8 IsOperator(u8 Copy_u8_Op)
{
    2946:	df 93       	push	r29
    2948:	cf 93       	push	r28
    294a:	00 d0       	rcall	.+0      	; 0x294c <IsOperator+0x6>
    294c:	cd b7       	in	r28, 0x3d	; 61
    294e:	de b7       	in	r29, 0x3e	; 62
    2950:	89 83       	std	Y+1, r24	; 0x01
    if(Copy_u8_Op=='+'||Copy_u8_Op=='-'||Copy_u8_Op=='^'||Copy_u8_Op=='*'||Copy_u8_Op=='/'||Copy_u8_Op=='%')
    2952:	89 81       	ldd	r24, Y+1	; 0x01
    2954:	8b 32       	cpi	r24, 0x2B	; 43
    2956:	79 f0       	breq	.+30     	; 0x2976 <IsOperator+0x30>
    2958:	89 81       	ldd	r24, Y+1	; 0x01
    295a:	8d 32       	cpi	r24, 0x2D	; 45
    295c:	61 f0       	breq	.+24     	; 0x2976 <IsOperator+0x30>
    295e:	89 81       	ldd	r24, Y+1	; 0x01
    2960:	8e 35       	cpi	r24, 0x5E	; 94
    2962:	49 f0       	breq	.+18     	; 0x2976 <IsOperator+0x30>
    2964:	89 81       	ldd	r24, Y+1	; 0x01
    2966:	8a 32       	cpi	r24, 0x2A	; 42
    2968:	31 f0       	breq	.+12     	; 0x2976 <IsOperator+0x30>
    296a:	89 81       	ldd	r24, Y+1	; 0x01
    296c:	8f 32       	cpi	r24, 0x2F	; 47
    296e:	19 f0       	breq	.+6      	; 0x2976 <IsOperator+0x30>
    2970:	89 81       	ldd	r24, Y+1	; 0x01
    2972:	85 32       	cpi	r24, 0x25	; 37
    2974:	19 f4       	brne	.+6      	; 0x297c <IsOperator+0x36>
        return true;
    2976:	81 e0       	ldi	r24, 0x01	; 1
    2978:	8a 83       	std	Y+2, r24	; 0x02
    297a:	01 c0       	rjmp	.+2      	; 0x297e <IsOperator+0x38>
    else
        return false;
    297c:	1a 82       	std	Y+2, r1	; 0x02
    297e:	8a 81       	ldd	r24, Y+2	; 0x02
}
    2980:	0f 90       	pop	r0
    2982:	0f 90       	pop	r0
    2984:	cf 91       	pop	r28
    2986:	df 91       	pop	r29
    2988:	08 95       	ret

0000298a <Power>:
f32 Power(u32 Copy_u32_Power,u32 Copy_u32_Base)
{
    298a:	df 93       	push	r29
    298c:	cf 93       	push	r28
    298e:	cd b7       	in	r28, 0x3d	; 61
    2990:	de b7       	in	r29, 0x3e	; 62
    2992:	2c 97       	sbiw	r28, 0x0c	; 12
    2994:	0f b6       	in	r0, 0x3f	; 63
    2996:	f8 94       	cli
    2998:	de bf       	out	0x3e, r29	; 62
    299a:	0f be       	out	0x3f, r0	; 63
    299c:	cd bf       	out	0x3d, r28	; 61
    299e:	6d 83       	std	Y+5, r22	; 0x05
    29a0:	7e 83       	std	Y+6, r23	; 0x06
    29a2:	8f 83       	std	Y+7, r24	; 0x07
    29a4:	98 87       	std	Y+8, r25	; 0x08
    29a6:	29 87       	std	Y+9, r18	; 0x09
    29a8:	3a 87       	std	Y+10, r19	; 0x0a
    29aa:	4b 87       	std	Y+11, r20	; 0x0b
    29ac:	5c 87       	std	Y+12, r21	; 0x0c
    f32 Local_Res=1;
    29ae:	80 e0       	ldi	r24, 0x00	; 0
    29b0:	90 e0       	ldi	r25, 0x00	; 0
    29b2:	a0 e8       	ldi	r26, 0x80	; 128
    29b4:	bf e3       	ldi	r27, 0x3F	; 63
    29b6:	89 83       	std	Y+1, r24	; 0x01
    29b8:	9a 83       	std	Y+2, r25	; 0x02
    29ba:	ab 83       	std	Y+3, r26	; 0x03
    29bc:	bc 83       	std	Y+4, r27	; 0x04
    29be:	38 c0       	rjmp	.+112    	; 0x2a30 <Power+0xa6>
    while(Copy_u32_Power!=0)
    {
        if(Copy_u32_Power%2!=0)
    29c0:	8d 81       	ldd	r24, Y+5	; 0x05
    29c2:	9e 81       	ldd	r25, Y+6	; 0x06
    29c4:	81 70       	andi	r24, 0x01	; 1
    29c6:	90 70       	andi	r25, 0x00	; 0
    29c8:	88 23       	and	r24, r24
    29ca:	a1 f0       	breq	.+40     	; 0x29f4 <Power+0x6a>
            Local_Res=Local_Res*Copy_u32_Base;
    29cc:	69 85       	ldd	r22, Y+9	; 0x09
    29ce:	7a 85       	ldd	r23, Y+10	; 0x0a
    29d0:	8b 85       	ldd	r24, Y+11	; 0x0b
    29d2:	9c 85       	ldd	r25, Y+12	; 0x0c
    29d4:	0e 94 ff 04 	call	0x9fe	; 0x9fe <__floatunsisf>
    29d8:	9b 01       	movw	r18, r22
    29da:	ac 01       	movw	r20, r24
    29dc:	69 81       	ldd	r22, Y+1	; 0x01
    29de:	7a 81       	ldd	r23, Y+2	; 0x02
    29e0:	8b 81       	ldd	r24, Y+3	; 0x03
    29e2:	9c 81       	ldd	r25, Y+4	; 0x04
    29e4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    29e8:	dc 01       	movw	r26, r24
    29ea:	cb 01       	movw	r24, r22
    29ec:	89 83       	std	Y+1, r24	; 0x01
    29ee:	9a 83       	std	Y+2, r25	; 0x02
    29f0:	ab 83       	std	Y+3, r26	; 0x03
    29f2:	bc 83       	std	Y+4, r27	; 0x04
        Copy_u32_Base*=Copy_u32_Base;
    29f4:	89 85       	ldd	r24, Y+9	; 0x09
    29f6:	9a 85       	ldd	r25, Y+10	; 0x0a
    29f8:	ab 85       	ldd	r26, Y+11	; 0x0b
    29fa:	bc 85       	ldd	r27, Y+12	; 0x0c
    29fc:	29 85       	ldd	r18, Y+9	; 0x09
    29fe:	3a 85       	ldd	r19, Y+10	; 0x0a
    2a00:	4b 85       	ldd	r20, Y+11	; 0x0b
    2a02:	5c 85       	ldd	r21, Y+12	; 0x0c
    2a04:	bc 01       	movw	r22, r24
    2a06:	cd 01       	movw	r24, r26
    2a08:	0e 94 7e 1d 	call	0x3afc	; 0x3afc <__mulsi3>
    2a0c:	dc 01       	movw	r26, r24
    2a0e:	cb 01       	movw	r24, r22
    2a10:	89 87       	std	Y+9, r24	; 0x09
    2a12:	9a 87       	std	Y+10, r25	; 0x0a
    2a14:	ab 87       	std	Y+11, r26	; 0x0b
    2a16:	bc 87       	std	Y+12, r27	; 0x0c
        Copy_u32_Power/=2;
    2a18:	8d 81       	ldd	r24, Y+5	; 0x05
    2a1a:	9e 81       	ldd	r25, Y+6	; 0x06
    2a1c:	af 81       	ldd	r26, Y+7	; 0x07
    2a1e:	b8 85       	ldd	r27, Y+8	; 0x08
    2a20:	b6 95       	lsr	r27
    2a22:	a7 95       	ror	r26
    2a24:	97 95       	ror	r25
    2a26:	87 95       	ror	r24
    2a28:	8d 83       	std	Y+5, r24	; 0x05
    2a2a:	9e 83       	std	Y+6, r25	; 0x06
    2a2c:	af 83       	std	Y+7, r26	; 0x07
    2a2e:	b8 87       	std	Y+8, r27	; 0x08
        return false;
}
f32 Power(u32 Copy_u32_Power,u32 Copy_u32_Base)
{
    f32 Local_Res=1;
    while(Copy_u32_Power!=0)
    2a30:	8d 81       	ldd	r24, Y+5	; 0x05
    2a32:	9e 81       	ldd	r25, Y+6	; 0x06
    2a34:	af 81       	ldd	r26, Y+7	; 0x07
    2a36:	b8 85       	ldd	r27, Y+8	; 0x08
    2a38:	00 97       	sbiw	r24, 0x00	; 0
    2a3a:	a1 05       	cpc	r26, r1
    2a3c:	b1 05       	cpc	r27, r1
    2a3e:	09 f0       	breq	.+2      	; 0x2a42 <Power+0xb8>
    2a40:	bf cf       	rjmp	.-130    	; 0x29c0 <Power+0x36>
        if(Copy_u32_Power%2!=0)
            Local_Res=Local_Res*Copy_u32_Base;
        Copy_u32_Base*=Copy_u32_Base;
        Copy_u32_Power/=2;
    }
    return Local_Res;
    2a42:	89 81       	ldd	r24, Y+1	; 0x01
    2a44:	9a 81       	ldd	r25, Y+2	; 0x02
    2a46:	ab 81       	ldd	r26, Y+3	; 0x03
    2a48:	bc 81       	ldd	r27, Y+4	; 0x04
}
    2a4a:	bc 01       	movw	r22, r24
    2a4c:	cd 01       	movw	r24, r26
    2a4e:	2c 96       	adiw	r28, 0x0c	; 12
    2a50:	0f b6       	in	r0, 0x3f	; 63
    2a52:	f8 94       	cli
    2a54:	de bf       	out	0x3e, r29	; 62
    2a56:	0f be       	out	0x3f, r0	; 63
    2a58:	cd bf       	out	0x3d, r28	; 61
    2a5a:	cf 91       	pop	r28
    2a5c:	df 91       	pop	r29
    2a5e:	08 95       	ret

00002a60 <Check_Precedance>:
u8 Check_Precedance(u8 Stack_Op,u8 Current_Op)  // Send the top of stack to Stack_Op ,send current operator to Current_Op
{
    2a60:	df 93       	push	r29
    2a62:	cf 93       	push	r28
    2a64:	00 d0       	rcall	.+0      	; 0x2a66 <Check_Precedance+0x6>
    2a66:	0f 92       	push	r0
    2a68:	cd b7       	in	r28, 0x3d	; 61
    2a6a:	de b7       	in	r29, 0x3e	; 62
    2a6c:	89 83       	std	Y+1, r24	; 0x01
    2a6e:	6a 83       	std	Y+2, r22	; 0x02
    if(Stack_Op=='^')
    2a70:	89 81       	ldd	r24, Y+1	; 0x01
    2a72:	8e 35       	cpi	r24, 0x5E	; 94
    2a74:	19 f4       	brne	.+6      	; 0x2a7c <Check_Precedance+0x1c>
        return true;
    2a76:	81 e0       	ldi	r24, 0x01	; 1
    2a78:	8b 83       	std	Y+3, r24	; 0x03
    2a7a:	37 c0       	rjmp	.+110    	; 0x2aea <Check_Precedance+0x8a>
    else if( (Stack_Op=='/' ||Stack_Op=='*'||Stack_Op=='%')&& (Current_Op=='-'||Current_Op=='+') )
    2a7c:	89 81       	ldd	r24, Y+1	; 0x01
    2a7e:	8f 32       	cpi	r24, 0x2F	; 47
    2a80:	31 f0       	breq	.+12     	; 0x2a8e <Check_Precedance+0x2e>
    2a82:	89 81       	ldd	r24, Y+1	; 0x01
    2a84:	8a 32       	cpi	r24, 0x2A	; 42
    2a86:	19 f0       	breq	.+6      	; 0x2a8e <Check_Precedance+0x2e>
    2a88:	89 81       	ldd	r24, Y+1	; 0x01
    2a8a:	85 32       	cpi	r24, 0x25	; 37
    2a8c:	49 f4       	brne	.+18     	; 0x2aa0 <Check_Precedance+0x40>
    2a8e:	8a 81       	ldd	r24, Y+2	; 0x02
    2a90:	8d 32       	cpi	r24, 0x2D	; 45
    2a92:	19 f0       	breq	.+6      	; 0x2a9a <Check_Precedance+0x3a>
    2a94:	8a 81       	ldd	r24, Y+2	; 0x02
    2a96:	8b 32       	cpi	r24, 0x2B	; 43
    2a98:	19 f4       	brne	.+6      	; 0x2aa0 <Check_Precedance+0x40>
        return true;
    2a9a:	81 e0       	ldi	r24, 0x01	; 1
    2a9c:	8b 83       	std	Y+3, r24	; 0x03
    2a9e:	25 c0       	rjmp	.+74     	; 0x2aea <Check_Precedance+0x8a>
    else if(  (Stack_Op=='/' ||Stack_Op=='*'||Stack_Op=='%')&& (Current_Op=='/'||Current_Op=='*'||Stack_Op=='%'))
    2aa0:	89 81       	ldd	r24, Y+1	; 0x01
    2aa2:	8f 32       	cpi	r24, 0x2F	; 47
    2aa4:	31 f0       	breq	.+12     	; 0x2ab2 <Check_Precedance+0x52>
    2aa6:	89 81       	ldd	r24, Y+1	; 0x01
    2aa8:	8a 32       	cpi	r24, 0x2A	; 42
    2aaa:	19 f0       	breq	.+6      	; 0x2ab2 <Check_Precedance+0x52>
    2aac:	89 81       	ldd	r24, Y+1	; 0x01
    2aae:	85 32       	cpi	r24, 0x25	; 37
    2ab0:	61 f4       	brne	.+24     	; 0x2aca <Check_Precedance+0x6a>
    2ab2:	8a 81       	ldd	r24, Y+2	; 0x02
    2ab4:	8f 32       	cpi	r24, 0x2F	; 47
    2ab6:	31 f0       	breq	.+12     	; 0x2ac4 <Check_Precedance+0x64>
    2ab8:	8a 81       	ldd	r24, Y+2	; 0x02
    2aba:	8a 32       	cpi	r24, 0x2A	; 42
    2abc:	19 f0       	breq	.+6      	; 0x2ac4 <Check_Precedance+0x64>
    2abe:	89 81       	ldd	r24, Y+1	; 0x01
    2ac0:	85 32       	cpi	r24, 0x25	; 37
    2ac2:	19 f4       	brne	.+6      	; 0x2aca <Check_Precedance+0x6a>
        return true;
    2ac4:	81 e0       	ldi	r24, 0x01	; 1
    2ac6:	8b 83       	std	Y+3, r24	; 0x03
    2ac8:	10 c0       	rjmp	.+32     	; 0x2aea <Check_Precedance+0x8a>
    else if(  (Stack_Op=='+' ||Stack_Op=='-')&& (Current_Op=='+'||Current_Op=='-'))
    2aca:	89 81       	ldd	r24, Y+1	; 0x01
    2acc:	8b 32       	cpi	r24, 0x2B	; 43
    2ace:	19 f0       	breq	.+6      	; 0x2ad6 <Check_Precedance+0x76>
    2ad0:	89 81       	ldd	r24, Y+1	; 0x01
    2ad2:	8d 32       	cpi	r24, 0x2D	; 45
    2ad4:	49 f4       	brne	.+18     	; 0x2ae8 <Check_Precedance+0x88>
    2ad6:	8a 81       	ldd	r24, Y+2	; 0x02
    2ad8:	8b 32       	cpi	r24, 0x2B	; 43
    2ada:	19 f0       	breq	.+6      	; 0x2ae2 <Check_Precedance+0x82>
    2adc:	8a 81       	ldd	r24, Y+2	; 0x02
    2ade:	8d 32       	cpi	r24, 0x2D	; 45
    2ae0:	19 f4       	brne	.+6      	; 0x2ae8 <Check_Precedance+0x88>
        return true;
    2ae2:	81 e0       	ldi	r24, 0x01	; 1
    2ae4:	8b 83       	std	Y+3, r24	; 0x03
    2ae6:	01 c0       	rjmp	.+2      	; 0x2aea <Check_Precedance+0x8a>
    return false;
    2ae8:	1b 82       	std	Y+3, r1	; 0x03
    2aea:	8b 81       	ldd	r24, Y+3	; 0x03
}
    2aec:	0f 90       	pop	r0
    2aee:	0f 90       	pop	r0
    2af0:	0f 90       	pop	r0
    2af2:	cf 91       	pop	r28
    2af4:	df 91       	pop	r29
    2af6:	08 95       	ret

00002af8 <Operation>:
f32 Operation(f32 Copy_f32_Op1,f32 Copy_f32_Op2, u8 Copy_u8_Op)
{
    2af8:	ef 92       	push	r14
    2afa:	ff 92       	push	r15
    2afc:	0f 93       	push	r16
    2afe:	1f 93       	push	r17
    2b00:	df 93       	push	r29
    2b02:	cf 93       	push	r28
    2b04:	cd b7       	in	r28, 0x3d	; 61
    2b06:	de b7       	in	r29, 0x3e	; 62
    2b08:	2f 97       	sbiw	r28, 0x0f	; 15
    2b0a:	0f b6       	in	r0, 0x3f	; 63
    2b0c:	f8 94       	cli
    2b0e:	de bf       	out	0x3e, r29	; 62
    2b10:	0f be       	out	0x3f, r0	; 63
    2b12:	cd bf       	out	0x3d, r28	; 61
    2b14:	6d 83       	std	Y+5, r22	; 0x05
    2b16:	7e 83       	std	Y+6, r23	; 0x06
    2b18:	8f 83       	std	Y+7, r24	; 0x07
    2b1a:	98 87       	std	Y+8, r25	; 0x08
    2b1c:	29 87       	std	Y+9, r18	; 0x09
    2b1e:	3a 87       	std	Y+10, r19	; 0x0a
    2b20:	4b 87       	std	Y+11, r20	; 0x0b
    2b22:	5c 87       	std	Y+12, r21	; 0x0c
    2b24:	0d 87       	std	Y+13, r16	; 0x0d
    f32 Local_Res=0;
    2b26:	80 e0       	ldi	r24, 0x00	; 0
    2b28:	90 e0       	ldi	r25, 0x00	; 0
    2b2a:	a0 e0       	ldi	r26, 0x00	; 0
    2b2c:	b0 e0       	ldi	r27, 0x00	; 0
    2b2e:	89 83       	std	Y+1, r24	; 0x01
    2b30:	9a 83       	std	Y+2, r25	; 0x02
    2b32:	ab 83       	std	Y+3, r26	; 0x03
    2b34:	bc 83       	std	Y+4, r27	; 0x04
    switch(Copy_u8_Op)
    2b36:	8d 85       	ldd	r24, Y+13	; 0x0d
    2b38:	28 2f       	mov	r18, r24
    2b3a:	30 e0       	ldi	r19, 0x00	; 0
    2b3c:	3f 87       	std	Y+15, r19	; 0x0f
    2b3e:	2e 87       	std	Y+14, r18	; 0x0e
    2b40:	8e 85       	ldd	r24, Y+14	; 0x0e
    2b42:	9f 85       	ldd	r25, Y+15	; 0x0f
    2b44:	8b 32       	cpi	r24, 0x2B	; 43
    2b46:	91 05       	cpc	r25, r1
    2b48:	09 f4       	brne	.+2      	; 0x2b4c <Operation+0x54>
    2b4a:	44 c0       	rjmp	.+136    	; 0x2bd4 <Operation+0xdc>
    2b4c:	2e 85       	ldd	r18, Y+14	; 0x0e
    2b4e:	3f 85       	ldd	r19, Y+15	; 0x0f
    2b50:	2c 32       	cpi	r18, 0x2C	; 44
    2b52:	31 05       	cpc	r19, r1
    2b54:	64 f4       	brge	.+24     	; 0x2b6e <Operation+0x76>
    2b56:	8e 85       	ldd	r24, Y+14	; 0x0e
    2b58:	9f 85       	ldd	r25, Y+15	; 0x0f
    2b5a:	85 32       	cpi	r24, 0x25	; 37
    2b5c:	91 05       	cpc	r25, r1
    2b5e:	09 f4       	brne	.+2      	; 0x2b62 <Operation+0x6a>
    2b60:	76 c0       	rjmp	.+236    	; 0x2c4e <Operation+0x156>
    2b62:	2e 85       	ldd	r18, Y+14	; 0x0e
    2b64:	3f 85       	ldd	r19, Y+15	; 0x0f
    2b66:	2a 32       	cpi	r18, 0x2A	; 42
    2b68:	31 05       	cpc	r19, r1
    2b6a:	19 f1       	breq	.+70     	; 0x2bb2 <Operation+0xba>
    2b6c:	96 c0       	rjmp	.+300    	; 0x2c9a <Operation+0x1a2>
    2b6e:	8e 85       	ldd	r24, Y+14	; 0x0e
    2b70:	9f 85       	ldd	r25, Y+15	; 0x0f
    2b72:	8f 32       	cpi	r24, 0x2F	; 47
    2b74:	91 05       	cpc	r25, r1
    2b76:	61 f0       	breq	.+24     	; 0x2b90 <Operation+0x98>
    2b78:	2e 85       	ldd	r18, Y+14	; 0x0e
    2b7a:	3f 85       	ldd	r19, Y+15	; 0x0f
    2b7c:	2e 35       	cpi	r18, 0x5E	; 94
    2b7e:	31 05       	cpc	r19, r1
    2b80:	09 f4       	brne	.+2      	; 0x2b84 <Operation+0x8c>
    2b82:	4a c0       	rjmp	.+148    	; 0x2c18 <Operation+0x120>
    2b84:	8e 85       	ldd	r24, Y+14	; 0x0e
    2b86:	9f 85       	ldd	r25, Y+15	; 0x0f
    2b88:	8d 32       	cpi	r24, 0x2D	; 45
    2b8a:	91 05       	cpc	r25, r1
    2b8c:	a1 f1       	breq	.+104    	; 0x2bf6 <Operation+0xfe>
    2b8e:	85 c0       	rjmp	.+266    	; 0x2c9a <Operation+0x1a2>
    {
    case '/':
        Local_Res=Copy_f32_Op1/Copy_f32_Op2;
    2b90:	6d 81       	ldd	r22, Y+5	; 0x05
    2b92:	7e 81       	ldd	r23, Y+6	; 0x06
    2b94:	8f 81       	ldd	r24, Y+7	; 0x07
    2b96:	98 85       	ldd	r25, Y+8	; 0x08
    2b98:	29 85       	ldd	r18, Y+9	; 0x09
    2b9a:	3a 85       	ldd	r19, Y+10	; 0x0a
    2b9c:	4b 85       	ldd	r20, Y+11	; 0x0b
    2b9e:	5c 85       	ldd	r21, Y+12	; 0x0c
    2ba0:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    2ba4:	dc 01       	movw	r26, r24
    2ba6:	cb 01       	movw	r24, r22
    2ba8:	89 83       	std	Y+1, r24	; 0x01
    2baa:	9a 83       	std	Y+2, r25	; 0x02
    2bac:	ab 83       	std	Y+3, r26	; 0x03
    2bae:	bc 83       	std	Y+4, r27	; 0x04
    2bb0:	74 c0       	rjmp	.+232    	; 0x2c9a <Operation+0x1a2>
        break;
    case '*':
        Local_Res=Copy_f32_Op1*Copy_f32_Op2;
    2bb2:	6d 81       	ldd	r22, Y+5	; 0x05
    2bb4:	7e 81       	ldd	r23, Y+6	; 0x06
    2bb6:	8f 81       	ldd	r24, Y+7	; 0x07
    2bb8:	98 85       	ldd	r25, Y+8	; 0x08
    2bba:	29 85       	ldd	r18, Y+9	; 0x09
    2bbc:	3a 85       	ldd	r19, Y+10	; 0x0a
    2bbe:	4b 85       	ldd	r20, Y+11	; 0x0b
    2bc0:	5c 85       	ldd	r21, Y+12	; 0x0c
    2bc2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2bc6:	dc 01       	movw	r26, r24
    2bc8:	cb 01       	movw	r24, r22
    2bca:	89 83       	std	Y+1, r24	; 0x01
    2bcc:	9a 83       	std	Y+2, r25	; 0x02
    2bce:	ab 83       	std	Y+3, r26	; 0x03
    2bd0:	bc 83       	std	Y+4, r27	; 0x04
    2bd2:	63 c0       	rjmp	.+198    	; 0x2c9a <Operation+0x1a2>
        break;
    case '+':
        Local_Res=Copy_f32_Op1+Copy_f32_Op2;
    2bd4:	6d 81       	ldd	r22, Y+5	; 0x05
    2bd6:	7e 81       	ldd	r23, Y+6	; 0x06
    2bd8:	8f 81       	ldd	r24, Y+7	; 0x07
    2bda:	98 85       	ldd	r25, Y+8	; 0x08
    2bdc:	29 85       	ldd	r18, Y+9	; 0x09
    2bde:	3a 85       	ldd	r19, Y+10	; 0x0a
    2be0:	4b 85       	ldd	r20, Y+11	; 0x0b
    2be2:	5c 85       	ldd	r21, Y+12	; 0x0c
    2be4:	0e 94 ea 01 	call	0x3d4	; 0x3d4 <__addsf3>
    2be8:	dc 01       	movw	r26, r24
    2bea:	cb 01       	movw	r24, r22
    2bec:	89 83       	std	Y+1, r24	; 0x01
    2bee:	9a 83       	std	Y+2, r25	; 0x02
    2bf0:	ab 83       	std	Y+3, r26	; 0x03
    2bf2:	bc 83       	std	Y+4, r27	; 0x04
    2bf4:	52 c0       	rjmp	.+164    	; 0x2c9a <Operation+0x1a2>
        break;
    case '-':
        Local_Res=Copy_f32_Op1-Copy_f32_Op2;
    2bf6:	6d 81       	ldd	r22, Y+5	; 0x05
    2bf8:	7e 81       	ldd	r23, Y+6	; 0x06
    2bfa:	8f 81       	ldd	r24, Y+7	; 0x07
    2bfc:	98 85       	ldd	r25, Y+8	; 0x08
    2bfe:	29 85       	ldd	r18, Y+9	; 0x09
    2c00:	3a 85       	ldd	r19, Y+10	; 0x0a
    2c02:	4b 85       	ldd	r20, Y+11	; 0x0b
    2c04:	5c 85       	ldd	r21, Y+12	; 0x0c
    2c06:	0e 94 b9 01 	call	0x372	; 0x372 <__subsf3>
    2c0a:	dc 01       	movw	r26, r24
    2c0c:	cb 01       	movw	r24, r22
    2c0e:	89 83       	std	Y+1, r24	; 0x01
    2c10:	9a 83       	std	Y+2, r25	; 0x02
    2c12:	ab 83       	std	Y+3, r26	; 0x03
    2c14:	bc 83       	std	Y+4, r27	; 0x04
    2c16:	41 c0       	rjmp	.+130    	; 0x2c9a <Operation+0x1a2>
        break;
    case '^':
        Local_Res=Power(Copy_f32_Op2,Copy_f32_Op1);
    2c18:	69 85       	ldd	r22, Y+9	; 0x09
    2c1a:	7a 85       	ldd	r23, Y+10	; 0x0a
    2c1c:	8b 85       	ldd	r24, Y+11	; 0x0b
    2c1e:	9c 85       	ldd	r25, Y+12	; 0x0c
    2c20:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2c24:	7b 01       	movw	r14, r22
    2c26:	8c 01       	movw	r16, r24
    2c28:	6d 81       	ldd	r22, Y+5	; 0x05
    2c2a:	7e 81       	ldd	r23, Y+6	; 0x06
    2c2c:	8f 81       	ldd	r24, Y+7	; 0x07
    2c2e:	98 85       	ldd	r25, Y+8	; 0x08
    2c30:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2c34:	9b 01       	movw	r18, r22
    2c36:	ac 01       	movw	r20, r24
    2c38:	c8 01       	movw	r24, r16
    2c3a:	b7 01       	movw	r22, r14
    2c3c:	0e 94 c5 14 	call	0x298a	; 0x298a <Power>
    2c40:	dc 01       	movw	r26, r24
    2c42:	cb 01       	movw	r24, r22
    2c44:	89 83       	std	Y+1, r24	; 0x01
    2c46:	9a 83       	std	Y+2, r25	; 0x02
    2c48:	ab 83       	std	Y+3, r26	; 0x03
    2c4a:	bc 83       	std	Y+4, r27	; 0x04
    2c4c:	26 c0       	rjmp	.+76     	; 0x2c9a <Operation+0x1a2>
        break;
   case '%':
        Local_Res=Copy_f32_Op1/100.0*(u32)Copy_f32_Op2;
    2c4e:	6d 81       	ldd	r22, Y+5	; 0x05
    2c50:	7e 81       	ldd	r23, Y+6	; 0x06
    2c52:	8f 81       	ldd	r24, Y+7	; 0x07
    2c54:	98 85       	ldd	r25, Y+8	; 0x08
    2c56:	20 e0       	ldi	r18, 0x00	; 0
    2c58:	30 e0       	ldi	r19, 0x00	; 0
    2c5a:	48 ec       	ldi	r20, 0xC8	; 200
    2c5c:	52 e4       	ldi	r21, 0x42	; 66
    2c5e:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    2c62:	dc 01       	movw	r26, r24
    2c64:	cb 01       	movw	r24, r22
    2c66:	7c 01       	movw	r14, r24
    2c68:	8d 01       	movw	r16, r26
    2c6a:	69 85       	ldd	r22, Y+9	; 0x09
    2c6c:	7a 85       	ldd	r23, Y+10	; 0x0a
    2c6e:	8b 85       	ldd	r24, Y+11	; 0x0b
    2c70:	9c 85       	ldd	r25, Y+12	; 0x0c
    2c72:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2c76:	dc 01       	movw	r26, r24
    2c78:	cb 01       	movw	r24, r22
    2c7a:	bc 01       	movw	r22, r24
    2c7c:	cd 01       	movw	r24, r26
    2c7e:	0e 94 ff 04 	call	0x9fe	; 0x9fe <__floatunsisf>
    2c82:	9b 01       	movw	r18, r22
    2c84:	ac 01       	movw	r20, r24
    2c86:	c8 01       	movw	r24, r16
    2c88:	b7 01       	movw	r22, r14
    2c8a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2c8e:	dc 01       	movw	r26, r24
    2c90:	cb 01       	movw	r24, r22
    2c92:	89 83       	std	Y+1, r24	; 0x01
    2c94:	9a 83       	std	Y+2, r25	; 0x02
    2c96:	ab 83       	std	Y+3, r26	; 0x03
    2c98:	bc 83       	std	Y+4, r27	; 0x04
        break;
     }
    return Local_Res;
    2c9a:	89 81       	ldd	r24, Y+1	; 0x01
    2c9c:	9a 81       	ldd	r25, Y+2	; 0x02
    2c9e:	ab 81       	ldd	r26, Y+3	; 0x03
    2ca0:	bc 81       	ldd	r27, Y+4	; 0x04
}
    2ca2:	bc 01       	movw	r22, r24
    2ca4:	cd 01       	movw	r24, r26
    2ca6:	2f 96       	adiw	r28, 0x0f	; 15
    2ca8:	0f b6       	in	r0, 0x3f	; 63
    2caa:	f8 94       	cli
    2cac:	de bf       	out	0x3e, r29	; 62
    2cae:	0f be       	out	0x3f, r0	; 63
    2cb0:	cd bf       	out	0x3d, r28	; 61
    2cb2:	cf 91       	pop	r28
    2cb4:	df 91       	pop	r29
    2cb6:	1f 91       	pop	r17
    2cb8:	0f 91       	pop	r16
    2cba:	ff 90       	pop	r15
    2cbc:	ef 90       	pop	r14
    2cbe:	08 95       	ret

00002cc0 <IsOperand>:
u8 IsOperand(u8 Copy_u8_Op)
{
    2cc0:	df 93       	push	r29
    2cc2:	cf 93       	push	r28
    2cc4:	00 d0       	rcall	.+0      	; 0x2cc6 <IsOperand+0x6>
    2cc6:	cd b7       	in	r28, 0x3d	; 61
    2cc8:	de b7       	in	r29, 0x3e	; 62
    2cca:	89 83       	std	Y+1, r24	; 0x01
    if(Copy_u8_Op>='0'&&Copy_u8_Op<='9')\
    2ccc:	89 81       	ldd	r24, Y+1	; 0x01
    2cce:	80 33       	cpi	r24, 0x30	; 48
    2cd0:	30 f0       	brcs	.+12     	; 0x2cde <IsOperand+0x1e>
    2cd2:	89 81       	ldd	r24, Y+1	; 0x01
    2cd4:	8a 33       	cpi	r24, 0x3A	; 58
    2cd6:	18 f4       	brcc	.+6      	; 0x2cde <IsOperand+0x1e>
        return true;
    2cd8:	81 e0       	ldi	r24, 0x01	; 1
    2cda:	8a 83       	std	Y+2, r24	; 0x02
    2cdc:	01 c0       	rjmp	.+2      	; 0x2ce0 <IsOperand+0x20>
    else  if(Copy_u8_Op>='a'&&Copy_u8_Op<='z')
        return true;
    else  if(Copy_u8_Op>='A'&&Copy_u8_Op<='Z')
        return true;
   */
    return false;
    2cde:	1a 82       	std	Y+2, r1	; 0x02
    2ce0:	8a 81       	ldd	r24, Y+2	; 0x02
}
    2ce2:	0f 90       	pop	r0
    2ce4:	0f 90       	pop	r0
    2ce6:	cf 91       	pop	r28
    2ce8:	df 91       	pop	r29
    2cea:	08 95       	ret

00002cec <In_Postfix>:
u8* In_Postfix(u8* infix_exp0)
{
    2cec:	0f 93       	push	r16
    2cee:	1f 93       	push	r17
    2cf0:	df 93       	push	r29
    2cf2:	cf 93       	push	r28
    2cf4:	cd b7       	in	r28, 0x3d	; 61
    2cf6:	de b7       	in	r29, 0x3e	; 62
    2cf8:	c8 54       	subi	r28, 0x48	; 72
    2cfa:	d0 40       	sbci	r29, 0x00	; 0
    2cfc:	0f b6       	in	r0, 0x3f	; 63
    2cfe:	f8 94       	cli
    2d00:	de bf       	out	0x3e, r29	; 62
    2d02:	0f be       	out	0x3f, r0	; 63
    2d04:	cd bf       	out	0x3d, r28	; 61
    2d06:	fe 01       	movw	r30, r28
    2d08:	e9 5b       	subi	r30, 0xB9	; 185
    2d0a:	ff 4f       	sbci	r31, 0xFF	; 255
    2d0c:	91 83       	std	Z+1, r25	; 0x01
    2d0e:	80 83       	st	Z, r24
    u8 counter=0;
    2d10:	1c 82       	std	Y+4, r1	; 0x04
    u8 infix_exp[Pre_length];
    u8 i=0,j=0;
    2d12:	1b 82       	std	Y+3, r1	; 0x03
    2d14:	1a 82       	std	Y+2, r1	; 0x02
    u8 flag=false;
    2d16:	19 82       	std	Y+1, r1	; 0x01
    2d18:	cf c1       	rjmp	.+926    	; 0x30b8 <In_Postfix+0x3cc>
    for(; infix_exp0[i]!='\0'; i++,   j++)
    {
        if(infix_exp0[i]==OP_PAR)
    2d1a:	8b 81       	ldd	r24, Y+3	; 0x03
    2d1c:	28 2f       	mov	r18, r24
    2d1e:	30 e0       	ldi	r19, 0x00	; 0
    2d20:	fe 01       	movw	r30, r28
    2d22:	e9 5b       	subi	r30, 0xB9	; 185
    2d24:	ff 4f       	sbci	r31, 0xFF	; 255
    2d26:	80 81       	ld	r24, Z
    2d28:	91 81       	ldd	r25, Z+1	; 0x01
    2d2a:	fc 01       	movw	r30, r24
    2d2c:	e2 0f       	add	r30, r18
    2d2e:	f3 1f       	adc	r31, r19
    2d30:	80 81       	ld	r24, Z
    2d32:	88 32       	cpi	r24, 0x28	; 40
    2d34:	21 f4       	brne	.+8      	; 0x2d3e <In_Postfix+0x52>
            counter++;
    2d36:	8c 81       	ldd	r24, Y+4	; 0x04
    2d38:	8f 5f       	subi	r24, 0xFF	; 255
    2d3a:	8c 83       	std	Y+4, r24	; 0x04
    2d3c:	11 c0       	rjmp	.+34     	; 0x2d60 <In_Postfix+0x74>
        else if(infix_exp0[i]==CL_PAR)
    2d3e:	8b 81       	ldd	r24, Y+3	; 0x03
    2d40:	28 2f       	mov	r18, r24
    2d42:	30 e0       	ldi	r19, 0x00	; 0
    2d44:	fe 01       	movw	r30, r28
    2d46:	e9 5b       	subi	r30, 0xB9	; 185
    2d48:	ff 4f       	sbci	r31, 0xFF	; 255
    2d4a:	80 81       	ld	r24, Z
    2d4c:	91 81       	ldd	r25, Z+1	; 0x01
    2d4e:	fc 01       	movw	r30, r24
    2d50:	e2 0f       	add	r30, r18
    2d52:	f3 1f       	adc	r31, r19
    2d54:	80 81       	ld	r24, Z
    2d56:	89 32       	cpi	r24, 0x29	; 41
    2d58:	19 f4       	brne	.+6      	; 0x2d60 <In_Postfix+0x74>
            counter--;
    2d5a:	8c 81       	ldd	r24, Y+4	; 0x04
    2d5c:	81 50       	subi	r24, 0x01	; 1
    2d5e:	8c 83       	std	Y+4, r24	; 0x04
        if(i==0 &&(infix_exp0[i]=='-'||infix_exp0[i]=='+'|| infix_exp0[i]==DOT))
    2d60:	8b 81       	ldd	r24, Y+3	; 0x03
    2d62:	88 23       	and	r24, r24
    2d64:	b9 f5       	brne	.+110    	; 0x2dd4 <In_Postfix+0xe8>
    2d66:	8b 81       	ldd	r24, Y+3	; 0x03
    2d68:	28 2f       	mov	r18, r24
    2d6a:	30 e0       	ldi	r19, 0x00	; 0
    2d6c:	fe 01       	movw	r30, r28
    2d6e:	e9 5b       	subi	r30, 0xB9	; 185
    2d70:	ff 4f       	sbci	r31, 0xFF	; 255
    2d72:	80 81       	ld	r24, Z
    2d74:	91 81       	ldd	r25, Z+1	; 0x01
    2d76:	fc 01       	movw	r30, r24
    2d78:	e2 0f       	add	r30, r18
    2d7a:	f3 1f       	adc	r31, r19
    2d7c:	80 81       	ld	r24, Z
    2d7e:	8d 32       	cpi	r24, 0x2D	; 45
    2d80:	e1 f0       	breq	.+56     	; 0x2dba <In_Postfix+0xce>
    2d82:	8b 81       	ldd	r24, Y+3	; 0x03
    2d84:	28 2f       	mov	r18, r24
    2d86:	30 e0       	ldi	r19, 0x00	; 0
    2d88:	fe 01       	movw	r30, r28
    2d8a:	e9 5b       	subi	r30, 0xB9	; 185
    2d8c:	ff 4f       	sbci	r31, 0xFF	; 255
    2d8e:	80 81       	ld	r24, Z
    2d90:	91 81       	ldd	r25, Z+1	; 0x01
    2d92:	fc 01       	movw	r30, r24
    2d94:	e2 0f       	add	r30, r18
    2d96:	f3 1f       	adc	r31, r19
    2d98:	80 81       	ld	r24, Z
    2d9a:	8b 32       	cpi	r24, 0x2B	; 43
    2d9c:	71 f0       	breq	.+28     	; 0x2dba <In_Postfix+0xce>
    2d9e:	8b 81       	ldd	r24, Y+3	; 0x03
    2da0:	28 2f       	mov	r18, r24
    2da2:	30 e0       	ldi	r19, 0x00	; 0
    2da4:	fe 01       	movw	r30, r28
    2da6:	e9 5b       	subi	r30, 0xB9	; 185
    2da8:	ff 4f       	sbci	r31, 0xFF	; 255
    2daa:	80 81       	ld	r24, Z
    2dac:	91 81       	ldd	r25, Z+1	; 0x01
    2dae:	fc 01       	movw	r30, r24
    2db0:	e2 0f       	add	r30, r18
    2db2:	f3 1f       	adc	r31, r19
    2db4:	80 81       	ld	r24, Z
    2db6:	8e 32       	cpi	r24, 0x2E	; 46
    2db8:	69 f4       	brne	.+26     	; 0x2dd4 <In_Postfix+0xe8>
        {
            infix_exp[j]='0';
    2dba:	8a 81       	ldd	r24, Y+2	; 0x02
    2dbc:	28 2f       	mov	r18, r24
    2dbe:	30 e0       	ldi	r19, 0x00	; 0
    2dc0:	ce 01       	movw	r24, r28
    2dc2:	05 96       	adiw	r24, 0x05	; 5
    2dc4:	fc 01       	movw	r30, r24
    2dc6:	e2 0f       	add	r30, r18
    2dc8:	f3 1f       	adc	r31, r19
    2dca:	80 e3       	ldi	r24, 0x30	; 48
    2dcc:	80 83       	st	Z, r24
            flag=true;
    2dce:	81 e0       	ldi	r24, 0x01	; 1
    2dd0:	89 83       	std	Y+1, r24	; 0x01
    2dd2:	37 c1       	rjmp	.+622    	; 0x3042 <In_Postfix+0x356>
        }
        else if (( (infix_exp0[i]=='-')||(infix_exp0[i]=='+') ) &&(!IsOperand(infix_exp0[i-1])&&IsOperand(infix_exp0[i+1] )))
    2dd4:	8b 81       	ldd	r24, Y+3	; 0x03
    2dd6:	28 2f       	mov	r18, r24
    2dd8:	30 e0       	ldi	r19, 0x00	; 0
    2dda:	fe 01       	movw	r30, r28
    2ddc:	e9 5b       	subi	r30, 0xB9	; 185
    2dde:	ff 4f       	sbci	r31, 0xFF	; 255
    2de0:	80 81       	ld	r24, Z
    2de2:	91 81       	ldd	r25, Z+1	; 0x01
    2de4:	fc 01       	movw	r30, r24
    2de6:	e2 0f       	add	r30, r18
    2de8:	f3 1f       	adc	r31, r19
    2dea:	80 81       	ld	r24, Z
    2dec:	8d 32       	cpi	r24, 0x2D	; 45
    2dee:	71 f0       	breq	.+28     	; 0x2e0c <In_Postfix+0x120>
    2df0:	8b 81       	ldd	r24, Y+3	; 0x03
    2df2:	28 2f       	mov	r18, r24
    2df4:	30 e0       	ldi	r19, 0x00	; 0
    2df6:	fe 01       	movw	r30, r28
    2df8:	e9 5b       	subi	r30, 0xB9	; 185
    2dfa:	ff 4f       	sbci	r31, 0xFF	; 255
    2dfc:	80 81       	ld	r24, Z
    2dfe:	91 81       	ldd	r25, Z+1	; 0x01
    2e00:	fc 01       	movw	r30, r24
    2e02:	e2 0f       	add	r30, r18
    2e04:	f3 1f       	adc	r31, r19
    2e06:	80 81       	ld	r24, Z
    2e08:	8b 32       	cpi	r24, 0x2B	; 43
    2e0a:	99 f5       	brne	.+102    	; 0x2e72 <In_Postfix+0x186>
    2e0c:	8b 81       	ldd	r24, Y+3	; 0x03
    2e0e:	88 2f       	mov	r24, r24
    2e10:	90 e0       	ldi	r25, 0x00	; 0
    2e12:	9c 01       	movw	r18, r24
    2e14:	21 50       	subi	r18, 0x01	; 1
    2e16:	30 40       	sbci	r19, 0x00	; 0
    2e18:	fe 01       	movw	r30, r28
    2e1a:	e9 5b       	subi	r30, 0xB9	; 185
    2e1c:	ff 4f       	sbci	r31, 0xFF	; 255
    2e1e:	80 81       	ld	r24, Z
    2e20:	91 81       	ldd	r25, Z+1	; 0x01
    2e22:	fc 01       	movw	r30, r24
    2e24:	e2 0f       	add	r30, r18
    2e26:	f3 1f       	adc	r31, r19
    2e28:	80 81       	ld	r24, Z
    2e2a:	0e 94 60 16 	call	0x2cc0	; 0x2cc0 <IsOperand>
    2e2e:	88 23       	and	r24, r24
    2e30:	01 f5       	brne	.+64     	; 0x2e72 <In_Postfix+0x186>
    2e32:	8b 81       	ldd	r24, Y+3	; 0x03
    2e34:	88 2f       	mov	r24, r24
    2e36:	90 e0       	ldi	r25, 0x00	; 0
    2e38:	9c 01       	movw	r18, r24
    2e3a:	2f 5f       	subi	r18, 0xFF	; 255
    2e3c:	3f 4f       	sbci	r19, 0xFF	; 255
    2e3e:	fe 01       	movw	r30, r28
    2e40:	e9 5b       	subi	r30, 0xB9	; 185
    2e42:	ff 4f       	sbci	r31, 0xFF	; 255
    2e44:	80 81       	ld	r24, Z
    2e46:	91 81       	ldd	r25, Z+1	; 0x01
    2e48:	fc 01       	movw	r30, r24
    2e4a:	e2 0f       	add	r30, r18
    2e4c:	f3 1f       	adc	r31, r19
    2e4e:	80 81       	ld	r24, Z
    2e50:	0e 94 60 16 	call	0x2cc0	; 0x2cc0 <IsOperand>
    2e54:	88 23       	and	r24, r24
    2e56:	69 f0       	breq	.+26     	; 0x2e72 <In_Postfix+0x186>
        {
            infix_exp[j]='0';
    2e58:	8a 81       	ldd	r24, Y+2	; 0x02
    2e5a:	28 2f       	mov	r18, r24
    2e5c:	30 e0       	ldi	r19, 0x00	; 0
    2e5e:	ce 01       	movw	r24, r28
    2e60:	05 96       	adiw	r24, 0x05	; 5
    2e62:	fc 01       	movw	r30, r24
    2e64:	e2 0f       	add	r30, r18
    2e66:	f3 1f       	adc	r31, r19
    2e68:	80 e3       	ldi	r24, 0x30	; 48
    2e6a:	80 83       	st	Z, r24
            flag=true;
    2e6c:	81 e0       	ldi	r24, 0x01	; 1
    2e6e:	89 83       	std	Y+1, r24	; 0x01
    2e70:	e8 c0       	rjmp	.+464    	; 0x3042 <In_Postfix+0x356>
        }
        else if (( (infix_exp0[i]=='-')||(infix_exp0[i]=='+') ) &&(!IsOperand(infix_exp0[i-1])&&(IsOperand(infix_exp0[i+1]) )))
    2e72:	8b 81       	ldd	r24, Y+3	; 0x03
    2e74:	28 2f       	mov	r18, r24
    2e76:	30 e0       	ldi	r19, 0x00	; 0
    2e78:	fe 01       	movw	r30, r28
    2e7a:	e9 5b       	subi	r30, 0xB9	; 185
    2e7c:	ff 4f       	sbci	r31, 0xFF	; 255
    2e7e:	80 81       	ld	r24, Z
    2e80:	91 81       	ldd	r25, Z+1	; 0x01
    2e82:	fc 01       	movw	r30, r24
    2e84:	e2 0f       	add	r30, r18
    2e86:	f3 1f       	adc	r31, r19
    2e88:	80 81       	ld	r24, Z
    2e8a:	8d 32       	cpi	r24, 0x2D	; 45
    2e8c:	71 f0       	breq	.+28     	; 0x2eaa <In_Postfix+0x1be>
    2e8e:	8b 81       	ldd	r24, Y+3	; 0x03
    2e90:	28 2f       	mov	r18, r24
    2e92:	30 e0       	ldi	r19, 0x00	; 0
    2e94:	fe 01       	movw	r30, r28
    2e96:	e9 5b       	subi	r30, 0xB9	; 185
    2e98:	ff 4f       	sbci	r31, 0xFF	; 255
    2e9a:	80 81       	ld	r24, Z
    2e9c:	91 81       	ldd	r25, Z+1	; 0x01
    2e9e:	fc 01       	movw	r30, r24
    2ea0:	e2 0f       	add	r30, r18
    2ea2:	f3 1f       	adc	r31, r19
    2ea4:	80 81       	ld	r24, Z
    2ea6:	8b 32       	cpi	r24, 0x2B	; 43
    2ea8:	99 f5       	brne	.+102    	; 0x2f10 <In_Postfix+0x224>
    2eaa:	8b 81       	ldd	r24, Y+3	; 0x03
    2eac:	88 2f       	mov	r24, r24
    2eae:	90 e0       	ldi	r25, 0x00	; 0
    2eb0:	9c 01       	movw	r18, r24
    2eb2:	21 50       	subi	r18, 0x01	; 1
    2eb4:	30 40       	sbci	r19, 0x00	; 0
    2eb6:	fe 01       	movw	r30, r28
    2eb8:	e9 5b       	subi	r30, 0xB9	; 185
    2eba:	ff 4f       	sbci	r31, 0xFF	; 255
    2ebc:	80 81       	ld	r24, Z
    2ebe:	91 81       	ldd	r25, Z+1	; 0x01
    2ec0:	fc 01       	movw	r30, r24
    2ec2:	e2 0f       	add	r30, r18
    2ec4:	f3 1f       	adc	r31, r19
    2ec6:	80 81       	ld	r24, Z
    2ec8:	0e 94 60 16 	call	0x2cc0	; 0x2cc0 <IsOperand>
    2ecc:	88 23       	and	r24, r24
    2ece:	01 f5       	brne	.+64     	; 0x2f10 <In_Postfix+0x224>
    2ed0:	8b 81       	ldd	r24, Y+3	; 0x03
    2ed2:	88 2f       	mov	r24, r24
    2ed4:	90 e0       	ldi	r25, 0x00	; 0
    2ed6:	9c 01       	movw	r18, r24
    2ed8:	2f 5f       	subi	r18, 0xFF	; 255
    2eda:	3f 4f       	sbci	r19, 0xFF	; 255
    2edc:	fe 01       	movw	r30, r28
    2ede:	e9 5b       	subi	r30, 0xB9	; 185
    2ee0:	ff 4f       	sbci	r31, 0xFF	; 255
    2ee2:	80 81       	ld	r24, Z
    2ee4:	91 81       	ldd	r25, Z+1	; 0x01
    2ee6:	fc 01       	movw	r30, r24
    2ee8:	e2 0f       	add	r30, r18
    2eea:	f3 1f       	adc	r31, r19
    2eec:	80 81       	ld	r24, Z
    2eee:	0e 94 60 16 	call	0x2cc0	; 0x2cc0 <IsOperand>
    2ef2:	88 23       	and	r24, r24
    2ef4:	69 f0       	breq	.+26     	; 0x2f10 <In_Postfix+0x224>
        {
            infix_exp[j]='0';
    2ef6:	8a 81       	ldd	r24, Y+2	; 0x02
    2ef8:	28 2f       	mov	r18, r24
    2efa:	30 e0       	ldi	r19, 0x00	; 0
    2efc:	ce 01       	movw	r24, r28
    2efe:	05 96       	adiw	r24, 0x05	; 5
    2f00:	fc 01       	movw	r30, r24
    2f02:	e2 0f       	add	r30, r18
    2f04:	f3 1f       	adc	r31, r19
    2f06:	80 e3       	ldi	r24, 0x30	; 48
    2f08:	80 83       	st	Z, r24
            flag=true;
    2f0a:	81 e0       	ldi	r24, 0x01	; 1
    2f0c:	89 83       	std	Y+1, r24	; 0x01
    2f0e:	99 c0       	rjmp	.+306    	; 0x3042 <In_Postfix+0x356>
        }
         else if ( infix_exp0[i]==DOT  &&!IsOperand(infix_exp0[i-1])&&IsOperand(infix_exp0[i+1]))
    2f10:	8b 81       	ldd	r24, Y+3	; 0x03
    2f12:	28 2f       	mov	r18, r24
    2f14:	30 e0       	ldi	r19, 0x00	; 0
    2f16:	fe 01       	movw	r30, r28
    2f18:	e9 5b       	subi	r30, 0xB9	; 185
    2f1a:	ff 4f       	sbci	r31, 0xFF	; 255
    2f1c:	80 81       	ld	r24, Z
    2f1e:	91 81       	ldd	r25, Z+1	; 0x01
    2f20:	fc 01       	movw	r30, r24
    2f22:	e2 0f       	add	r30, r18
    2f24:	f3 1f       	adc	r31, r19
    2f26:	80 81       	ld	r24, Z
    2f28:	8e 32       	cpi	r24, 0x2E	; 46
    2f2a:	99 f5       	brne	.+102    	; 0x2f92 <In_Postfix+0x2a6>
    2f2c:	8b 81       	ldd	r24, Y+3	; 0x03
    2f2e:	88 2f       	mov	r24, r24
    2f30:	90 e0       	ldi	r25, 0x00	; 0
    2f32:	9c 01       	movw	r18, r24
    2f34:	21 50       	subi	r18, 0x01	; 1
    2f36:	30 40       	sbci	r19, 0x00	; 0
    2f38:	fe 01       	movw	r30, r28
    2f3a:	e9 5b       	subi	r30, 0xB9	; 185
    2f3c:	ff 4f       	sbci	r31, 0xFF	; 255
    2f3e:	80 81       	ld	r24, Z
    2f40:	91 81       	ldd	r25, Z+1	; 0x01
    2f42:	fc 01       	movw	r30, r24
    2f44:	e2 0f       	add	r30, r18
    2f46:	f3 1f       	adc	r31, r19
    2f48:	80 81       	ld	r24, Z
    2f4a:	0e 94 60 16 	call	0x2cc0	; 0x2cc0 <IsOperand>
    2f4e:	88 23       	and	r24, r24
    2f50:	01 f5       	brne	.+64     	; 0x2f92 <In_Postfix+0x2a6>
    2f52:	8b 81       	ldd	r24, Y+3	; 0x03
    2f54:	88 2f       	mov	r24, r24
    2f56:	90 e0       	ldi	r25, 0x00	; 0
    2f58:	9c 01       	movw	r18, r24
    2f5a:	2f 5f       	subi	r18, 0xFF	; 255
    2f5c:	3f 4f       	sbci	r19, 0xFF	; 255
    2f5e:	fe 01       	movw	r30, r28
    2f60:	e9 5b       	subi	r30, 0xB9	; 185
    2f62:	ff 4f       	sbci	r31, 0xFF	; 255
    2f64:	80 81       	ld	r24, Z
    2f66:	91 81       	ldd	r25, Z+1	; 0x01
    2f68:	fc 01       	movw	r30, r24
    2f6a:	e2 0f       	add	r30, r18
    2f6c:	f3 1f       	adc	r31, r19
    2f6e:	80 81       	ld	r24, Z
    2f70:	0e 94 60 16 	call	0x2cc0	; 0x2cc0 <IsOperand>
    2f74:	88 23       	and	r24, r24
    2f76:	69 f0       	breq	.+26     	; 0x2f92 <In_Postfix+0x2a6>
        {
            infix_exp[j]='0';
    2f78:	8a 81       	ldd	r24, Y+2	; 0x02
    2f7a:	28 2f       	mov	r18, r24
    2f7c:	30 e0       	ldi	r19, 0x00	; 0
    2f7e:	ce 01       	movw	r24, r28
    2f80:	05 96       	adiw	r24, 0x05	; 5
    2f82:	fc 01       	movw	r30, r24
    2f84:	e2 0f       	add	r30, r18
    2f86:	f3 1f       	adc	r31, r19
    2f88:	80 e3       	ldi	r24, 0x30	; 48
    2f8a:	80 83       	st	Z, r24
            flag=true;
    2f8c:	81 e0       	ldi	r24, 0x01	; 1
    2f8e:	89 83       	std	Y+1, r24	; 0x01
    2f90:	58 c0       	rjmp	.+176    	; 0x3042 <In_Postfix+0x356>
        }
        else if ( infix_exp0[i]==DOT &&IsOperand(infix_exp0[i-1])&&!IsOperand(infix_exp0[i+1]))
    2f92:	8b 81       	ldd	r24, Y+3	; 0x03
    2f94:	28 2f       	mov	r18, r24
    2f96:	30 e0       	ldi	r19, 0x00	; 0
    2f98:	fe 01       	movw	r30, r28
    2f9a:	e9 5b       	subi	r30, 0xB9	; 185
    2f9c:	ff 4f       	sbci	r31, 0xFF	; 255
    2f9e:	80 81       	ld	r24, Z
    2fa0:	91 81       	ldd	r25, Z+1	; 0x01
    2fa2:	fc 01       	movw	r30, r24
    2fa4:	e2 0f       	add	r30, r18
    2fa6:	f3 1f       	adc	r31, r19
    2fa8:	80 81       	ld	r24, Z
    2faa:	8e 32       	cpi	r24, 0x2E	; 46
    2fac:	09 f0       	breq	.+2      	; 0x2fb0 <In_Postfix+0x2c4>
    2fae:	49 c0       	rjmp	.+146    	; 0x3042 <In_Postfix+0x356>
    2fb0:	8b 81       	ldd	r24, Y+3	; 0x03
    2fb2:	88 2f       	mov	r24, r24
    2fb4:	90 e0       	ldi	r25, 0x00	; 0
    2fb6:	9c 01       	movw	r18, r24
    2fb8:	21 50       	subi	r18, 0x01	; 1
    2fba:	30 40       	sbci	r19, 0x00	; 0
    2fbc:	fe 01       	movw	r30, r28
    2fbe:	e9 5b       	subi	r30, 0xB9	; 185
    2fc0:	ff 4f       	sbci	r31, 0xFF	; 255
    2fc2:	80 81       	ld	r24, Z
    2fc4:	91 81       	ldd	r25, Z+1	; 0x01
    2fc6:	fc 01       	movw	r30, r24
    2fc8:	e2 0f       	add	r30, r18
    2fca:	f3 1f       	adc	r31, r19
    2fcc:	80 81       	ld	r24, Z
    2fce:	0e 94 60 16 	call	0x2cc0	; 0x2cc0 <IsOperand>
    2fd2:	88 23       	and	r24, r24
    2fd4:	b1 f1       	breq	.+108    	; 0x3042 <In_Postfix+0x356>
    2fd6:	8b 81       	ldd	r24, Y+3	; 0x03
    2fd8:	88 2f       	mov	r24, r24
    2fda:	90 e0       	ldi	r25, 0x00	; 0
    2fdc:	9c 01       	movw	r18, r24
    2fde:	2f 5f       	subi	r18, 0xFF	; 255
    2fe0:	3f 4f       	sbci	r19, 0xFF	; 255
    2fe2:	fe 01       	movw	r30, r28
    2fe4:	e9 5b       	subi	r30, 0xB9	; 185
    2fe6:	ff 4f       	sbci	r31, 0xFF	; 255
    2fe8:	80 81       	ld	r24, Z
    2fea:	91 81       	ldd	r25, Z+1	; 0x01
    2fec:	fc 01       	movw	r30, r24
    2fee:	e2 0f       	add	r30, r18
    2ff0:	f3 1f       	adc	r31, r19
    2ff2:	80 81       	ld	r24, Z
    2ff4:	0e 94 60 16 	call	0x2cc0	; 0x2cc0 <IsOperand>
    2ff8:	88 23       	and	r24, r24
    2ffa:	19 f5       	brne	.+70     	; 0x3042 <In_Postfix+0x356>
        {
            infix_exp[j]=infix_exp0[i];
    2ffc:	8a 81       	ldd	r24, Y+2	; 0x02
    2ffe:	48 2f       	mov	r20, r24
    3000:	50 e0       	ldi	r21, 0x00	; 0
    3002:	8b 81       	ldd	r24, Y+3	; 0x03
    3004:	28 2f       	mov	r18, r24
    3006:	30 e0       	ldi	r19, 0x00	; 0
    3008:	fe 01       	movw	r30, r28
    300a:	e9 5b       	subi	r30, 0xB9	; 185
    300c:	ff 4f       	sbci	r31, 0xFF	; 255
    300e:	80 81       	ld	r24, Z
    3010:	91 81       	ldd	r25, Z+1	; 0x01
    3012:	fc 01       	movw	r30, r24
    3014:	e2 0f       	add	r30, r18
    3016:	f3 1f       	adc	r31, r19
    3018:	20 81       	ld	r18, Z
    301a:	ce 01       	movw	r24, r28
    301c:	05 96       	adiw	r24, 0x05	; 5
    301e:	fc 01       	movw	r30, r24
    3020:	e4 0f       	add	r30, r20
    3022:	f5 1f       	adc	r31, r21
    3024:	20 83       	st	Z, r18
            infix_exp[++j]='0';
    3026:	8a 81       	ldd	r24, Y+2	; 0x02
    3028:	8f 5f       	subi	r24, 0xFF	; 255
    302a:	8a 83       	std	Y+2, r24	; 0x02
    302c:	8a 81       	ldd	r24, Y+2	; 0x02
    302e:	28 2f       	mov	r18, r24
    3030:	30 e0       	ldi	r19, 0x00	; 0
    3032:	ce 01       	movw	r24, r28
    3034:	05 96       	adiw	r24, 0x05	; 5
    3036:	fc 01       	movw	r30, r24
    3038:	e2 0f       	add	r30, r18
    303a:	f3 1f       	adc	r31, r19
    303c:	80 e3       	ldi	r24, 0x30	; 48
    303e:	80 83       	st	Z, r24
    3040:	35 c0       	rjmp	.+106    	; 0x30ac <In_Postfix+0x3c0>
            continue;
        }
        if(flag==false) //flag==false
    3042:	89 81       	ldd	r24, Y+1	; 0x01
    3044:	88 23       	and	r24, r24
    3046:	b1 f4       	brne	.+44     	; 0x3074 <In_Postfix+0x388>
            infix_exp[j]=infix_exp0[i];
    3048:	8a 81       	ldd	r24, Y+2	; 0x02
    304a:	48 2f       	mov	r20, r24
    304c:	50 e0       	ldi	r21, 0x00	; 0
    304e:	8b 81       	ldd	r24, Y+3	; 0x03
    3050:	28 2f       	mov	r18, r24
    3052:	30 e0       	ldi	r19, 0x00	; 0
    3054:	fe 01       	movw	r30, r28
    3056:	e9 5b       	subi	r30, 0xB9	; 185
    3058:	ff 4f       	sbci	r31, 0xFF	; 255
    305a:	80 81       	ld	r24, Z
    305c:	91 81       	ldd	r25, Z+1	; 0x01
    305e:	fc 01       	movw	r30, r24
    3060:	e2 0f       	add	r30, r18
    3062:	f3 1f       	adc	r31, r19
    3064:	20 81       	ld	r18, Z
    3066:	ce 01       	movw	r24, r28
    3068:	05 96       	adiw	r24, 0x05	; 5
    306a:	fc 01       	movw	r30, r24
    306c:	e4 0f       	add	r30, r20
    306e:	f5 1f       	adc	r31, r21
    3070:	20 83       	st	Z, r18
    3072:	1c c0       	rjmp	.+56     	; 0x30ac <In_Postfix+0x3c0>
        else if(flag==true)
    3074:	89 81       	ldd	r24, Y+1	; 0x01
    3076:	81 30       	cpi	r24, 0x01	; 1
    3078:	c9 f4       	brne	.+50     	; 0x30ac <In_Postfix+0x3c0>
        {
            j++;
    307a:	8a 81       	ldd	r24, Y+2	; 0x02
    307c:	8f 5f       	subi	r24, 0xFF	; 255
    307e:	8a 83       	std	Y+2, r24	; 0x02
            infix_exp[j]=infix_exp0[i];
    3080:	8a 81       	ldd	r24, Y+2	; 0x02
    3082:	48 2f       	mov	r20, r24
    3084:	50 e0       	ldi	r21, 0x00	; 0
    3086:	8b 81       	ldd	r24, Y+3	; 0x03
    3088:	28 2f       	mov	r18, r24
    308a:	30 e0       	ldi	r19, 0x00	; 0
    308c:	fe 01       	movw	r30, r28
    308e:	e9 5b       	subi	r30, 0xB9	; 185
    3090:	ff 4f       	sbci	r31, 0xFF	; 255
    3092:	80 81       	ld	r24, Z
    3094:	91 81       	ldd	r25, Z+1	; 0x01
    3096:	fc 01       	movw	r30, r24
    3098:	e2 0f       	add	r30, r18
    309a:	f3 1f       	adc	r31, r19
    309c:	20 81       	ld	r18, Z
    309e:	ce 01       	movw	r24, r28
    30a0:	05 96       	adiw	r24, 0x05	; 5
    30a2:	fc 01       	movw	r30, r24
    30a4:	e4 0f       	add	r30, r20
    30a6:	f5 1f       	adc	r31, r21
    30a8:	20 83       	st	Z, r18
            flag=false;
    30aa:	19 82       	std	Y+1, r1	; 0x01
{
    u8 counter=0;
    u8 infix_exp[Pre_length];
    u8 i=0,j=0;
    u8 flag=false;
    for(; infix_exp0[i]!='\0'; i++,   j++)
    30ac:	8b 81       	ldd	r24, Y+3	; 0x03
    30ae:	8f 5f       	subi	r24, 0xFF	; 255
    30b0:	8b 83       	std	Y+3, r24	; 0x03
    30b2:	8a 81       	ldd	r24, Y+2	; 0x02
    30b4:	8f 5f       	subi	r24, 0xFF	; 255
    30b6:	8a 83       	std	Y+2, r24	; 0x02
    30b8:	8b 81       	ldd	r24, Y+3	; 0x03
    30ba:	28 2f       	mov	r18, r24
    30bc:	30 e0       	ldi	r19, 0x00	; 0
    30be:	fe 01       	movw	r30, r28
    30c0:	e9 5b       	subi	r30, 0xB9	; 185
    30c2:	ff 4f       	sbci	r31, 0xFF	; 255
    30c4:	80 81       	ld	r24, Z
    30c6:	91 81       	ldd	r25, Z+1	; 0x01
    30c8:	fc 01       	movw	r30, r24
    30ca:	e2 0f       	add	r30, r18
    30cc:	f3 1f       	adc	r31, r19
    30ce:	80 81       	ld	r24, Z
    30d0:	88 23       	and	r24, r24
    30d2:	09 f0       	breq	.+2      	; 0x30d6 <In_Postfix+0x3ea>
    30d4:	22 ce       	rjmp	.-956    	; 0x2d1a <In_Postfix+0x2e>
    30d6:	10 c0       	rjmp	.+32     	; 0x30f8 <In_Postfix+0x40c>
        }

    }
    while(counter !=0)
    {
        infix_exp[j]=CL_PAR;
    30d8:	8a 81       	ldd	r24, Y+2	; 0x02
    30da:	28 2f       	mov	r18, r24
    30dc:	30 e0       	ldi	r19, 0x00	; 0
    30de:	ce 01       	movw	r24, r28
    30e0:	05 96       	adiw	r24, 0x05	; 5
    30e2:	fc 01       	movw	r30, r24
    30e4:	e2 0f       	add	r30, r18
    30e6:	f3 1f       	adc	r31, r19
    30e8:	89 e2       	ldi	r24, 0x29	; 41
    30ea:	80 83       	st	Z, r24
        counter--;
    30ec:	8c 81       	ldd	r24, Y+4	; 0x04
    30ee:	81 50       	subi	r24, 0x01	; 1
    30f0:	8c 83       	std	Y+4, r24	; 0x04
        j++;
    30f2:	8a 81       	ldd	r24, Y+2	; 0x02
    30f4:	8f 5f       	subi	r24, 0xFF	; 255
    30f6:	8a 83       	std	Y+2, r24	; 0x02
            infix_exp[j]=infix_exp0[i];
            flag=false;
        }

    }
    while(counter !=0)
    30f8:	8c 81       	ldd	r24, Y+4	; 0x04
    30fa:	88 23       	and	r24, r24
    30fc:	69 f7       	brne	.-38     	; 0x30d8 <In_Postfix+0x3ec>
    {
        infix_exp[j]=CL_PAR;
        counter--;
        j++;
    }
    infix_exp[j]='\0';
    30fe:	8a 81       	ldd	r24, Y+2	; 0x02
    3100:	28 2f       	mov	r18, r24
    3102:	30 e0       	ldi	r19, 0x00	; 0
    3104:	ce 01       	movw	r24, r28
    3106:	05 96       	adiw	r24, 0x05	; 5
    3108:	fc 01       	movw	r30, r24
    310a:	e2 0f       	add	r30, r18
    310c:	f3 1f       	adc	r31, r19
    310e:	10 82       	st	Z, r1
    stack_char stk;
    stackc_init(&stk);
    3110:	ce 01       	movw	r24, r28
    3112:	85 96       	adiw	r24, 0x25	; 37
    3114:	0e 94 4a 13 	call	0x2694	; 0x2694 <stackc_init>
    j=0; i=0;
    3118:	1a 82       	std	Y+2, r1	; 0x02
    311a:	1b 82       	std	Y+3, r1	; 0x03
    311c:	18 c1       	rjmp	.+560    	; 0x334e <In_Postfix+0x662>
    for(   ; infix_exp[i]!='\0'; i++)
    {
        if(i!=0)
    311e:	8b 81       	ldd	r24, Y+3	; 0x03
    3120:	88 23       	and	r24, r24
    3122:	99 f0       	breq	.+38     	; 0x314a <In_Postfix+0x45e>
            if(IsOperand(infix_exp[i-1]))
    3124:	8b 81       	ldd	r24, Y+3	; 0x03
    3126:	88 2f       	mov	r24, r24
    3128:	90 e0       	ldi	r25, 0x00	; 0
    312a:	9c 01       	movw	r18, r24
    312c:	21 50       	subi	r18, 0x01	; 1
    312e:	30 40       	sbci	r19, 0x00	; 0
    3130:	ce 01       	movw	r24, r28
    3132:	05 96       	adiw	r24, 0x05	; 5
    3134:	fc 01       	movw	r30, r24
    3136:	e2 0f       	add	r30, r18
    3138:	f3 1f       	adc	r31, r19
    313a:	80 81       	ld	r24, Z
    313c:	0e 94 60 16 	call	0x2cc0	; 0x2cc0 <IsOperand>
    3140:	88 23       	and	r24, r24
    3142:	19 f0       	breq	.+6      	; 0x314a <In_Postfix+0x45e>
                j++;
    3144:	8a 81       	ldd	r24, Y+2	; 0x02
    3146:	8f 5f       	subi	r24, 0xFF	; 255
    3148:	8a 83       	std	Y+2, r24	; 0x02
        if( IsOperand(infix_exp[i]) )
    314a:	8b 81       	ldd	r24, Y+3	; 0x03
    314c:	28 2f       	mov	r18, r24
    314e:	30 e0       	ldi	r19, 0x00	; 0
    3150:	ce 01       	movw	r24, r28
    3152:	05 96       	adiw	r24, 0x05	; 5
    3154:	fc 01       	movw	r30, r24
    3156:	e2 0f       	add	r30, r18
    3158:	f3 1f       	adc	r31, r19
    315a:	80 81       	ld	r24, Z
    315c:	0e 94 60 16 	call	0x2cc0	; 0x2cc0 <IsOperand>
    3160:	88 23       	and	r24, r24
    3162:	e1 f1       	breq	.+120    	; 0x31dc <In_Postfix+0x4f0>
        {
            post_exp[j]=infix_exp[i];
    3164:	8a 81       	ldd	r24, Y+2	; 0x02
    3166:	48 2f       	mov	r20, r24
    3168:	50 e0       	ldi	r21, 0x00	; 0
    316a:	8b 81       	ldd	r24, Y+3	; 0x03
    316c:	28 2f       	mov	r18, r24
    316e:	30 e0       	ldi	r19, 0x00	; 0
    3170:	ce 01       	movw	r24, r28
    3172:	05 96       	adiw	r24, 0x05	; 5
    3174:	fc 01       	movw	r30, r24
    3176:	e2 0f       	add	r30, r18
    3178:	f3 1f       	adc	r31, r19
    317a:	80 81       	ld	r24, Z
    317c:	fa 01       	movw	r30, r20
    317e:	e8 59       	subi	r30, 0x98	; 152
    3180:	fe 4f       	sbci	r31, 0xFE	; 254
    3182:	80 83       	st	Z, r24
            if(! IsOperand(infix_exp[i+1])&& infix_exp[i+1]!=DOT)
    3184:	8b 81       	ldd	r24, Y+3	; 0x03
    3186:	88 2f       	mov	r24, r24
    3188:	90 e0       	ldi	r25, 0x00	; 0
    318a:	9c 01       	movw	r18, r24
    318c:	2f 5f       	subi	r18, 0xFF	; 255
    318e:	3f 4f       	sbci	r19, 0xFF	; 255
    3190:	ce 01       	movw	r24, r28
    3192:	05 96       	adiw	r24, 0x05	; 5
    3194:	fc 01       	movw	r30, r24
    3196:	e2 0f       	add	r30, r18
    3198:	f3 1f       	adc	r31, r19
    319a:	80 81       	ld	r24, Z
    319c:	0e 94 60 16 	call	0x2cc0	; 0x2cc0 <IsOperand>
    31a0:	88 23       	and	r24, r24
    31a2:	09 f0       	breq	.+2      	; 0x31a6 <In_Postfix+0x4ba>
    31a4:	89 c0       	rjmp	.+274    	; 0x32b8 <In_Postfix+0x5cc>
    31a6:	8b 81       	ldd	r24, Y+3	; 0x03
    31a8:	88 2f       	mov	r24, r24
    31aa:	90 e0       	ldi	r25, 0x00	; 0
    31ac:	9c 01       	movw	r18, r24
    31ae:	2f 5f       	subi	r18, 0xFF	; 255
    31b0:	3f 4f       	sbci	r19, 0xFF	; 255
    31b2:	ce 01       	movw	r24, r28
    31b4:	05 96       	adiw	r24, 0x05	; 5
    31b6:	fc 01       	movw	r30, r24
    31b8:	e2 0f       	add	r30, r18
    31ba:	f3 1f       	adc	r31, r19
    31bc:	80 81       	ld	r24, Z
    31be:	8e 32       	cpi	r24, 0x2E	; 46
    31c0:	09 f4       	brne	.+2      	; 0x31c4 <In_Postfix+0x4d8>
    31c2:	7a c0       	rjmp	.+244    	; 0x32b8 <In_Postfix+0x5cc>
                post_exp[++j]=' ';
    31c4:	8a 81       	ldd	r24, Y+2	; 0x02
    31c6:	8f 5f       	subi	r24, 0xFF	; 255
    31c8:	8a 83       	std	Y+2, r24	; 0x02
    31ca:	8a 81       	ldd	r24, Y+2	; 0x02
    31cc:	88 2f       	mov	r24, r24
    31ce:	90 e0       	ldi	r25, 0x00	; 0
    31d0:	fc 01       	movw	r30, r24
    31d2:	e8 59       	subi	r30, 0x98	; 152
    31d4:	fe 4f       	sbci	r31, 0xFE	; 254
    31d6:	80 e2       	ldi	r24, 0x20	; 32
    31d8:	80 83       	st	Z, r24
    31da:	6e c0       	rjmp	.+220    	; 0x32b8 <In_Postfix+0x5cc>
        }
        else if(IsOperator(infix_exp[i]))
    31dc:	8b 81       	ldd	r24, Y+3	; 0x03
    31de:	28 2f       	mov	r18, r24
    31e0:	30 e0       	ldi	r19, 0x00	; 0
    31e2:	ce 01       	movw	r24, r28
    31e4:	05 96       	adiw	r24, 0x05	; 5
    31e6:	fc 01       	movw	r30, r24
    31e8:	e2 0f       	add	r30, r18
    31ea:	f3 1f       	adc	r31, r19
    31ec:	80 81       	ld	r24, Z
    31ee:	0e 94 a3 14 	call	0x2946	; 0x2946 <IsOperator>
    31f2:	88 23       	and	r24, r24
    31f4:	09 f4       	brne	.+2      	; 0x31f8 <In_Postfix+0x50c>
    31f6:	42 c0       	rjmp	.+132    	; 0x327c <In_Postfix+0x590>
        {
            while(!stackc_empty(&stk))
    31f8:	ce 01       	movw	r24, r28
    31fa:	85 96       	adiw	r24, 0x25	; 37
    31fc:	0e 94 87 13 	call	0x270e	; 0x270e <stackc_empty>
    3200:	88 23       	and	r24, r24
    3202:	69 f5       	brne	.+90     	; 0x325e <In_Postfix+0x572>
    3204:	12 c0       	rjmp	.+36     	; 0x322a <In_Postfix+0x53e>
            {
                while( stackc_top(&stk)!=OP_PAR &&Check_Precedance(stackc_top(&stk),infix_exp[i]) )
                {
                    post_exp[j]=stackc_top(&stk);
    3206:	8a 81       	ldd	r24, Y+2	; 0x02
    3208:	08 2f       	mov	r16, r24
    320a:	10 e0       	ldi	r17, 0x00	; 0
    320c:	ce 01       	movw	r24, r28
    320e:	85 96       	adiw	r24, 0x25	; 37
    3210:	0e 94 bd 13 	call	0x277a	; 0x277a <stackc_top>
    3214:	f8 01       	movw	r30, r16
    3216:	e8 59       	subi	r30, 0x98	; 152
    3218:	fe 4f       	sbci	r31, 0xFE	; 254
    321a:	80 83       	st	Z, r24
                    stackc_pop(&stk);
    321c:	ce 01       	movw	r24, r28
    321e:	85 96       	adiw	r24, 0x25	; 37
    3220:	0e 94 a2 13 	call	0x2744	; 0x2744 <stackc_pop>
                    j++;
    3224:	8a 81       	ldd	r24, Y+2	; 0x02
    3226:	8f 5f       	subi	r24, 0xFF	; 255
    3228:	8a 83       	std	Y+2, r24	; 0x02
        }
        else if(IsOperator(infix_exp[i]))
        {
            while(!stackc_empty(&stk))
            {
                while( stackc_top(&stk)!=OP_PAR &&Check_Precedance(stackc_top(&stk),infix_exp[i]) )
    322a:	ce 01       	movw	r24, r28
    322c:	85 96       	adiw	r24, 0x25	; 37
    322e:	0e 94 bd 13 	call	0x277a	; 0x277a <stackc_top>
    3232:	88 32       	cpi	r24, 0x28	; 40
    3234:	a1 f0       	breq	.+40     	; 0x325e <In_Postfix+0x572>
    3236:	ce 01       	movw	r24, r28
    3238:	85 96       	adiw	r24, 0x25	; 37
    323a:	0e 94 bd 13 	call	0x277a	; 0x277a <stackc_top>
    323e:	48 2f       	mov	r20, r24
    3240:	8b 81       	ldd	r24, Y+3	; 0x03
    3242:	28 2f       	mov	r18, r24
    3244:	30 e0       	ldi	r19, 0x00	; 0
    3246:	ce 01       	movw	r24, r28
    3248:	05 96       	adiw	r24, 0x05	; 5
    324a:	fc 01       	movw	r30, r24
    324c:	e2 0f       	add	r30, r18
    324e:	f3 1f       	adc	r31, r19
    3250:	90 81       	ld	r25, Z
    3252:	84 2f       	mov	r24, r20
    3254:	69 2f       	mov	r22, r25
    3256:	0e 94 30 15 	call	0x2a60	; 0x2a60 <Check_Precedance>
    325a:	88 23       	and	r24, r24
    325c:	a1 f6       	brne	.-88     	; 0x3206 <In_Postfix+0x51a>
                    stackc_pop(&stk);
                    j++;
                }
                break;
            }
            stackc_push(&stk,infix_exp[i]);  // if empty push operator or has higher precdance
    325e:	8b 81       	ldd	r24, Y+3	; 0x03
    3260:	28 2f       	mov	r18, r24
    3262:	30 e0       	ldi	r19, 0x00	; 0
    3264:	ce 01       	movw	r24, r28
    3266:	05 96       	adiw	r24, 0x05	; 5
    3268:	fc 01       	movw	r30, r24
    326a:	e2 0f       	add	r30, r18
    326c:	f3 1f       	adc	r31, r19
    326e:	20 81       	ld	r18, Z
    3270:	ce 01       	movw	r24, r28
    3272:	85 96       	adiw	r24, 0x25	; 37
    3274:	62 2f       	mov	r22, r18
    3276:	0e 94 5c 13 	call	0x26b8	; 0x26b8 <stackc_push>
    327a:	1e c0       	rjmp	.+60     	; 0x32b8 <In_Postfix+0x5cc>
        }else if(infix_exp[i]==DOT){
    327c:	8b 81       	ldd	r24, Y+3	; 0x03
    327e:	28 2f       	mov	r18, r24
    3280:	30 e0       	ldi	r19, 0x00	; 0
    3282:	ce 01       	movw	r24, r28
    3284:	05 96       	adiw	r24, 0x05	; 5
    3286:	fc 01       	movw	r30, r24
    3288:	e2 0f       	add	r30, r18
    328a:	f3 1f       	adc	r31, r19
    328c:	80 81       	ld	r24, Z
    328e:	8e 32       	cpi	r24, 0x2E	; 46
    3290:	99 f4       	brne	.+38     	; 0x32b8 <In_Postfix+0x5cc>
             post_exp[j++]=infix_exp[i];
    3292:	8a 81       	ldd	r24, Y+2	; 0x02
    3294:	48 2f       	mov	r20, r24
    3296:	50 e0       	ldi	r21, 0x00	; 0
    3298:	8b 81       	ldd	r24, Y+3	; 0x03
    329a:	28 2f       	mov	r18, r24
    329c:	30 e0       	ldi	r19, 0x00	; 0
    329e:	ce 01       	movw	r24, r28
    32a0:	05 96       	adiw	r24, 0x05	; 5
    32a2:	fc 01       	movw	r30, r24
    32a4:	e2 0f       	add	r30, r18
    32a6:	f3 1f       	adc	r31, r19
    32a8:	80 81       	ld	r24, Z
    32aa:	fa 01       	movw	r30, r20
    32ac:	e8 59       	subi	r30, 0x98	; 152
    32ae:	fe 4f       	sbci	r31, 0xFE	; 254
    32b0:	80 83       	st	Z, r24
    32b2:	8a 81       	ldd	r24, Y+2	; 0x02
    32b4:	8f 5f       	subi	r24, 0xFF	; 255
    32b6:	8a 83       	std	Y+2, r24	; 0x02
        }
        if(infix_exp[i]==OP_PAR)
    32b8:	8b 81       	ldd	r24, Y+3	; 0x03
    32ba:	28 2f       	mov	r18, r24
    32bc:	30 e0       	ldi	r19, 0x00	; 0
    32be:	ce 01       	movw	r24, r28
    32c0:	05 96       	adiw	r24, 0x05	; 5
    32c2:	fc 01       	movw	r30, r24
    32c4:	e2 0f       	add	r30, r18
    32c6:	f3 1f       	adc	r31, r19
    32c8:	80 81       	ld	r24, Z
    32ca:	88 32       	cpi	r24, 0x28	; 40
    32cc:	79 f4       	brne	.+30     	; 0x32ec <In_Postfix+0x600>
        {
            stackc_push(&stk,infix_exp[i]);
    32ce:	8b 81       	ldd	r24, Y+3	; 0x03
    32d0:	28 2f       	mov	r18, r24
    32d2:	30 e0       	ldi	r19, 0x00	; 0
    32d4:	ce 01       	movw	r24, r28
    32d6:	05 96       	adiw	r24, 0x05	; 5
    32d8:	fc 01       	movw	r30, r24
    32da:	e2 0f       	add	r30, r18
    32dc:	f3 1f       	adc	r31, r19
    32de:	20 81       	ld	r18, Z
    32e0:	ce 01       	movw	r24, r28
    32e2:	85 96       	adiw	r24, 0x25	; 37
    32e4:	62 2f       	mov	r22, r18
    32e6:	0e 94 5c 13 	call	0x26b8	; 0x26b8 <stackc_push>
    32ea:	2e c0       	rjmp	.+92     	; 0x3348 <In_Postfix+0x65c>
        }
        else if(infix_exp[i]==CL_PAR)
    32ec:	8b 81       	ldd	r24, Y+3	; 0x03
    32ee:	28 2f       	mov	r18, r24
    32f0:	30 e0       	ldi	r19, 0x00	; 0
    32f2:	ce 01       	movw	r24, r28
    32f4:	05 96       	adiw	r24, 0x05	; 5
    32f6:	fc 01       	movw	r30, r24
    32f8:	e2 0f       	add	r30, r18
    32fa:	f3 1f       	adc	r31, r19
    32fc:	80 81       	ld	r24, Z
    32fe:	89 32       	cpi	r24, 0x29	; 41
    3300:	19 f5       	brne	.+70     	; 0x3348 <In_Postfix+0x65c>
        {
            while(!stackc_empty(&stk))
    3302:	ce 01       	movw	r24, r28
    3304:	85 96       	adiw	r24, 0x25	; 37
    3306:	0e 94 87 13 	call	0x270e	; 0x270e <stackc_empty>
    330a:	88 23       	and	r24, r24
    330c:	c9 f4       	brne	.+50     	; 0x3340 <In_Postfix+0x654>
    330e:	12 c0       	rjmp	.+36     	; 0x3334 <In_Postfix+0x648>
            {
                while(stackc_top(&stk)!=OP_PAR )
                {
                    post_exp[j]=stackc_top(&stk);
    3310:	8a 81       	ldd	r24, Y+2	; 0x02
    3312:	08 2f       	mov	r16, r24
    3314:	10 e0       	ldi	r17, 0x00	; 0
    3316:	ce 01       	movw	r24, r28
    3318:	85 96       	adiw	r24, 0x25	; 37
    331a:	0e 94 bd 13 	call	0x277a	; 0x277a <stackc_top>
    331e:	f8 01       	movw	r30, r16
    3320:	e8 59       	subi	r30, 0x98	; 152
    3322:	fe 4f       	sbci	r31, 0xFE	; 254
    3324:	80 83       	st	Z, r24
                    stackc_pop(&stk);
    3326:	ce 01       	movw	r24, r28
    3328:	85 96       	adiw	r24, 0x25	; 37
    332a:	0e 94 a2 13 	call	0x2744	; 0x2744 <stackc_pop>
                    j++;
    332e:	8a 81       	ldd	r24, Y+2	; 0x02
    3330:	8f 5f       	subi	r24, 0xFF	; 255
    3332:	8a 83       	std	Y+2, r24	; 0x02
        }
        else if(infix_exp[i]==CL_PAR)
        {
            while(!stackc_empty(&stk))
            {
                while(stackc_top(&stk)!=OP_PAR )
    3334:	ce 01       	movw	r24, r28
    3336:	85 96       	adiw	r24, 0x25	; 37
    3338:	0e 94 bd 13 	call	0x277a	; 0x277a <stackc_top>
    333c:	88 32       	cpi	r24, 0x28	; 40
    333e:	41 f7       	brne	.-48     	; 0x3310 <In_Postfix+0x624>
                    stackc_pop(&stk);
                    j++;
                }
                break;
            }
            stackc_pop(&stk); // pop opening parentheses
    3340:	ce 01       	movw	r24, r28
    3342:	85 96       	adiw	r24, 0x25	; 37
    3344:	0e 94 a2 13 	call	0x2744	; 0x2744 <stackc_pop>
    }
    infix_exp[j]='\0';
    stack_char stk;
    stackc_init(&stk);
    j=0; i=0;
    for(   ; infix_exp[i]!='\0'; i++)
    3348:	8b 81       	ldd	r24, Y+3	; 0x03
    334a:	8f 5f       	subi	r24, 0xFF	; 255
    334c:	8b 83       	std	Y+3, r24	; 0x03
    334e:	8b 81       	ldd	r24, Y+3	; 0x03
    3350:	28 2f       	mov	r18, r24
    3352:	30 e0       	ldi	r19, 0x00	; 0
    3354:	ce 01       	movw	r24, r28
    3356:	05 96       	adiw	r24, 0x05	; 5
    3358:	fc 01       	movw	r30, r24
    335a:	e2 0f       	add	r30, r18
    335c:	f3 1f       	adc	r31, r19
    335e:	80 81       	ld	r24, Z
    3360:	88 23       	and	r24, r24
    3362:	09 f0       	breq	.+2      	; 0x3366 <In_Postfix+0x67a>
    3364:	dc ce       	rjmp	.-584    	; 0x311e <In_Postfix+0x432>
    3366:	12 c0       	rjmp	.+36     	; 0x338c <In_Postfix+0x6a0>
            stackc_pop(&stk); // pop opening parentheses

        }
    }
    while(!stackc_empty(&stk))
    {   j++;
    3368:	8a 81       	ldd	r24, Y+2	; 0x02
    336a:	8f 5f       	subi	r24, 0xFF	; 255
    336c:	8a 83       	std	Y+2, r24	; 0x02
        post_exp[j]=stackc_top(&stk);
    336e:	8a 81       	ldd	r24, Y+2	; 0x02
    3370:	08 2f       	mov	r16, r24
    3372:	10 e0       	ldi	r17, 0x00	; 0
    3374:	ce 01       	movw	r24, r28
    3376:	85 96       	adiw	r24, 0x25	; 37
    3378:	0e 94 bd 13 	call	0x277a	; 0x277a <stackc_top>
    337c:	f8 01       	movw	r30, r16
    337e:	e8 59       	subi	r30, 0x98	; 152
    3380:	fe 4f       	sbci	r31, 0xFE	; 254
    3382:	80 83       	st	Z, r24
        stackc_pop(&stk);
    3384:	ce 01       	movw	r24, r28
    3386:	85 96       	adiw	r24, 0x25	; 37
    3388:	0e 94 a2 13 	call	0x2744	; 0x2744 <stackc_pop>
            }
            stackc_pop(&stk); // pop opening parentheses

        }
    }
    while(!stackc_empty(&stk))
    338c:	ce 01       	movw	r24, r28
    338e:	85 96       	adiw	r24, 0x25	; 37
    3390:	0e 94 87 13 	call	0x270e	; 0x270e <stackc_empty>
    3394:	88 23       	and	r24, r24
    3396:	41 f3       	breq	.-48     	; 0x3368 <In_Postfix+0x67c>
    {   j++;
        post_exp[j]=stackc_top(&stk);
        stackc_pop(&stk);

    }
    return post_exp;
    3398:	88 e6       	ldi	r24, 0x68	; 104
    339a:	91 e0       	ldi	r25, 0x01	; 1
}
    339c:	c8 5b       	subi	r28, 0xB8	; 184
    339e:	df 4f       	sbci	r29, 0xFF	; 255
    33a0:	0f b6       	in	r0, 0x3f	; 63
    33a2:	f8 94       	cli
    33a4:	de bf       	out	0x3e, r29	; 62
    33a6:	0f be       	out	0x3f, r0	; 63
    33a8:	cd bf       	out	0x3d, r28	; 61
    33aa:	cf 91       	pop	r28
    33ac:	df 91       	pop	r29
    33ae:	1f 91       	pop	r17
    33b0:	0f 91       	pop	r16
    33b2:	08 95       	ret

000033b4 <Evaluate>:
f32 Evaluate(u8* post_exp){
    33b4:	0f 93       	push	r16
    33b6:	df 93       	push	r29
    33b8:	cf 93       	push	r28
    33ba:	cd b7       	in	r28, 0x3d	; 61
    33bc:	de b7       	in	r29, 0x3e	; 62
    33be:	ce 59       	subi	r28, 0x9E	; 158
    33c0:	d0 40       	sbci	r29, 0x00	; 0
    33c2:	0f b6       	in	r0, 0x3f	; 63
    33c4:	f8 94       	cli
    33c6:	de bf       	out	0x3e, r29	; 62
    33c8:	0f be       	out	0x3f, r0	; 63
    33ca:	cd bf       	out	0x3d, r28	; 61
    33cc:	fe 01       	movw	r30, r28
    33ce:	e3 56       	subi	r30, 0x63	; 99
    33d0:	ff 4f       	sbci	r31, 0xFF	; 255
    33d2:	91 83       	std	Z+1, r25	; 0x01
    33d4:	80 83       	st	Z, r24
    stack_float eval;stackf_init(&eval);
    33d6:	ce 01       	movw	r24, r28
    33d8:	4b 96       	adiw	r24, 0x1b	; 27
    33da:	0e 94 e1 13 	call	0x27c2	; 0x27c2 <stackf_init>
    f32 base=0.1f; f32 val1=0 ; f32 val2=0.0f ;u8 flag1=false,flag2=false;
    33de:	8d ec       	ldi	r24, 0xCD	; 205
    33e0:	9c ec       	ldi	r25, 0xCC	; 204
    33e2:	ac ec       	ldi	r26, 0xCC	; 204
    33e4:	bd e3       	ldi	r27, 0x3D	; 61
    33e6:	8f 8b       	std	Y+23, r24	; 0x17
    33e8:	98 8f       	std	Y+24, r25	; 0x18
    33ea:	a9 8f       	std	Y+25, r26	; 0x19
    33ec:	ba 8f       	std	Y+26, r27	; 0x1a
    33ee:	80 e0       	ldi	r24, 0x00	; 0
    33f0:	90 e0       	ldi	r25, 0x00	; 0
    33f2:	a0 e0       	ldi	r26, 0x00	; 0
    33f4:	b0 e0       	ldi	r27, 0x00	; 0
    33f6:	8b 8b       	std	Y+19, r24	; 0x13
    33f8:	9c 8b       	std	Y+20, r25	; 0x14
    33fa:	ad 8b       	std	Y+21, r26	; 0x15
    33fc:	be 8b       	std	Y+22, r27	; 0x16
    33fe:	80 e0       	ldi	r24, 0x00	; 0
    3400:	90 e0       	ldi	r25, 0x00	; 0
    3402:	a0 e0       	ldi	r26, 0x00	; 0
    3404:	b0 e0       	ldi	r27, 0x00	; 0
    3406:	8f 87       	std	Y+15, r24	; 0x0f
    3408:	98 8b       	std	Y+16, r25	; 0x10
    340a:	a9 8b       	std	Y+17, r26	; 0x11
    340c:	ba 8b       	std	Y+18, r27	; 0x12
    340e:	1e 86       	std	Y+14, r1	; 0x0e
    3410:	1d 86       	std	Y+13, r1	; 0x0d
for(u32 i=0;post_exp[i]!='\0';i++){
    3412:	19 86       	std	Y+9, r1	; 0x09
    3414:	1a 86       	std	Y+10, r1	; 0x0a
    3416:	1b 86       	std	Y+11, r1	; 0x0b
    3418:	1c 86       	std	Y+12, r1	; 0x0c
    341a:	83 c1       	rjmp	.+774    	; 0x3722 <Evaluate+0x36e>
while(IsOperand(post_exp[i])){
    val1*=10.0;
    341c:	6b 89       	ldd	r22, Y+19	; 0x13
    341e:	7c 89       	ldd	r23, Y+20	; 0x14
    3420:	8d 89       	ldd	r24, Y+21	; 0x15
    3422:	9e 89       	ldd	r25, Y+22	; 0x16
    3424:	20 e0       	ldi	r18, 0x00	; 0
    3426:	30 e0       	ldi	r19, 0x00	; 0
    3428:	40 e2       	ldi	r20, 0x20	; 32
    342a:	51 e4       	ldi	r21, 0x41	; 65
    342c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3430:	dc 01       	movw	r26, r24
    3432:	cb 01       	movw	r24, r22
    3434:	8b 8b       	std	Y+19, r24	; 0x13
    3436:	9c 8b       	std	Y+20, r25	; 0x14
    3438:	ad 8b       	std	Y+21, r26	; 0x15
    343a:	be 8b       	std	Y+22, r27	; 0x16
     val1+=(post_exp[i]-'0');
    343c:	29 85       	ldd	r18, Y+9	; 0x09
    343e:	3a 85       	ldd	r19, Y+10	; 0x0a
    3440:	fe 01       	movw	r30, r28
    3442:	e3 56       	subi	r30, 0x63	; 99
    3444:	ff 4f       	sbci	r31, 0xFF	; 255
    3446:	80 81       	ld	r24, Z
    3448:	91 81       	ldd	r25, Z+1	; 0x01
    344a:	fc 01       	movw	r30, r24
    344c:	e2 0f       	add	r30, r18
    344e:	f3 1f       	adc	r31, r19
    3450:	80 81       	ld	r24, Z
    3452:	88 2f       	mov	r24, r24
    3454:	90 e0       	ldi	r25, 0x00	; 0
    3456:	c0 97       	sbiw	r24, 0x30	; 48
    3458:	aa 27       	eor	r26, r26
    345a:	97 fd       	sbrc	r25, 7
    345c:	a0 95       	com	r26
    345e:	ba 2f       	mov	r27, r26
    3460:	bc 01       	movw	r22, r24
    3462:	cd 01       	movw	r24, r26
    3464:	0e 94 4d 04 	call	0x89a	; 0x89a <__floatsisf>
    3468:	9b 01       	movw	r18, r22
    346a:	ac 01       	movw	r20, r24
    346c:	6b 89       	ldd	r22, Y+19	; 0x13
    346e:	7c 89       	ldd	r23, Y+20	; 0x14
    3470:	8d 89       	ldd	r24, Y+21	; 0x15
    3472:	9e 89       	ldd	r25, Y+22	; 0x16
    3474:	0e 94 ea 01 	call	0x3d4	; 0x3d4 <__addsf3>
    3478:	dc 01       	movw	r26, r24
    347a:	cb 01       	movw	r24, r22
    347c:	8b 8b       	std	Y+19, r24	; 0x13
    347e:	9c 8b       	std	Y+20, r25	; 0x14
    3480:	ad 8b       	std	Y+21, r26	; 0x15
    3482:	be 8b       	std	Y+22, r27	; 0x16
     i++; flag1=true;
    3484:	89 85       	ldd	r24, Y+9	; 0x09
    3486:	9a 85       	ldd	r25, Y+10	; 0x0a
    3488:	ab 85       	ldd	r26, Y+11	; 0x0b
    348a:	bc 85       	ldd	r27, Y+12	; 0x0c
    348c:	01 96       	adiw	r24, 0x01	; 1
    348e:	a1 1d       	adc	r26, r1
    3490:	b1 1d       	adc	r27, r1
    3492:	89 87       	std	Y+9, r24	; 0x09
    3494:	9a 87       	std	Y+10, r25	; 0x0a
    3496:	ab 87       	std	Y+11, r26	; 0x0b
    3498:	bc 87       	std	Y+12, r27	; 0x0c
    349a:	81 e0       	ldi	r24, 0x01	; 1
    349c:	8e 87       	std	Y+14, r24	; 0x0e
}
f32 Evaluate(u8* post_exp){
    stack_float eval;stackf_init(&eval);
    f32 base=0.1f; f32 val1=0 ; f32 val2=0.0f ;u8 flag1=false,flag2=false;
for(u32 i=0;post_exp[i]!='\0';i++){
while(IsOperand(post_exp[i])){
    349e:	29 85       	ldd	r18, Y+9	; 0x09
    34a0:	3a 85       	ldd	r19, Y+10	; 0x0a
    34a2:	fe 01       	movw	r30, r28
    34a4:	e3 56       	subi	r30, 0x63	; 99
    34a6:	ff 4f       	sbci	r31, 0xFF	; 255
    34a8:	80 81       	ld	r24, Z
    34aa:	91 81       	ldd	r25, Z+1	; 0x01
    34ac:	fc 01       	movw	r30, r24
    34ae:	e2 0f       	add	r30, r18
    34b0:	f3 1f       	adc	r31, r19
    34b2:	80 81       	ld	r24, Z
    34b4:	0e 94 60 16 	call	0x2cc0	; 0x2cc0 <IsOperand>
    34b8:	88 23       	and	r24, r24
    34ba:	09 f0       	breq	.+2      	; 0x34be <Evaluate+0x10a>
    34bc:	af cf       	rjmp	.-162    	; 0x341c <Evaluate+0x68>
    val1*=10.0;
     val1+=(post_exp[i]-'0');
     i++; flag1=true;
}
if(post_exp[i]==DOT){
    34be:	29 85       	ldd	r18, Y+9	; 0x09
    34c0:	3a 85       	ldd	r19, Y+10	; 0x0a
    34c2:	fe 01       	movw	r30, r28
    34c4:	e3 56       	subi	r30, 0x63	; 99
    34c6:	ff 4f       	sbci	r31, 0xFF	; 255
    34c8:	80 81       	ld	r24, Z
    34ca:	91 81       	ldd	r25, Z+1	; 0x01
    34cc:	fc 01       	movw	r30, r24
    34ce:	e2 0f       	add	r30, r18
    34d0:	f3 1f       	adc	r31, r19
    34d2:	80 81       	ld	r24, Z
    34d4:	8e 32       	cpi	r24, 0x2E	; 46
    34d6:	09 f0       	breq	.+2      	; 0x34da <Evaluate+0x126>
    34d8:	69 c0       	rjmp	.+210    	; 0x35ac <Evaluate+0x1f8>
    i++;
    34da:	89 85       	ldd	r24, Y+9	; 0x09
    34dc:	9a 85       	ldd	r25, Y+10	; 0x0a
    34de:	ab 85       	ldd	r26, Y+11	; 0x0b
    34e0:	bc 85       	ldd	r27, Y+12	; 0x0c
    34e2:	01 96       	adiw	r24, 0x01	; 1
    34e4:	a1 1d       	adc	r26, r1
    34e6:	b1 1d       	adc	r27, r1
    34e8:	89 87       	std	Y+9, r24	; 0x09
    34ea:	9a 87       	std	Y+10, r25	; 0x0a
    34ec:	ab 87       	std	Y+11, r26	; 0x0b
    34ee:	bc 87       	std	Y+12, r27	; 0x0c
    34f0:	4d c0       	rjmp	.+154    	; 0x358c <Evaluate+0x1d8>
while(IsOperand(post_exp[i])){
     val2+=((f32)(post_exp[i]-'0'))*base;
    34f2:	29 85       	ldd	r18, Y+9	; 0x09
    34f4:	3a 85       	ldd	r19, Y+10	; 0x0a
    34f6:	fe 01       	movw	r30, r28
    34f8:	e3 56       	subi	r30, 0x63	; 99
    34fa:	ff 4f       	sbci	r31, 0xFF	; 255
    34fc:	80 81       	ld	r24, Z
    34fe:	91 81       	ldd	r25, Z+1	; 0x01
    3500:	fc 01       	movw	r30, r24
    3502:	e2 0f       	add	r30, r18
    3504:	f3 1f       	adc	r31, r19
    3506:	80 81       	ld	r24, Z
    3508:	88 2f       	mov	r24, r24
    350a:	90 e0       	ldi	r25, 0x00	; 0
    350c:	c0 97       	sbiw	r24, 0x30	; 48
    350e:	aa 27       	eor	r26, r26
    3510:	97 fd       	sbrc	r25, 7
    3512:	a0 95       	com	r26
    3514:	ba 2f       	mov	r27, r26
    3516:	bc 01       	movw	r22, r24
    3518:	cd 01       	movw	r24, r26
    351a:	0e 94 4d 04 	call	0x89a	; 0x89a <__floatsisf>
    351e:	dc 01       	movw	r26, r24
    3520:	cb 01       	movw	r24, r22
    3522:	bc 01       	movw	r22, r24
    3524:	cd 01       	movw	r24, r26
    3526:	2f 89       	ldd	r18, Y+23	; 0x17
    3528:	38 8d       	ldd	r19, Y+24	; 0x18
    352a:	49 8d       	ldd	r20, Y+25	; 0x19
    352c:	5a 8d       	ldd	r21, Y+26	; 0x1a
    352e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3532:	dc 01       	movw	r26, r24
    3534:	cb 01       	movw	r24, r22
    3536:	9c 01       	movw	r18, r24
    3538:	ad 01       	movw	r20, r26
    353a:	6f 85       	ldd	r22, Y+15	; 0x0f
    353c:	78 89       	ldd	r23, Y+16	; 0x10
    353e:	89 89       	ldd	r24, Y+17	; 0x11
    3540:	9a 89       	ldd	r25, Y+18	; 0x12
    3542:	0e 94 ea 01 	call	0x3d4	; 0x3d4 <__addsf3>
    3546:	dc 01       	movw	r26, r24
    3548:	cb 01       	movw	r24, r22
    354a:	8f 87       	std	Y+15, r24	; 0x0f
    354c:	98 8b       	std	Y+16, r25	; 0x10
    354e:	a9 8b       	std	Y+17, r26	; 0x11
    3550:	ba 8b       	std	Y+18, r27	; 0x12
     base/=10.0;
    3552:	6f 89       	ldd	r22, Y+23	; 0x17
    3554:	78 8d       	ldd	r23, Y+24	; 0x18
    3556:	89 8d       	ldd	r24, Y+25	; 0x19
    3558:	9a 8d       	ldd	r25, Y+26	; 0x1a
    355a:	20 e0       	ldi	r18, 0x00	; 0
    355c:	30 e0       	ldi	r19, 0x00	; 0
    355e:	40 e2       	ldi	r20, 0x20	; 32
    3560:	51 e4       	ldi	r21, 0x41	; 65
    3562:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    3566:	dc 01       	movw	r26, r24
    3568:	cb 01       	movw	r24, r22
    356a:	8f 8b       	std	Y+23, r24	; 0x17
    356c:	98 8f       	std	Y+24, r25	; 0x18
    356e:	a9 8f       	std	Y+25, r26	; 0x19
    3570:	ba 8f       	std	Y+26, r27	; 0x1a
     i++; flag2=true;
    3572:	89 85       	ldd	r24, Y+9	; 0x09
    3574:	9a 85       	ldd	r25, Y+10	; 0x0a
    3576:	ab 85       	ldd	r26, Y+11	; 0x0b
    3578:	bc 85       	ldd	r27, Y+12	; 0x0c
    357a:	01 96       	adiw	r24, 0x01	; 1
    357c:	a1 1d       	adc	r26, r1
    357e:	b1 1d       	adc	r27, r1
    3580:	89 87       	std	Y+9, r24	; 0x09
    3582:	9a 87       	std	Y+10, r25	; 0x0a
    3584:	ab 87       	std	Y+11, r26	; 0x0b
    3586:	bc 87       	std	Y+12, r27	; 0x0c
    3588:	81 e0       	ldi	r24, 0x01	; 1
    358a:	8d 87       	std	Y+13, r24	; 0x0d
     val1+=(post_exp[i]-'0');
     i++; flag1=true;
}
if(post_exp[i]==DOT){
    i++;
while(IsOperand(post_exp[i])){
    358c:	29 85       	ldd	r18, Y+9	; 0x09
    358e:	3a 85       	ldd	r19, Y+10	; 0x0a
    3590:	fe 01       	movw	r30, r28
    3592:	e3 56       	subi	r30, 0x63	; 99
    3594:	ff 4f       	sbci	r31, 0xFF	; 255
    3596:	80 81       	ld	r24, Z
    3598:	91 81       	ldd	r25, Z+1	; 0x01
    359a:	fc 01       	movw	r30, r24
    359c:	e2 0f       	add	r30, r18
    359e:	f3 1f       	adc	r31, r19
    35a0:	80 81       	ld	r24, Z
    35a2:	0e 94 60 16 	call	0x2cc0	; 0x2cc0 <IsOperand>
    35a6:	88 23       	and	r24, r24
    35a8:	09 f0       	breq	.+2      	; 0x35ac <Evaluate+0x1f8>
    35aa:	a3 cf       	rjmp	.-186    	; 0x34f2 <Evaluate+0x13e>
     val2+=((f32)(post_exp[i]-'0'))*base;
     base/=10.0;
     i++; flag2=true;
}
}
 if(post_exp[i]==' '){
    35ac:	29 85       	ldd	r18, Y+9	; 0x09
    35ae:	3a 85       	ldd	r19, Y+10	; 0x0a
    35b0:	fe 01       	movw	r30, r28
    35b2:	e3 56       	subi	r30, 0x63	; 99
    35b4:	ff 4f       	sbci	r31, 0xFF	; 255
    35b6:	80 81       	ld	r24, Z
    35b8:	91 81       	ldd	r25, Z+1	; 0x01
    35ba:	fc 01       	movw	r30, r24
    35bc:	e2 0f       	add	r30, r18
    35be:	f3 1f       	adc	r31, r19
    35c0:	80 81       	ld	r24, Z
    35c2:	80 32       	cpi	r24, 0x20	; 32
    35c4:	09 f0       	breq	.+2      	; 0x35c8 <Evaluate+0x214>
    35c6:	57 c0       	rjmp	.+174    	; 0x3676 <Evaluate+0x2c2>
     if(flag1==true&&flag2==true)
    35c8:	8e 85       	ldd	r24, Y+14	; 0x0e
    35ca:	81 30       	cpi	r24, 0x01	; 1
    35cc:	c1 f4       	brne	.+48     	; 0x35fe <Evaluate+0x24a>
    35ce:	8d 85       	ldd	r24, Y+13	; 0x0d
    35d0:	81 30       	cpi	r24, 0x01	; 1
    35d2:	a9 f4       	brne	.+42     	; 0x35fe <Evaluate+0x24a>
    stackf_push(&eval,val1+val2);
    35d4:	6b 89       	ldd	r22, Y+19	; 0x13
    35d6:	7c 89       	ldd	r23, Y+20	; 0x14
    35d8:	8d 89       	ldd	r24, Y+21	; 0x15
    35da:	9e 89       	ldd	r25, Y+22	; 0x16
    35dc:	2f 85       	ldd	r18, Y+15	; 0x0f
    35de:	38 89       	ldd	r19, Y+16	; 0x10
    35e0:	49 89       	ldd	r20, Y+17	; 0x11
    35e2:	5a 89       	ldd	r21, Y+18	; 0x12
    35e4:	0e 94 ea 01 	call	0x3d4	; 0x3d4 <__addsf3>
    35e8:	dc 01       	movw	r26, r24
    35ea:	cb 01       	movw	r24, r22
    35ec:	9c 01       	movw	r18, r24
    35ee:	ad 01       	movw	r20, r26
    35f0:	ce 01       	movw	r24, r28
    35f2:	4b 96       	adiw	r24, 0x1b	; 27
    35f4:	ba 01       	movw	r22, r20
    35f6:	a9 01       	movw	r20, r18
    35f8:	0e 94 f3 13 	call	0x27e6	; 0x27e6 <stackf_push>
    35fc:	21 c0       	rjmp	.+66     	; 0x3640 <Evaluate+0x28c>
    else if (flag1==true&&flag2==false)
    35fe:	8e 85       	ldd	r24, Y+14	; 0x0e
    3600:	81 30       	cpi	r24, 0x01	; 1
    3602:	71 f4       	brne	.+28     	; 0x3620 <Evaluate+0x26c>
    3604:	8d 85       	ldd	r24, Y+13	; 0x0d
    3606:	88 23       	and	r24, r24
    3608:	59 f4       	brne	.+22     	; 0x3620 <Evaluate+0x26c>
         stackf_push(&eval,val1);
    360a:	ce 01       	movw	r24, r28
    360c:	4b 96       	adiw	r24, 0x1b	; 27
    360e:	2b 89       	ldd	r18, Y+19	; 0x13
    3610:	3c 89       	ldd	r19, Y+20	; 0x14
    3612:	4d 89       	ldd	r20, Y+21	; 0x15
    3614:	5e 89       	ldd	r21, Y+22	; 0x16
    3616:	ba 01       	movw	r22, r20
    3618:	a9 01       	movw	r20, r18
    361a:	0e 94 f3 13 	call	0x27e6	; 0x27e6 <stackf_push>
    361e:	10 c0       	rjmp	.+32     	; 0x3640 <Evaluate+0x28c>
    else if(flag2==true&&flag1==false)
    3620:	8d 85       	ldd	r24, Y+13	; 0x0d
    3622:	81 30       	cpi	r24, 0x01	; 1
    3624:	69 f4       	brne	.+26     	; 0x3640 <Evaluate+0x28c>
    3626:	8e 85       	ldd	r24, Y+14	; 0x0e
    3628:	88 23       	and	r24, r24
    362a:	51 f4       	brne	.+20     	; 0x3640 <Evaluate+0x28c>
        stackf_push(&eval,val2);
    362c:	ce 01       	movw	r24, r28
    362e:	4b 96       	adiw	r24, 0x1b	; 27
    3630:	2f 85       	ldd	r18, Y+15	; 0x0f
    3632:	38 89       	ldd	r19, Y+16	; 0x10
    3634:	49 89       	ldd	r20, Y+17	; 0x11
    3636:	5a 89       	ldd	r21, Y+18	; 0x12
    3638:	ba 01       	movw	r22, r20
    363a:	a9 01       	movw	r20, r18
    363c:	0e 94 f3 13 	call	0x27e6	; 0x27e6 <stackf_push>
 val1=val2=0.0f; flag1=flag2=false;base=0.1f;
    3640:	80 e0       	ldi	r24, 0x00	; 0
    3642:	90 e0       	ldi	r25, 0x00	; 0
    3644:	a0 e0       	ldi	r26, 0x00	; 0
    3646:	b0 e0       	ldi	r27, 0x00	; 0
    3648:	8f 87       	std	Y+15, r24	; 0x0f
    364a:	98 8b       	std	Y+16, r25	; 0x10
    364c:	a9 8b       	std	Y+17, r26	; 0x11
    364e:	ba 8b       	std	Y+18, r27	; 0x12
    3650:	8f 85       	ldd	r24, Y+15	; 0x0f
    3652:	98 89       	ldd	r25, Y+16	; 0x10
    3654:	a9 89       	ldd	r26, Y+17	; 0x11
    3656:	ba 89       	ldd	r27, Y+18	; 0x12
    3658:	8b 8b       	std	Y+19, r24	; 0x13
    365a:	9c 8b       	std	Y+20, r25	; 0x14
    365c:	ad 8b       	std	Y+21, r26	; 0x15
    365e:	be 8b       	std	Y+22, r27	; 0x16
    3660:	1d 86       	std	Y+13, r1	; 0x0d
    3662:	8d 85       	ldd	r24, Y+13	; 0x0d
    3664:	8e 87       	std	Y+14, r24	; 0x0e
    3666:	8d ec       	ldi	r24, 0xCD	; 205
    3668:	9c ec       	ldi	r25, 0xCC	; 204
    366a:	ac ec       	ldi	r26, 0xCC	; 204
    366c:	bd e3       	ldi	r27, 0x3D	; 61
    366e:	8f 8b       	std	Y+23, r24	; 0x17
    3670:	98 8f       	std	Y+24, r25	; 0x18
    3672:	a9 8f       	std	Y+25, r26	; 0x19
    3674:	ba 8f       	std	Y+26, r27	; 0x1a
} if(IsOperator ( post_exp[i]) ){
    3676:	29 85       	ldd	r18, Y+9	; 0x09
    3678:	3a 85       	ldd	r19, Y+10	; 0x0a
    367a:	fe 01       	movw	r30, r28
    367c:	e3 56       	subi	r30, 0x63	; 99
    367e:	ff 4f       	sbci	r31, 0xFF	; 255
    3680:	80 81       	ld	r24, Z
    3682:	91 81       	ldd	r25, Z+1	; 0x01
    3684:	fc 01       	movw	r30, r24
    3686:	e2 0f       	add	r30, r18
    3688:	f3 1f       	adc	r31, r19
    368a:	80 81       	ld	r24, Z
    368c:	0e 94 a3 14 	call	0x2946	; 0x2946 <IsOperator>
    3690:	88 23       	and	r24, r24
    3692:	e1 f1       	breq	.+120    	; 0x370c <Evaluate+0x358>
 f32 op2= stackf_top(&eval);
    3694:	ce 01       	movw	r24, r28
    3696:	4b 96       	adiw	r24, 0x1b	; 27
    3698:	0e 94 65 14 	call	0x28ca	; 0x28ca <stackf_top>
    369c:	dc 01       	movw	r26, r24
    369e:	cb 01       	movw	r24, r22
    36a0:	8d 83       	std	Y+5, r24	; 0x05
    36a2:	9e 83       	std	Y+6, r25	; 0x06
    36a4:	af 83       	std	Y+7, r26	; 0x07
    36a6:	b8 87       	std	Y+8, r27	; 0x08
stackf_pop(&eval);
    36a8:	ce 01       	movw	r24, r28
    36aa:	4b 96       	adiw	r24, 0x1b	; 27
    36ac:	0e 94 4a 14 	call	0x2894	; 0x2894 <stackf_pop>
 f32 op1=stackf_top(&eval);
    36b0:	ce 01       	movw	r24, r28
    36b2:	4b 96       	adiw	r24, 0x1b	; 27
    36b4:	0e 94 65 14 	call	0x28ca	; 0x28ca <stackf_top>
    36b8:	dc 01       	movw	r26, r24
    36ba:	cb 01       	movw	r24, r22
    36bc:	89 83       	std	Y+1, r24	; 0x01
    36be:	9a 83       	std	Y+2, r25	; 0x02
    36c0:	ab 83       	std	Y+3, r26	; 0x03
    36c2:	bc 83       	std	Y+4, r27	; 0x04
stackf_pop(&eval);
    36c4:	ce 01       	movw	r24, r28
    36c6:	4b 96       	adiw	r24, 0x1b	; 27
    36c8:	0e 94 4a 14 	call	0x2894	; 0x2894 <stackf_pop>
 stackf_push(&eval,Operation(op1,op2,post_exp[i]));
    36cc:	29 85       	ldd	r18, Y+9	; 0x09
    36ce:	3a 85       	ldd	r19, Y+10	; 0x0a
    36d0:	fe 01       	movw	r30, r28
    36d2:	e3 56       	subi	r30, 0x63	; 99
    36d4:	ff 4f       	sbci	r31, 0xFF	; 255
    36d6:	80 81       	ld	r24, Z
    36d8:	91 81       	ldd	r25, Z+1	; 0x01
    36da:	fc 01       	movw	r30, r24
    36dc:	e2 0f       	add	r30, r18
    36de:	f3 1f       	adc	r31, r19
    36e0:	e0 81       	ld	r30, Z
    36e2:	89 81       	ldd	r24, Y+1	; 0x01
    36e4:	9a 81       	ldd	r25, Y+2	; 0x02
    36e6:	ab 81       	ldd	r26, Y+3	; 0x03
    36e8:	bc 81       	ldd	r27, Y+4	; 0x04
    36ea:	2d 81       	ldd	r18, Y+5	; 0x05
    36ec:	3e 81       	ldd	r19, Y+6	; 0x06
    36ee:	4f 81       	ldd	r20, Y+7	; 0x07
    36f0:	58 85       	ldd	r21, Y+8	; 0x08
    36f2:	bc 01       	movw	r22, r24
    36f4:	cd 01       	movw	r24, r26
    36f6:	0e 2f       	mov	r16, r30
    36f8:	0e 94 7c 15 	call	0x2af8	; 0x2af8 <Operation>
    36fc:	9b 01       	movw	r18, r22
    36fe:	ac 01       	movw	r20, r24
    3700:	ce 01       	movw	r24, r28
    3702:	4b 96       	adiw	r24, 0x1b	; 27
    3704:	ba 01       	movw	r22, r20
    3706:	a9 01       	movw	r20, r18
    3708:	0e 94 f3 13 	call	0x27e6	; 0x27e6 <stackf_push>
    return post_exp;
}
f32 Evaluate(u8* post_exp){
    stack_float eval;stackf_init(&eval);
    f32 base=0.1f; f32 val1=0 ; f32 val2=0.0f ;u8 flag1=false,flag2=false;
for(u32 i=0;post_exp[i]!='\0';i++){
    370c:	89 85       	ldd	r24, Y+9	; 0x09
    370e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3710:	ab 85       	ldd	r26, Y+11	; 0x0b
    3712:	bc 85       	ldd	r27, Y+12	; 0x0c
    3714:	01 96       	adiw	r24, 0x01	; 1
    3716:	a1 1d       	adc	r26, r1
    3718:	b1 1d       	adc	r27, r1
    371a:	89 87       	std	Y+9, r24	; 0x09
    371c:	9a 87       	std	Y+10, r25	; 0x0a
    371e:	ab 87       	std	Y+11, r26	; 0x0b
    3720:	bc 87       	std	Y+12, r27	; 0x0c
    3722:	29 85       	ldd	r18, Y+9	; 0x09
    3724:	3a 85       	ldd	r19, Y+10	; 0x0a
    3726:	fe 01       	movw	r30, r28
    3728:	e3 56       	subi	r30, 0x63	; 99
    372a:	ff 4f       	sbci	r31, 0xFF	; 255
    372c:	80 81       	ld	r24, Z
    372e:	91 81       	ldd	r25, Z+1	; 0x01
    3730:	fc 01       	movw	r30, r24
    3732:	e2 0f       	add	r30, r18
    3734:	f3 1f       	adc	r31, r19
    3736:	80 81       	ld	r24, Z
    3738:	88 23       	and	r24, r24
    373a:	09 f0       	breq	.+2      	; 0x373e <Evaluate+0x38a>
    373c:	b0 ce       	rjmp	.-672    	; 0x349e <Evaluate+0xea>
 f32 op1=stackf_top(&eval);
stackf_pop(&eval);
 stackf_push(&eval,Operation(op1,op2,post_exp[i]));
}
}
return stackf_top(&eval);
    373e:	ce 01       	movw	r24, r28
    3740:	4b 96       	adiw	r24, 0x1b	; 27
    3742:	0e 94 65 14 	call	0x28ca	; 0x28ca <stackf_top>
    3746:	dc 01       	movw	r26, r24
    3748:	cb 01       	movw	r24, r22
}
    374a:	bc 01       	movw	r22, r24
    374c:	cd 01       	movw	r24, r26
    374e:	c2 56       	subi	r28, 0x62	; 98
    3750:	df 4f       	sbci	r29, 0xFF	; 255
    3752:	0f b6       	in	r0, 0x3f	; 63
    3754:	f8 94       	cli
    3756:	de bf       	out	0x3e, r29	; 62
    3758:	0f be       	out	0x3f, r0	; 63
    375a:	cd bf       	out	0x3d, r28	; 61
    375c:	cf 91       	pop	r28
    375e:	df 91       	pop	r29
    3760:	0f 91       	pop	r16
    3762:	08 95       	ret

00003764 <f32ToString2>:
void f32ToString2(char* str, f32 d, u8 n)
{
    3764:	0f 93       	push	r16
    3766:	1f 93       	push	r17
    3768:	df 93       	push	r29
    376a:	cf 93       	push	r28
    376c:	cd b7       	in	r28, 0x3d	; 61
    376e:	de b7       	in	r29, 0x3e	; 62
    3770:	2f 97       	sbiw	r28, 0x0f	; 15
    3772:	0f b6       	in	r0, 0x3f	; 63
    3774:	f8 94       	cli
    3776:	de bf       	out	0x3e, r29	; 62
    3778:	0f be       	out	0x3f, r0	; 63
    377a:	cd bf       	out	0x3d, r28	; 61
    377c:	9a 87       	std	Y+10, r25	; 0x0a
    377e:	89 87       	std	Y+9, r24	; 0x09
    3780:	4b 87       	std	Y+11, r20	; 0x0b
    3782:	5c 87       	std	Y+12, r21	; 0x0c
    3784:	6d 87       	std	Y+13, r22	; 0x0d
    3786:	7e 87       	std	Y+14, r23	; 0x0e
    3788:	2f 87       	std	Y+15, r18	; 0x0f
	//For integer part conversion
	u16 t = 1;
    378a:	81 e0       	ldi	r24, 0x01	; 1
    378c:	90 e0       	ldi	r25, 0x00	; 0
    378e:	98 87       	std	Y+8, r25	; 0x08
    3790:	8f 83       	std	Y+7, r24	; 0x07
	u16 temp = 1;
    3792:	81 e0       	ldi	r24, 0x01	; 1
    3794:	90 e0       	ldi	r25, 0x00	; 0
    3796:	9e 83       	std	Y+6, r25	; 0x06
    3798:	8d 83       	std	Y+5, r24	; 0x05
	u16 i = 0;
    379a:	1c 82       	std	Y+4, r1	; 0x04
    379c:	1b 82       	std	Y+3, r1	; 0x03
    379e:	0e c0       	rjmp	.+28     	; 0x37bc <f32ToString2+0x58>
	while(t <= (int)d)
	t *= 10;
    37a0:	8f 81       	ldd	r24, Y+7	; 0x07
    37a2:	98 85       	ldd	r25, Y+8	; 0x08
    37a4:	9c 01       	movw	r18, r24
    37a6:	22 0f       	add	r18, r18
    37a8:	33 1f       	adc	r19, r19
    37aa:	c9 01       	movw	r24, r18
    37ac:	88 0f       	add	r24, r24
    37ae:	99 1f       	adc	r25, r25
    37b0:	88 0f       	add	r24, r24
    37b2:	99 1f       	adc	r25, r25
    37b4:	82 0f       	add	r24, r18
    37b6:	93 1f       	adc	r25, r19
    37b8:	98 87       	std	Y+8, r25	; 0x08
    37ba:	8f 83       	std	Y+7, r24	; 0x07
{
	//For integer part conversion
	u16 t = 1;
	u16 temp = 1;
	u16 i = 0;
	while(t <= (int)d)
    37bc:	6b 85       	ldd	r22, Y+11	; 0x0b
    37be:	7c 85       	ldd	r23, Y+12	; 0x0c
    37c0:	8d 85       	ldd	r24, Y+13	; 0x0d
    37c2:	9e 85       	ldd	r25, Y+14	; 0x0e
    37c4:	0e 94 ab 04 	call	0x956	; 0x956 <__fixsfsi>
    37c8:	dc 01       	movw	r26, r24
    37ca:	cb 01       	movw	r24, r22
    37cc:	9c 01       	movw	r18, r24
    37ce:	8f 81       	ldd	r24, Y+7	; 0x07
    37d0:	98 85       	ldd	r25, Y+8	; 0x08
    37d2:	28 17       	cp	r18, r24
    37d4:	39 07       	cpc	r19, r25
    37d6:	20 f7       	brcc	.-56     	; 0x37a0 <f32ToString2+0x3c>
	t *= 10;
	temp = t/10;
    37d8:	8f 81       	ldd	r24, Y+7	; 0x07
    37da:	98 85       	ldd	r25, Y+8	; 0x08
    37dc:	2a e0       	ldi	r18, 0x0A	; 10
    37de:	30 e0       	ldi	r19, 0x00	; 0
    37e0:	b9 01       	movw	r22, r18
    37e2:	0e 94 9d 1d 	call	0x3b3a	; 0x3b3a <__udivmodhi4>
    37e6:	cb 01       	movw	r24, r22
    37e8:	9e 83       	std	Y+6, r25	; 0x06
    37ea:	8d 83       	std	Y+5, r24	; 0x05
	for(i = 0; temp > 0; i++)
    37ec:	1c 82       	std	Y+4, r1	; 0x04
    37ee:	1b 82       	std	Y+3, r1	; 0x03
    37f0:	4a c0       	rjmp	.+148    	; 0x3886 <f32ToString2+0x122>
	{
		u16 digit = ((u16)d)/temp;
    37f2:	6b 85       	ldd	r22, Y+11	; 0x0b
    37f4:	7c 85       	ldd	r23, Y+12	; 0x0c
    37f6:	8d 85       	ldd	r24, Y+13	; 0x0d
    37f8:	9e 85       	ldd	r25, Y+14	; 0x0e
    37fa:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    37fe:	dc 01       	movw	r26, r24
    3800:	cb 01       	movw	r24, r22
    3802:	2d 81       	ldd	r18, Y+5	; 0x05
    3804:	3e 81       	ldd	r19, Y+6	; 0x06
    3806:	b9 01       	movw	r22, r18
    3808:	0e 94 9d 1d 	call	0x3b3a	; 0x3b3a <__udivmodhi4>
    380c:	cb 01       	movw	r24, r22
    380e:	9a 83       	std	Y+2, r25	; 0x02
    3810:	89 83       	std	Y+1, r24	; 0x01
		str[i] = digit + '0';
    3812:	29 85       	ldd	r18, Y+9	; 0x09
    3814:	3a 85       	ldd	r19, Y+10	; 0x0a
    3816:	8b 81       	ldd	r24, Y+3	; 0x03
    3818:	9c 81       	ldd	r25, Y+4	; 0x04
    381a:	f9 01       	movw	r30, r18
    381c:	e8 0f       	add	r30, r24
    381e:	f9 1f       	adc	r31, r25
    3820:	89 81       	ldd	r24, Y+1	; 0x01
    3822:	80 5d       	subi	r24, 0xD0	; 208
    3824:	80 83       	st	Z, r24
		d = d - (double)(digit*temp);
    3826:	29 81       	ldd	r18, Y+1	; 0x01
    3828:	3a 81       	ldd	r19, Y+2	; 0x02
    382a:	8d 81       	ldd	r24, Y+5	; 0x05
    382c:	9e 81       	ldd	r25, Y+6	; 0x06
    382e:	ac 01       	movw	r20, r24
    3830:	24 9f       	mul	r18, r20
    3832:	c0 01       	movw	r24, r0
    3834:	25 9f       	mul	r18, r21
    3836:	90 0d       	add	r25, r0
    3838:	34 9f       	mul	r19, r20
    383a:	90 0d       	add	r25, r0
    383c:	11 24       	eor	r1, r1
    383e:	cc 01       	movw	r24, r24
    3840:	a0 e0       	ldi	r26, 0x00	; 0
    3842:	b0 e0       	ldi	r27, 0x00	; 0
    3844:	bc 01       	movw	r22, r24
    3846:	cd 01       	movw	r24, r26
    3848:	0e 94 ff 04 	call	0x9fe	; 0x9fe <__floatunsisf>
    384c:	9b 01       	movw	r18, r22
    384e:	ac 01       	movw	r20, r24
    3850:	6b 85       	ldd	r22, Y+11	; 0x0b
    3852:	7c 85       	ldd	r23, Y+12	; 0x0c
    3854:	8d 85       	ldd	r24, Y+13	; 0x0d
    3856:	9e 85       	ldd	r25, Y+14	; 0x0e
    3858:	0e 94 b9 01 	call	0x372	; 0x372 <__subsf3>
    385c:	dc 01       	movw	r26, r24
    385e:	cb 01       	movw	r24, r22
    3860:	8b 87       	std	Y+11, r24	; 0x0b
    3862:	9c 87       	std	Y+12, r25	; 0x0c
    3864:	ad 87       	std	Y+13, r26	; 0x0d
    3866:	be 87       	std	Y+14, r27	; 0x0e
		temp /= 10;
    3868:	8d 81       	ldd	r24, Y+5	; 0x05
    386a:	9e 81       	ldd	r25, Y+6	; 0x06
    386c:	2a e0       	ldi	r18, 0x0A	; 10
    386e:	30 e0       	ldi	r19, 0x00	; 0
    3870:	b9 01       	movw	r22, r18
    3872:	0e 94 9d 1d 	call	0x3b3a	; 0x3b3a <__udivmodhi4>
    3876:	cb 01       	movw	r24, r22
    3878:	9e 83       	std	Y+6, r25	; 0x06
    387a:	8d 83       	std	Y+5, r24	; 0x05
	u16 temp = 1;
	u16 i = 0;
	while(t <= (int)d)
	t *= 10;
	temp = t/10;
	for(i = 0; temp > 0; i++)
    387c:	8b 81       	ldd	r24, Y+3	; 0x03
    387e:	9c 81       	ldd	r25, Y+4	; 0x04
    3880:	01 96       	adiw	r24, 0x01	; 1
    3882:	9c 83       	std	Y+4, r25	; 0x04
    3884:	8b 83       	std	Y+3, r24	; 0x03
    3886:	8d 81       	ldd	r24, Y+5	; 0x05
    3888:	9e 81       	ldd	r25, Y+6	; 0x06
    388a:	00 97       	sbiw	r24, 0x00	; 0
    388c:	09 f0       	breq	.+2      	; 0x3890 <f32ToString2+0x12c>
    388e:	b1 cf       	rjmp	.-158    	; 0x37f2 <f32ToString2+0x8e>
		d = d - (double)(digit*temp);
		temp /= 10;
	}

	//Add decimal point
	str[i++] = '.';
    3890:	29 85       	ldd	r18, Y+9	; 0x09
    3892:	3a 85       	ldd	r19, Y+10	; 0x0a
    3894:	8b 81       	ldd	r24, Y+3	; 0x03
    3896:	9c 81       	ldd	r25, Y+4	; 0x04
    3898:	f9 01       	movw	r30, r18
    389a:	e8 0f       	add	r30, r24
    389c:	f9 1f       	adc	r31, r25
    389e:	8e e2       	ldi	r24, 0x2E	; 46
    38a0:	80 83       	st	Z, r24
    38a2:	8b 81       	ldd	r24, Y+3	; 0x03
    38a4:	9c 81       	ldd	r25, Y+4	; 0x04
    38a6:	01 96       	adiw	r24, 0x01	; 1
    38a8:	9c 83       	std	Y+4, r25	; 0x04
    38aa:	8b 83       	std	Y+3, r24	; 0x03
    38ac:	4a c0       	rjmp	.+148    	; 0x3942 <f32ToString2+0x1de>

	//For after decimal point conversion
	for(; n > 0; n--)
	{
		d = d*10;
    38ae:	6b 85       	ldd	r22, Y+11	; 0x0b
    38b0:	7c 85       	ldd	r23, Y+12	; 0x0c
    38b2:	8d 85       	ldd	r24, Y+13	; 0x0d
    38b4:	9e 85       	ldd	r25, Y+14	; 0x0e
    38b6:	20 e0       	ldi	r18, 0x00	; 0
    38b8:	30 e0       	ldi	r19, 0x00	; 0
    38ba:	40 e2       	ldi	r20, 0x20	; 32
    38bc:	51 e4       	ldi	r21, 0x41	; 65
    38be:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    38c2:	dc 01       	movw	r26, r24
    38c4:	cb 01       	movw	r24, r22
    38c6:	8b 87       	std	Y+11, r24	; 0x0b
    38c8:	9c 87       	std	Y+12, r25	; 0x0c
    38ca:	ad 87       	std	Y+13, r26	; 0x0d
    38cc:	be 87       	std	Y+14, r27	; 0x0e
		str[i++] = (u8)d + '0';
    38ce:	29 85       	ldd	r18, Y+9	; 0x09
    38d0:	3a 85       	ldd	r19, Y+10	; 0x0a
    38d2:	8b 81       	ldd	r24, Y+3	; 0x03
    38d4:	9c 81       	ldd	r25, Y+4	; 0x04
    38d6:	89 01       	movw	r16, r18
    38d8:	08 0f       	add	r16, r24
    38da:	19 1f       	adc	r17, r25
    38dc:	6b 85       	ldd	r22, Y+11	; 0x0b
    38de:	7c 85       	ldd	r23, Y+12	; 0x0c
    38e0:	8d 85       	ldd	r24, Y+13	; 0x0d
    38e2:	9e 85       	ldd	r25, Y+14	; 0x0e
    38e4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    38e8:	dc 01       	movw	r26, r24
    38ea:	cb 01       	movw	r24, r22
    38ec:	80 5d       	subi	r24, 0xD0	; 208
    38ee:	f8 01       	movw	r30, r16
    38f0:	80 83       	st	Z, r24
    38f2:	8b 81       	ldd	r24, Y+3	; 0x03
    38f4:	9c 81       	ldd	r25, Y+4	; 0x04
    38f6:	01 96       	adiw	r24, 0x01	; 1
    38f8:	9c 83       	std	Y+4, r25	; 0x04
    38fa:	8b 83       	std	Y+3, r24	; 0x03
		d -= (u8)d;
    38fc:	6b 85       	ldd	r22, Y+11	; 0x0b
    38fe:	7c 85       	ldd	r23, Y+12	; 0x0c
    3900:	8d 85       	ldd	r24, Y+13	; 0x0d
    3902:	9e 85       	ldd	r25, Y+14	; 0x0e
    3904:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3908:	dc 01       	movw	r26, r24
    390a:	cb 01       	movw	r24, r22
    390c:	88 2f       	mov	r24, r24
    390e:	90 e0       	ldi	r25, 0x00	; 0
    3910:	aa 27       	eor	r26, r26
    3912:	97 fd       	sbrc	r25, 7
    3914:	a0 95       	com	r26
    3916:	ba 2f       	mov	r27, r26
    3918:	bc 01       	movw	r22, r24
    391a:	cd 01       	movw	r24, r26
    391c:	0e 94 4d 04 	call	0x89a	; 0x89a <__floatsisf>
    3920:	9b 01       	movw	r18, r22
    3922:	ac 01       	movw	r20, r24
    3924:	6b 85       	ldd	r22, Y+11	; 0x0b
    3926:	7c 85       	ldd	r23, Y+12	; 0x0c
    3928:	8d 85       	ldd	r24, Y+13	; 0x0d
    392a:	9e 85       	ldd	r25, Y+14	; 0x0e
    392c:	0e 94 b9 01 	call	0x372	; 0x372 <__subsf3>
    3930:	dc 01       	movw	r26, r24
    3932:	cb 01       	movw	r24, r22
    3934:	8b 87       	std	Y+11, r24	; 0x0b
    3936:	9c 87       	std	Y+12, r25	; 0x0c
    3938:	ad 87       	std	Y+13, r26	; 0x0d
    393a:	be 87       	std	Y+14, r27	; 0x0e

	//Add decimal point
	str[i++] = '.';

	//For after decimal point conversion
	for(; n > 0; n--)
    393c:	8f 85       	ldd	r24, Y+15	; 0x0f
    393e:	81 50       	subi	r24, 0x01	; 1
    3940:	8f 87       	std	Y+15, r24	; 0x0f
    3942:	8f 85       	ldd	r24, Y+15	; 0x0f
    3944:	88 23       	and	r24, r24
    3946:	09 f0       	breq	.+2      	; 0x394a <f32ToString2+0x1e6>
    3948:	b2 cf       	rjmp	.-156    	; 0x38ae <f32ToString2+0x14a>
		str[i++] = (u8)d + '0';
		d -= (u8)d;
	}

	//Null end
	str[i] = 0;
    394a:	89 85       	ldd	r24, Y+9	; 0x09
    394c:	9a 85       	ldd	r25, Y+10	; 0x0a
    394e:	2b 81       	ldd	r18, Y+3	; 0x03
    3950:	3c 81       	ldd	r19, Y+4	; 0x04
    3952:	fc 01       	movw	r30, r24
    3954:	e2 0f       	add	r30, r18
    3956:	f3 1f       	adc	r31, r19
    3958:	10 82       	st	Z, r1
}
    395a:	2f 96       	adiw	r28, 0x0f	; 15
    395c:	0f b6       	in	r0, 0x3f	; 63
    395e:	f8 94       	cli
    3960:	de bf       	out	0x3e, r29	; 62
    3962:	0f be       	out	0x3f, r0	; 63
    3964:	cd bf       	out	0x3d, r28	; 61
    3966:	cf 91       	pop	r28
    3968:	df 91       	pop	r29
    396a:	1f 91       	pop	r17
    396c:	0f 91       	pop	r16
    396e:	08 95       	ret

00003970 <main>:

int main(){
    3970:	df 93       	push	r29
    3972:	cf 93       	push	r28
    3974:	cd b7       	in	r28, 0x3d	; 61
    3976:	de b7       	in	r29, 0x3e	; 62
    3978:	aa 97       	sbiw	r28, 0x2a	; 42
    397a:	0f b6       	in	r0, 0x3f	; 63
    397c:	f8 94       	cli
    397e:	de bf       	out	0x3e, r29	; 62
    3980:	0f be       	out	0x3f, r0	; 63
    3982:	cd bf       	out	0x3d, r28	; 61
  u8 iter=0,x='\0';
    3984:	1a 86       	std	Y+10, r1	; 0x0a
    3986:	19 86       	std	Y+9, r1	; 0x09
  u8 inf_exp[Pre_length]= {' '};
    3988:	80 e2       	ldi	r24, 0x20	; 32
    398a:	fe 01       	movw	r30, r28
    398c:	3b 96       	adiw	r30, 0x0b	; 11
    398e:	df 01       	movw	r26, r30
    3990:	98 2f       	mov	r25, r24
    3992:	1d 92       	st	X+, r1
    3994:	9a 95       	dec	r25
    3996:	e9 f7       	brne	.-6      	; 0x3992 <main+0x22>
    3998:	80 e2       	ldi	r24, 0x20	; 32
    399a:	8b 87       	std	Y+11, r24	; 0x0b
 LCD_vid_Init();
    399c:	0e 94 eb 0b 	call	0x17d6	; 0x17d6 <LCD_vid_Init>
 LCD_vid_ClearScreen();
    39a0:	0e 94 a4 10 	call	0x2148	; 0x2148 <LCD_vid_ClearScreen>
 Keypad_vid_Init(); u8 flag_iter=DIO_Dyn_u8_TRUE;
    39a4:	0e 94 b7 11 	call	0x236e	; 0x236e <Keypad_vid_Init>
    39a8:	81 e0       	ldi	r24, 0x01	; 1
    39aa:	88 87       	std	Y+8, r24	; 0x08
 while(1){
 	x=Keypad_u8_Get_Button();
    39ac:	0e 94 ff 11 	call	0x23fe	; 0x23fe <Keypad_u8_Get_Button>
    39b0:	89 87       	std	Y+9, r24	; 0x09
 	if(x!='\0'){
    39b2:	89 85       	ldd	r24, Y+9	; 0x09
    39b4:	88 23       	and	r24, r24
    39b6:	d1 f3       	breq	.-12     	; 0x39ac <main+0x3c>
 		if(IsOperand(x)||IsOperator(x)||x==DOT||x==OP_PAR||x==CL_PAR){
    39b8:	89 85       	ldd	r24, Y+9	; 0x09
    39ba:	0e 94 60 16 	call	0x2cc0	; 0x2cc0 <IsOperand>
    39be:	88 23       	and	r24, r24
    39c0:	71 f4       	brne	.+28     	; 0x39de <main+0x6e>
    39c2:	89 85       	ldd	r24, Y+9	; 0x09
    39c4:	0e 94 a3 14 	call	0x2946	; 0x2946 <IsOperator>
    39c8:	88 23       	and	r24, r24
    39ca:	49 f4       	brne	.+18     	; 0x39de <main+0x6e>
    39cc:	89 85       	ldd	r24, Y+9	; 0x09
    39ce:	8e 32       	cpi	r24, 0x2E	; 46
    39d0:	31 f0       	breq	.+12     	; 0x39de <main+0x6e>
    39d2:	89 85       	ldd	r24, Y+9	; 0x09
    39d4:	88 32       	cpi	r24, 0x28	; 40
    39d6:	19 f0       	breq	.+6      	; 0x39de <main+0x6e>
    39d8:	89 85       	ldd	r24, Y+9	; 0x09
    39da:	89 32       	cpi	r24, 0x29	; 41
    39dc:	71 f4       	brne	.+28     	; 0x39fa <main+0x8a>
 				inf_exp[iter]=x;
    39de:	8a 85       	ldd	r24, Y+10	; 0x0a
    39e0:	28 2f       	mov	r18, r24
    39e2:	30 e0       	ldi	r19, 0x00	; 0
    39e4:	ce 01       	movw	r24, r28
    39e6:	0b 96       	adiw	r24, 0x0b	; 11
    39e8:	fc 01       	movw	r30, r24
    39ea:	e2 0f       	add	r30, r18
    39ec:	f3 1f       	adc	r31, r19
    39ee:	89 85       	ldd	r24, Y+9	; 0x09
    39f0:	80 83       	st	Z, r24
 				LCD_vid_WriteCharacter(x);
    39f2:	89 85       	ldd	r24, Y+9	; 0x09
    39f4:	0e 94 92 10 	call	0x2124	; 0x2124 <LCD_vid_WriteCharacter>
    39f8:	40 c0       	rjmp	.+128    	; 0x3a7a <main+0x10a>
 		}else if(x=='C'){
    39fa:	89 85       	ldd	r24, Y+9	; 0x09
    39fc:	83 34       	cpi	r24, 0x43	; 67
    39fe:	b9 f4       	brne	.+46     	; 0x3a2e <main+0xbe>
 				x='\0';
    3a00:	19 86       	std	Y+9, r1	; 0x09
 				for(u8 i=0;i<iter;i++)
    3a02:	19 82       	std	Y+1, r1	; 0x01
    3a04:	0c c0       	rjmp	.+24     	; 0x3a1e <main+0xae>
 					inf_exp[i]='\0'; iter=0;
    3a06:	89 81       	ldd	r24, Y+1	; 0x01
    3a08:	28 2f       	mov	r18, r24
    3a0a:	30 e0       	ldi	r19, 0x00	; 0
    3a0c:	ce 01       	movw	r24, r28
    3a0e:	0b 96       	adiw	r24, 0x0b	; 11
    3a10:	fc 01       	movw	r30, r24
    3a12:	e2 0f       	add	r30, r18
    3a14:	f3 1f       	adc	r31, r19
    3a16:	10 82       	st	Z, r1
 		if(IsOperand(x)||IsOperator(x)||x==DOT||x==OP_PAR||x==CL_PAR){
 				inf_exp[iter]=x;
 				LCD_vid_WriteCharacter(x);
 		}else if(x=='C'){
 				x='\0';
 				for(u8 i=0;i<iter;i++)
    3a18:	89 81       	ldd	r24, Y+1	; 0x01
    3a1a:	8f 5f       	subi	r24, 0xFF	; 255
    3a1c:	89 83       	std	Y+1, r24	; 0x01
    3a1e:	99 81       	ldd	r25, Y+1	; 0x01
    3a20:	8a 85       	ldd	r24, Y+10	; 0x0a
    3a22:	98 17       	cp	r25, r24
    3a24:	80 f3       	brcs	.-32     	; 0x3a06 <main+0x96>
 					inf_exp[i]='\0'; iter=0;
    3a26:	1a 86       	std	Y+10, r1	; 0x0a
 				 LCD_vid_ClearScreen();
    3a28:	0e 94 a4 10 	call	0x2148	; 0x2148 <LCD_vid_ClearScreen>
    3a2c:	bf cf       	rjmp	.-130    	; 0x39ac <main+0x3c>
 				continue;
 		}else if(x=='='){
    3a2e:	89 85       	ldd	r24, Y+9	; 0x09
    3a30:	8d 33       	cpi	r24, 0x3D	; 61
    3a32:	19 f5       	brne	.+70     	; 0x3a7a <main+0x10a>
 			iter++;
    3a34:	8a 85       	ldd	r24, Y+10	; 0x0a
    3a36:	8f 5f       	subi	r24, 0xFF	; 255
    3a38:	8a 87       	std	Y+10, r24	; 0x0a
 			LCD_vid_WriteCharacter(x);
    3a3a:	89 85       	ldd	r24, Y+9	; 0x09
    3a3c:	0e 94 92 10 	call	0x2124	; 0x2124 <LCD_vid_WriteCharacter>
 			LCD_vid_GoTORowCol(1,0); flag_iter=DIO_Dyn_u8_FALSE;
 		}

 	 }
 	}
 u8* str=In_Postfix(inf_exp);
    3a40:	ce 01       	movw	r24, r28
    3a42:	0b 96       	adiw	r24, 0x0b	; 11
    3a44:	0e 94 76 16 	call	0x2cec	; 0x2cec <In_Postfix>
    3a48:	9f 83       	std	Y+7, r25	; 0x07
    3a4a:	8e 83       	std	Y+6, r24	; 0x06
 f32 RESULT=Evaluate(str);
    3a4c:	8e 81       	ldd	r24, Y+6	; 0x06
    3a4e:	9f 81       	ldd	r25, Y+7	; 0x07
    3a50:	0e 94 da 19 	call	0x33b4	; 0x33b4 <Evaluate>
    3a54:	dc 01       	movw	r26, r24
    3a56:	cb 01       	movw	r24, r22
    3a58:	8a 83       	std	Y+2, r24	; 0x02
    3a5a:	9b 83       	std	Y+3, r25	; 0x03
    3a5c:	ac 83       	std	Y+4, r26	; 0x04
    3a5e:	bd 83       	std	Y+5, r27	; 0x05
 if(RESULT<0.0){
    3a60:	6a 81       	ldd	r22, Y+2	; 0x02
    3a62:	7b 81       	ldd	r23, Y+3	; 0x03
    3a64:	8c 81       	ldd	r24, Y+4	; 0x04
    3a66:	9d 81       	ldd	r25, Y+5	; 0x05
    3a68:	20 e0       	ldi	r18, 0x00	; 0
    3a6a:	30 e0       	ldi	r19, 0x00	; 0
    3a6c:	40 e0       	ldi	r20, 0x00	; 0
    3a6e:	50 e0       	ldi	r21, 0x00	; 0
    3a70:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    3a74:	88 23       	and	r24, r24
    3a76:	b4 f0       	brlt	.+44     	; 0x3aa4 <main+0x134>
    3a78:	25 c0       	rjmp	.+74     	; 0x3ac4 <main+0x154>
 			LCD_vid_WriteCharacter(x);
 			break;
 		}


 		while(Keypad_u8_Get_Button()!='\0');
    3a7a:	0e 94 ff 11 	call	0x23fe	; 0x23fe <Keypad_u8_Get_Button>
    3a7e:	88 23       	and	r24, r24
    3a80:	e1 f7       	brne	.-8      	; 0x3a7a <main+0x10a>
 		iter++;
    3a82:	8a 85       	ldd	r24, Y+10	; 0x0a
    3a84:	8f 5f       	subi	r24, 0xFF	; 255
    3a86:	8a 87       	std	Y+10, r24	; 0x0a
 		if(iter>15&&flag_iter){
    3a88:	8a 85       	ldd	r24, Y+10	; 0x0a
    3a8a:	80 31       	cpi	r24, 0x10	; 16
    3a8c:	08 f4       	brcc	.+2      	; 0x3a90 <main+0x120>
    3a8e:	8e cf       	rjmp	.-228    	; 0x39ac <main+0x3c>
    3a90:	88 85       	ldd	r24, Y+8	; 0x08
    3a92:	88 23       	and	r24, r24
    3a94:	09 f4       	brne	.+2      	; 0x3a98 <main+0x128>
    3a96:	8a cf       	rjmp	.-236    	; 0x39ac <main+0x3c>
 			LCD_vid_GoTORowCol(1,0); flag_iter=DIO_Dyn_u8_FALSE;
    3a98:	81 e0       	ldi	r24, 0x01	; 1
    3a9a:	60 e0       	ldi	r22, 0x00	; 0
    3a9c:	0e 94 d7 10 	call	0x21ae	; 0x21ae <LCD_vid_GoTORowCol>
    3aa0:	18 86       	std	Y+8, r1	; 0x08
    3aa2:	84 cf       	rjmp	.-248    	; 0x39ac <main+0x3c>
 	 }
 	}
 u8* str=In_Postfix(inf_exp);
 f32 RESULT=Evaluate(str);
 if(RESULT<0.0){
	 LCD_vid_GoTORowCol(1,0);
    3aa4:	81 e0       	ldi	r24, 0x01	; 1
    3aa6:	60 e0       	ldi	r22, 0x00	; 0
    3aa8:	0e 94 d7 10 	call	0x21ae	; 0x21ae <LCD_vid_GoTORowCol>
	 RESULT=-RESULT; LCD_vid_WriteCharacter('-');
    3aac:	8a 81       	ldd	r24, Y+2	; 0x02
    3aae:	9b 81       	ldd	r25, Y+3	; 0x03
    3ab0:	ac 81       	ldd	r26, Y+4	; 0x04
    3ab2:	bd 81       	ldd	r27, Y+5	; 0x05
    3ab4:	b0 58       	subi	r27, 0x80	; 128
    3ab6:	8a 83       	std	Y+2, r24	; 0x02
    3ab8:	9b 83       	std	Y+3, r25	; 0x03
    3aba:	ac 83       	std	Y+4, r26	; 0x04
    3abc:	bd 83       	std	Y+5, r27	; 0x05
    3abe:	8d e2       	ldi	r24, 0x2D	; 45
    3ac0:	0e 94 92 10 	call	0x2124	; 0x2124 <LCD_vid_WriteCharacter>
 }


 f32ToString2((char*) inf_exp,RESULT,2);
    3ac4:	ce 01       	movw	r24, r28
    3ac6:	0b 96       	adiw	r24, 0x0b	; 11
    3ac8:	2a 81       	ldd	r18, Y+2	; 0x02
    3aca:	3b 81       	ldd	r19, Y+3	; 0x03
    3acc:	4c 81       	ldd	r20, Y+4	; 0x04
    3ace:	5d 81       	ldd	r21, Y+5	; 0x05
    3ad0:	ba 01       	movw	r22, r20
    3ad2:	a9 01       	movw	r20, r18
    3ad4:	22 e0       	ldi	r18, 0x02	; 2
    3ad6:	0e 94 b2 1b 	call	0x3764	; 0x3764 <f32ToString2>
 LCD_vid_ClearScreen();
    3ada:	0e 94 a4 10 	call	0x2148	; 0x2148 <LCD_vid_ClearScreen>
 LCD_vid_WriteString(inf_exp);
    3ade:	ce 01       	movw	r24, r28
    3ae0:	0b 96       	adiw	r24, 0x0b	; 11
    3ae2:	0e 94 ae 10 	call	0x215c	; 0x215c <LCD_vid_WriteString>

 return 0;
    3ae6:	80 e0       	ldi	r24, 0x00	; 0
    3ae8:	90 e0       	ldi	r25, 0x00	; 0
}
    3aea:	aa 96       	adiw	r28, 0x2a	; 42
    3aec:	0f b6       	in	r0, 0x3f	; 63
    3aee:	f8 94       	cli
    3af0:	de bf       	out	0x3e, r29	; 62
    3af2:	0f be       	out	0x3f, r0	; 63
    3af4:	cd bf       	out	0x3d, r28	; 61
    3af6:	cf 91       	pop	r28
    3af8:	df 91       	pop	r29
    3afa:	08 95       	ret

00003afc <__mulsi3>:
    3afc:	62 9f       	mul	r22, r18
    3afe:	d0 01       	movw	r26, r0
    3b00:	73 9f       	mul	r23, r19
    3b02:	f0 01       	movw	r30, r0
    3b04:	82 9f       	mul	r24, r18
    3b06:	e0 0d       	add	r30, r0
    3b08:	f1 1d       	adc	r31, r1
    3b0a:	64 9f       	mul	r22, r20
    3b0c:	e0 0d       	add	r30, r0
    3b0e:	f1 1d       	adc	r31, r1
    3b10:	92 9f       	mul	r25, r18
    3b12:	f0 0d       	add	r31, r0
    3b14:	83 9f       	mul	r24, r19
    3b16:	f0 0d       	add	r31, r0
    3b18:	74 9f       	mul	r23, r20
    3b1a:	f0 0d       	add	r31, r0
    3b1c:	65 9f       	mul	r22, r21
    3b1e:	f0 0d       	add	r31, r0
    3b20:	99 27       	eor	r25, r25
    3b22:	72 9f       	mul	r23, r18
    3b24:	b0 0d       	add	r27, r0
    3b26:	e1 1d       	adc	r30, r1
    3b28:	f9 1f       	adc	r31, r25
    3b2a:	63 9f       	mul	r22, r19
    3b2c:	b0 0d       	add	r27, r0
    3b2e:	e1 1d       	adc	r30, r1
    3b30:	f9 1f       	adc	r31, r25
    3b32:	bd 01       	movw	r22, r26
    3b34:	cf 01       	movw	r24, r30
    3b36:	11 24       	eor	r1, r1
    3b38:	08 95       	ret

00003b3a <__udivmodhi4>:
    3b3a:	aa 1b       	sub	r26, r26
    3b3c:	bb 1b       	sub	r27, r27
    3b3e:	51 e1       	ldi	r21, 0x11	; 17
    3b40:	07 c0       	rjmp	.+14     	; 0x3b50 <__udivmodhi4_ep>

00003b42 <__udivmodhi4_loop>:
    3b42:	aa 1f       	adc	r26, r26
    3b44:	bb 1f       	adc	r27, r27
    3b46:	a6 17       	cp	r26, r22
    3b48:	b7 07       	cpc	r27, r23
    3b4a:	10 f0       	brcs	.+4      	; 0x3b50 <__udivmodhi4_ep>
    3b4c:	a6 1b       	sub	r26, r22
    3b4e:	b7 0b       	sbc	r27, r23

00003b50 <__udivmodhi4_ep>:
    3b50:	88 1f       	adc	r24, r24
    3b52:	99 1f       	adc	r25, r25
    3b54:	5a 95       	dec	r21
    3b56:	a9 f7       	brne	.-22     	; 0x3b42 <__udivmodhi4_loop>
    3b58:	80 95       	com	r24
    3b5a:	90 95       	com	r25
    3b5c:	bc 01       	movw	r22, r24
    3b5e:	cd 01       	movw	r24, r26
    3b60:	08 95       	ret

00003b62 <__prologue_saves__>:
    3b62:	2f 92       	push	r2
    3b64:	3f 92       	push	r3
    3b66:	4f 92       	push	r4
    3b68:	5f 92       	push	r5
    3b6a:	6f 92       	push	r6
    3b6c:	7f 92       	push	r7
    3b6e:	8f 92       	push	r8
    3b70:	9f 92       	push	r9
    3b72:	af 92       	push	r10
    3b74:	bf 92       	push	r11
    3b76:	cf 92       	push	r12
    3b78:	df 92       	push	r13
    3b7a:	ef 92       	push	r14
    3b7c:	ff 92       	push	r15
    3b7e:	0f 93       	push	r16
    3b80:	1f 93       	push	r17
    3b82:	cf 93       	push	r28
    3b84:	df 93       	push	r29
    3b86:	cd b7       	in	r28, 0x3d	; 61
    3b88:	de b7       	in	r29, 0x3e	; 62
    3b8a:	ca 1b       	sub	r28, r26
    3b8c:	db 0b       	sbc	r29, r27
    3b8e:	0f b6       	in	r0, 0x3f	; 63
    3b90:	f8 94       	cli
    3b92:	de bf       	out	0x3e, r29	; 62
    3b94:	0f be       	out	0x3f, r0	; 63
    3b96:	cd bf       	out	0x3d, r28	; 61
    3b98:	09 94       	ijmp

00003b9a <__epilogue_restores__>:
    3b9a:	2a 88       	ldd	r2, Y+18	; 0x12
    3b9c:	39 88       	ldd	r3, Y+17	; 0x11
    3b9e:	48 88       	ldd	r4, Y+16	; 0x10
    3ba0:	5f 84       	ldd	r5, Y+15	; 0x0f
    3ba2:	6e 84       	ldd	r6, Y+14	; 0x0e
    3ba4:	7d 84       	ldd	r7, Y+13	; 0x0d
    3ba6:	8c 84       	ldd	r8, Y+12	; 0x0c
    3ba8:	9b 84       	ldd	r9, Y+11	; 0x0b
    3baa:	aa 84       	ldd	r10, Y+10	; 0x0a
    3bac:	b9 84       	ldd	r11, Y+9	; 0x09
    3bae:	c8 84       	ldd	r12, Y+8	; 0x08
    3bb0:	df 80       	ldd	r13, Y+7	; 0x07
    3bb2:	ee 80       	ldd	r14, Y+6	; 0x06
    3bb4:	fd 80       	ldd	r15, Y+5	; 0x05
    3bb6:	0c 81       	ldd	r16, Y+4	; 0x04
    3bb8:	1b 81       	ldd	r17, Y+3	; 0x03
    3bba:	aa 81       	ldd	r26, Y+2	; 0x02
    3bbc:	b9 81       	ldd	r27, Y+1	; 0x01
    3bbe:	ce 0f       	add	r28, r30
    3bc0:	d1 1d       	adc	r29, r1
    3bc2:	0f b6       	in	r0, 0x3f	; 63
    3bc4:	f8 94       	cli
    3bc6:	de bf       	out	0x3e, r29	; 62
    3bc8:	0f be       	out	0x3f, r0	; 63
    3bca:	cd bf       	out	0x3d, r28	; 61
    3bcc:	ed 01       	movw	r28, r26
    3bce:	08 95       	ret

00003bd0 <_exit>:
    3bd0:	f8 94       	cli

00003bd2 <__stop_program>:
    3bd2:	ff cf       	rjmp	.-2      	; 0x3bd2 <__stop_program>
